int32_t* sub_48aed0(int32_t* arg1)

0048aed5  *(arg1 + 0x28) = 0x899c98
0048aedc  *arg1 = 0x7e8c68  {"wbox"}
0048aee9  *data_8c1cec = 0x14
0048aef3  *data_8c1cf0 = 0x5e1a70
0048aefd  sub_434ec0(arg1, data_8c1cec)
0048af09  *data_8c1ce0 = 0x16
0048af13  *data_8c1ce4 = 0x5deb90
0048af1d  sub_434ec0(arg1, data_8c1ce0)
0048af22  *data_8c1cd0 = arg1
0048af28  *data_8c1cdc = 0x6c2d80
0048af32  *data_8c1cc4 = 0x7e3ce0  {"mName"}
0048af3c  *data_8c1cc8 = 0
0048af46  *(arg1 + 0x1c) = 0x8c1cc4
0048af4d  *data_8c1cb4 = arg1
0048af53  *data_8c1c98 = arg1
0048af59  *data_8c1c7c = arg1
0048af5f  *data_8c1c60 = arg1
0048af67  *data_8c1cc0 = 0x48a5e0
0048af71  *data_8c1ca8 = 0x7e8c60  {"mTris"}
0048af7b  *data_8c1cac = 0x1c
0048af85  *data_8c1cd4 = 0x8c1ca8
0048af8f  *data_8c1ca4 = 0x484a30
0048af99  *data_8c1c8c = 0x7e8858  {"mVerts"}
0048afa3  *data_8c1c90 = 0x2c
0048afad  *data_8c1cb8 = 0x8c1c8c
0048afb7  *data_8c1c88 = 0x482650
0048afc1  *data_8c1c70 = 0x7e8c54  {"mNormals"}
0048afcb  *data_8c1c74 = 0x3c
0048afd5  *data_8c1c9c = 0x8c1c70
0048afdf  *data_8c1c6c = 0x487630
0048afe9  *data_8c1c54 = 0x7e8c4c  {"mQuads"}
0048aff3  *data_8c1c58 = 0x4c
0048affd  *data_8c1c80 = 0x8c1c54
0048b008  return arg1


int32_t sub_48f2a0(int32_t arg1)

0048f2a8  *(arg1 + 0x28) = 0x899a34
0048f2b6  *data_8c2b8c = 0x14
0048f2c0  *data_8c2b90 = 0x5c36b0
0048f2ca  sub_434ec0(arg1, data_8c2b8c)
0048f2de  *data_8c2b88 = 0x549f30
0048f2e3  *data_8c2b70 = 0x7e9600  {"mVertexShaderName"}
0048f2ed  *data_8c2b74 = 0x18
0048f2f7  *data_8c2b7c = arg1
0048f2fd  *(arg1 + 0x1c) = 0x8c2b70
0048f309  *data_8c2b6c = 0x549f30
0048f30e  *data_8c2b54 = 0x7e95ec  {"mPixelShaderName"}
0048f318  *data_8c2b58 = 0x20
0048f322  *data_8c2b60 = arg1
0048f328  *data_8c2b80 = 0x8c2b54
0048f332  *data_8c2b50 = 0x635b80
0048f33c  *data_8c2b38 = 0x7e95dc  {"mpVertexShader"}
0048f346  *data_8c2b3c = 0x28
0048f350  *data_8c2b44 = arg1
0048f356  *data_8c2b64 = 0x8c2b38
0048f360  *data_8c2b34 = 0x4f33e0
0048f366  *data_8c2b1c = 0x7e95c8  {"mBonePaletteIndex"}
0048f370  *data_8c2b20 = 0x2c
0048f37a  *data_8c2b28 = arg1
0048f380  *data_8c2b48 = 0x8c2b1c
0048f38a  *data_8c2b18 = 0x4f33e0
0048f390  *data_8c2b00 = 0x7e95b8  {"mGeometryFormat"}
0048f39a  *data_8c2b04 = 0x30
0048f3a4  *data_8c2b0c = arg1
0048f3aa  *data_8c2b2c = 0x8c2b00
0048f3b4  *data_8c2afc = 0x4f33e0
0048f3ba  *data_8c2ae4 = 0x7e95a8  {"mMinVertIndex"}
0048f3c4  *data_8c2ae8 = 0x34
0048f3ce  *data_8c2af0 = arg1
0048f3d4  *data_8c2b10 = 0x8c2ae4
0048f3de  *data_8c2ae0 = 0x4f33e0
0048f3e4  *data_8c2ac8 = 0x7e9598  {"mMaxVertIndex"}
0048f3ee  *data_8c2acc = 0x38
0048f3f8  *data_8c2ad4 = arg1
0048f3fe  *data_8c2af4 = 0x8c2ac8
0048f408  *data_8c2ac4 = 0x4f33e0
0048f40e  *data_8c2aac = 0x7e8cb8  {"mStartIndex"}
0048f418  *data_8c2ab0 = 0x3c
0048f422  *data_8c2ab8 = arg1
0048f428  *data_8c2ad8 = 0x8c2aac
0048f432  *data_8c2aa8 = 0x4f33e0
0048f438  *data_8c2a90 = 0x7e9588  {"mNumPrimitives"}
0048f442  *data_8c2a94 = 0x40
0048f448  *data_8c2a9c = arg1
0048f44e  *data_8c2abc = 0x8c2a90
0048f458  *data_8c2a8c = 0x549f30
0048f45d  *data_8c2a74 = 0x7e9578  {"mLightingGroup"}
0048f467  *data_8c2a78 = 0x48
0048f471  *data_8c2a80 = arg1
0048f477  *data_8c2aa0 = 0x8c2a74
0048f481  *data_8c2a70 = 0x480dc0
0048f48b  *data_8c2a58 = 0x7e9568  {"mBoundingBox"}
0048f495  *data_8c2a5c = 0x50
0048f49f  *data_8c2a64 = arg1
0048f4a5  *data_8c2a84 = 0x8c2a58
0048f4af  *data_8c2a54 = 0x480e00
0048f4b9  *data_8c2a3c = 0x7e9558  {"mBoundingSphere"}
0048f4c3  *data_8c2a40 = 0x68
0048f4cd  *data_8c2a48 = arg1
0048f4d3  *data_8c2a68 = 0x8c2a3c
0048f4dd  *data_8c2a38 = 0x48f260
0048f4e3  *data_8c2a20 = 0x7e9548  {"mhDiffuseMap"}
0048f4ed  *data_8c2a24 = 0x80
0048f4f7  *data_8c2a2c = arg1
0048f4fd  *data_8c2a4c = 0x8c2a20
0048f507  *data_8c2a1c = 0x48f260
0048f517  *data_8c2a04 = 0x7e9534  {"mhSpecularColorMap"}
0048f521  *data_8c2a08 = 0x94
0048f52b  *data_8c2a10 = arg1
0048f531  *data_8c2a30 = 0x8c2a04
0048f53b  *data_8c2a00 = 0x48f260
0048f541  *data_8c29e8 = 0x7e9528  {"mhDetailMap"}
0048f54b  *data_8c29ec = 0x84
0048f555  *data_8c29f4 = arg1
0048f55b  *data_8c2a14 = 0x8c29e8
0048f565  *data_8c29e4 = 0x48f260
0048f56b  *data_8c29cc = 0x7e951c  {"mhLightMap"}
0048f575  *data_8c29d0 = 0x88
0048f57f  *data_8c29d8 = arg1
0048f585  *data_8c29f8 = 0x8c29cc
0048f58f  *data_8c29c8 = 0x48f260
0048f595  *data_8c29b0 = 0x7e9510  {"mhBumpMap"}
0048f59f  *data_8c29b4 = 0x8c
0048f5a9  *data_8c29bc = arg1
0048f5af  *data_8c29dc = 0x8c29b0
0048f5b9  *data_8c29ac = 0x48f260
0048f5bf  *data_8c2994 = 0x7e9500  {"mhAmbientMap"}
0048f5c9  *data_8c2998 = 0x98
0048f5d3  *data_8c29a0 = arg1
0048f5d9  *data_8c29c0 = 0x8c2994
0048f5e3  *data_8c2990 = 0x48f260
0048f5e9  *data_8c2978 = 0x7e94e8  {"mhToonLightQuantized"}
0048f5f3  *data_8c297c = 0xa0
0048f5fd  *data_8c2984 = arg1
0048f603  *data_8c29a4 = 0x8c2978
0048f60d  *data_8c2974 = 0x635b80
0048f617  *data_8c295c = 0x7e94d8  {"mpPixelShader"}
0048f621  *data_8c2960 = 0xe4
0048f62b  *data_8c2968 = arg1
0048f631  *data_8c2988 = 0x8c295c
0048f63b  *data_8c2958 = 0x7397b0
0048f640  *data_8c2940 = 0x7e94bc  {"mbHasPixelShader_RemoveMe"}
0048f64a  *data_8c2944 = 0xe8
0048f654  *data_8c294c = arg1
0048f65a  *data_8c296c = 0x8c2940
0048f664  *data_8c293c = 0x482610
0048f66e  *data_8c2924 = 0x7e94b0  {"mTriStrips"}
0048f678  *data_8c2928 = 0xec
0048f682  *data_8c2930 = arg1
0048f688  *data_8c2950 = 0x8c2924
0048f692  *data_8c2920 = 0x4f33e0
0048f698  *data_8c2908 = 0x7e949c  {"mNumTotalIndices"}
0048f6a2  *data_8c290c = 0xfc
0048f6ac  *data_8c2914 = arg1
0048f6b2  *data_8c2934 = 0x8c2908
0048f6bc  *data_8c2904 = 0x7397b0
0048f6c1  *data_8c28ec = 0x7e948c  {"mbDoubleSided"}
0048f6cb  *data_8c28f0 = 0x100
0048f6d5  *data_8c28f8 = arg1
0048f6db  *data_8c2918 = 0x8c28ec
0048f6e5  *data_8c28e8 = 0x7397b0
0048f6ea  *data_8c28d0 = 0x7e9474  {"mbBumpEffectsSpecular"}
0048f6f4  *data_8c28d4 = 0x101
0048f6fe  *data_8c28dc = arg1
0048f704  *data_8c28fc = 0x8c28d0
0048f70e  *data_8c28cc = 0x5d5f20
0048f714  *data_8c28b4 = 0x7e9464  {"mfBumpHeight"}
0048f71e  *data_8c28b8 = 0x104
0048f728  *data_8c28c0 = arg1
0048f72e  *data_8c28e0 = 0x8c28b4
0048f738  *data_8c28b0 = 0x7397b0
0048f73d  *data_8c2898 = 0x7e9450  {"mbBumpAsNormalMap"}
0048f747  *data_8c289c = 0x108
0048f751  *data_8c28a4 = arg1
0048f757  *data_8c28c4 = 0x8c2898
0048f761  *data_8c2894 = 0x48f260
0048f767  *data_8c287c = 0x7e9444  {"mhEnvMap"}
0048f771  *data_8c2880 = 0x90
0048f77b  *data_8c2888 = arg1
0048f781  *data_8c28a8 = 0x8c287c
0048f78b  *data_8c2878 = 0x5d5f20
0048f791  *data_8c2860 = 0x7e9434  {"mfEccentricity"}
0048f79b  *data_8c2864 = 0x10c
0048f7a5  *data_8c286c = arg1
0048f7ab  *data_8c288c = 0x8c2860
0048f7ba  *data_8c285c = 0x47fba0
0048f7c0  *data_8c2844 = 0x7e9424  {"mSpecularColor"}
0048f7ca  *data_8c2848 = 0x11c
0048f7d4  *data_8c2850 = arg1
0048f7da  *data_8c2870 = 0x8c2844
0048f7e4  *data_8c2840 = 0x47fba0
0048f7ea  *data_8c2828 = 0x7e9414  {"mAmbientColor"}
0048f7f4  *data_8c282c = 0x12c
0048f7fe  *data_8c2834 = arg1
0048f804  *data_8c2854 = 0x8c2828
0048f80e  *data_8c2824 = 0x7397b0
0048f813  *data_8c280c = 0x7e9400  {"mbSelfIlluminated"}
0048f81d  *data_8c2810 = 0x13c
0048f827  *data_8c2818 = arg1
0048f82d  *data_8c2838 = 0x8c280c
0048f837  *data_8c2808 = 0x47fba0
0048f83d  *data_8c27f0 = 0x7e93ec  {"mToonMaterialColor"}
0048f847  *data_8c27f4 = 0xa4
0048f851  *data_8c27fc = arg1
0048f857  *data_8c281c = 0x8c27f0
0048f861  *data_8c27ec = 0x47fba0
0048f867  *data_8c27d4 = 0x7e93d8  {"mToonOutlineColor"}
0048f871  *data_8c27d8 = 0xb4
0048f87b  *data_8c27e0 = arg1
0048f881  *data_8c2800 = 0x8c27d4
0048f88b  *data_8c27d0 = 0x5d5f20
0048f891  *data_8c27b8 = 0x7e93c4  {"mToonOutlineSize"}
0048f89b  *data_8c27bc = 0xc4
0048f8a5  *data_8c27c4 = arg1
0048f8ab  *data_8c27e4 = 0x8c27b8
0048f8b5  *data_8c27b4 = 0x513c30
0048f8bf  *data_8c279c = 0x7e93b8  {"mToonOffset"}
0048f8c9  *data_8c27a0 = 0xcc
0048f8d3  *data_8c27a8 = arg1
0048f8d9  *data_8c27c8 = 0x8c279c
0048f8e3  *data_8c2798 = 0x7397b0
0048f8e8  *data_8c2780 = 0x7e93a4  {"mToonEnvLighting"}
0048f8f2  *data_8c2784 = 0xd4
0048f8fc  *data_8c278c = arg1
0048f902  *data_8c27ac = 0x8c2780
0048f90c  *data_8c277c = 0x7397b0
0048f911  *data_8c2764 = 0x7e9390  {"mToonNoNormalDeform"}
0048f91b  *data_8c2768 = 0xd5
0048f925  *data_8c2770 = arg1
0048f92b  *data_8c2790 = 0x8c2764
0048f935  *data_8c2760 = 0x7397b0
0048f93a  *data_8c2748 = 0x7e9380  {"mNeedSWSkinning"}
0048f944  *data_8c274c = 0xe0
0048f94e  *data_8c2754 = arg1
0048f954  *data_8c2774 = 0x8c2748
0048f95e  *data_8c2744 = 0x7397b0
0048f963  *data_8c272c = 0x7e936c  {"mNeedComputeOutline"}
0048f96d  *data_8c2730 = 0xe1
0048f977  *data_8c2738 = arg1
0048f97d  *data_8c2758 = 0x8c272c
0048f987  *data_8c2728 = 0x7397b0
0048f98c  *data_8c2710 = 0x7e9358  {"mNeedRenderOutline"}
0048f996  *data_8c2714 = 0xe2
0048f9a0  *data_8c271c = arg1
0048f9a6  *data_8c273c = 0x8c2710
0048f9b0  *data_8c270c = 0x5d5f20
0048f9b6  *data_8c26f4 = 0x7e933c  {"mToonMaxZConstOutlineSize"}
0048f9c0  *data_8c26f8 = 0xd8
0048f9ca  *data_8c2700 = arg1
0048f9d0  *data_8c2720 = 0x8c26f4
0048f9da  *data_8c26f0 = 0x5d5f20
0048f9e0  *data_8c26d8 = 0x7e9320  {"mToonMinZConstOutlineSize"}
0048f9ea  *data_8c26dc = 0xdc
0048f9f4  *data_8c26e4 = arg1
0048f9fa  *data_8c2704 = 0x8c26d8
0048fa04  *data_8c26d4 = 0x5d5f20
0048fa0a  *data_8c26bc = 0x7e9310  {"mGlowIntensity"}
0048fa14  *data_8c26c0 = 0x118
0048fa1e  *data_8c26c8 = arg1
0048fa24  *data_8c26e8 = 0x8c26bc
0048fa2e  *data_8c26b8 = 0x5d5f20
0048fa34  *data_8c26a0 = 0x7e92f8  {"mReceiveShadowIntensity"}
0048fa3e  *data_8c26a4 = 0x110
0048fa48  *data_8c26ac = arg1
0048fa4e  *data_8c26cc = 0x8c26a0
0048fa58  int32_t edi = *data_8c2698
0048fa60  *data_8c267c = 0
0048fa66  *data_8c2680 = edi
0048fa71  *data_8c266c = 0
0048fa77  int32_t ebp = *data_8c265c
0048fa7d  *data_8c2644 = 0x7397b0
0048fa82  *data_8c262c = 0x7e92e8  {"mReceiveShadows"}
0048fa8c  *data_8c2630 = 0x114
0048fa96  *data_8c2638 = arg1
0048fa9c  *data_8c26b0 = 0x8c262c
0048faa6  *data_8c269c = 0x4f33e0
0048faac  *data_8c2684 = 0x7e60f8  {"mAlphaMode"}
0048fab6  *data_8c2688 = 0x140
0048fac0  *data_8c268c = 0x40
0048fac6  *data_8c2690 = arg1
0048facc  *data_8c263c = 0x8c2684
0048fad6  *data_8c2674 = 0x7e92cc  {"RenderDevice::kBlendNormal"}
0048fae0  *data_8c261c = 0x7e92b0  {"RenderDevice::kBlendAlpha"}
0048faea  *data_8c2624 = 1
0048faf0  *data_8c2628 = 0x8c2674
0048fafa  *data_8c260c = 0x7e928c  {"RenderDevice::kBlendAlphaAlphaTe…"}
0048fb04  *data_8c2614 = 2
0048fb0e  *data_8c2618 = 0x8c261c
0048fb18  *data_8c25fc = 0x7e926c  {"RenderDevice::kBlendAlphaTest"}
0048fb22  *data_8c2604 = 3
0048fb2c  *data_8c2608 = 0x8c260c
0048fb36  *data_8c25ec = 0x7e9248  {"RenderDevice::kBlendInvAlphaTest"}
0048fb40  *data_8c25f4 = 4
0048fb4a  *data_8c25f8 = 0x8c25fc
0048fb54  *data_8c25dc = 0x7e9230  {"RenderDevice::kBlendAdd"}
0048fb5e  *data_8c25e4 = 5
0048fb68  *data_8c25e8 = 0x8c25ec
0048fb72  *data_8c25cc = 0x7e9210  {"RenderDevice::kBlendMultiply"}
0048fb7c  *data_8c25d4 = 6
0048fb86  *data_8c25d8 = 0x8c25dc
0048fb90  *data_8c25bc = 0x7e91f0  {"RenderDevice::kBlendInvMultiply"}
0048fb9a  *data_8c25c4 = 7
0048fba4  *data_8c25c8 = 0x8c25cc
0048fbae  *data_8c25ac = 0x7e91d0  {"RenderDevice::kBlendAlphaAdd"}
0048fbb8  *data_8c25b4 = 8
0048fbc2  *data_8c25b8 = 0x8c25bc
0048fbcc  *data_8c259c = 0x7e91ac  {"RenderDevice::kBlendAlphaSubtrac…"}
0048fbd6  *data_8c25a4 = 9
0048fbe0  *data_8c25a8 = 0x8c25ac
0048fbea  *data_8c2698 = 0x8c259c
0048fbf4  *data_8c2598 = 0x5d5f20
0048fbfa  *data_8c2580 = 0x7e919c  {"mfReflectivity"}
0048fc04  *data_8c2584 = 0x144
0048fc0e  *data_8c258c = arg1
0048fc14  *data_8c2694 = 0x8c2580
0048fc1e  *data_8c2660 = 0x4f33e0
0048fc24  *data_8c2648 = 0x7e918c  {"mToonNumShades"}
0048fc2e  *data_8c264c = 0xc8
0048fc38  *data_8c2650 = 0x40
0048fc3e  *data_8c2654 = arg1
0048fc44  *data_8c2590 = 0x8c2648
0048fc4e  *data_8c2664 = 0x7e916c  {"TriangleSet::kNumToonShades7"}
0048fc58  *data_8c2670 = ebp
0048fc5e  *data_8c2570 = 0x7e914c  {"TriangleSet::kNumToonShades6"}
0048fc68  *data_8c2578 = 1
0048fc6e  *data_8c257c = 0x8c2664
0048fc78  *data_8c2560 = 0x7e912c  {"TriangleSet::kNumToonShades5"}
0048fc82  *data_8c2568 = 2
0048fc8c  *data_8c256c = 0x8c2570
0048fc96  *data_8c2550 = 0x7e910c  {"TriangleSet::kNumToonShades4"}
0048fca0  *data_8c2558 = 3
0048fcaa  *data_8c255c = 0x8c2560
0048fcb4  *data_8c2540 = 0x7e90ec  {"TriangleSet::kNumToonShades3"}
0048fcbe  *data_8c2548 = 4
0048fcc8  *data_8c254c = 0x8c2550
0048fcd2  *data_8c2530 = 0x7e90cc  {"TriangleSet::kNumToonShades2"}
0048fcdc  *data_8c2538 = 5
0048fce6  *data_8c253c = 0x8c2540
0048fcf0  *data_8c2520 = 0x7e90a4  {"TriangleSet::kNumToonShadesUseTe…"}
0048fcfa  *data_8c2528 = 6
0048fd04  *data_8c252c = 0x8c2530
0048fd0e  *data_8c265c = 0x8c2520
0048fd18  *data_8c251c = 0x7397b0
0048fd1d  *data_8c2504 = 0x7e9094  {"mbToonRendering"}
0048fd27  *data_8c24fc = 1
0048fd2e  *data_8c24f0 = 0x7397b0
0048fd33  *data_8c24d4 = 0x7397b0
0048fd38  *data_8c24b8 = 0x7397b0
0048fd3d  *data_8c2510 = arg1
0048fd43  *data_8c24e4 = arg1
0048fd49  *data_8c2490 = arg1
0048fd4f  *data_8c2474 = arg1
0048fd55  *data_8c24c8 = arg1
0048fd5b  *data_8c24ac = arg1
0048fd64  *data_8c249c = 0x4f33e0
0048fd6a  int32_t ecx_1 = *data_8c2498
0048fd71  *data_8c248c = 0x40
0048fd77  *data_8c2508 = 0x9c
0048fd81  *data_8c2658 = 0x8c2504
0048fd8b  *data_8c24d8 = 0x7e9080  {"mbVertexAnimation"}
0048fd95  *data_8c24dc = 0xe3
0048fd9f  *data_8c2514 = 0x8c24d8
0048fda9  *data_8c2484 = 0x7e9074  {"mUVGenMode"}
0048fdb3  *data_8c2488 = 0x14c
0048fdbd  *data_8c24e8 = 0x8c2484
0048fdc7  *data_8c2458 = 0x7e9058  {"TriangleSet::eUVGENDefault"}
0048fdd1  *data_8c2460 = 0
0048fddb  *data_8c2464 = ecx_1
0048fde1  *data_8c24f4 = 0x7e9030  {"TriangleSet::eUVGENPositionCamer…"}
0048fdeb  *data_8c2500 = 0x8c2458
0048fdf5  *data_8c2498 = 0x8c24f4
0048fdff  *data_8c2480 = 0x5d5f20
0048fe05  *data_8c2468 = 0x7e9018  {"mUVScreenSpaceScaling"}
0048fe0f  *data_8c246c = 0x148
0048fe19  *data_8c2494 = 0x8c2468
0048fe23  *data_8c24bc = 0x7e9004  {"mUVScreenSpaceZoom"}
0048fe2d  *data_8c24c0 = 0x150
0048fe37  *data_8c2478 = 0x8c24bc
0048fe41  *data_8c24a0 = 0x7e8ff8  {"mbHasOctree"}
0048fe4b  *data_8c24a4 = 0x7c
0048fe55  *data_8c24cc = 0x8c24a0
0048fe60  return arg1

int32_t* sub_493d80(int32_t* arg1)

00493d85  *(arg1 + 0x10) = *(arg1 + 0x10) | 0x200000
00493d8c  *(arg1 + 0x28) = 0x89b2b4
00493d93  *arg1 = 0x7e987c  {"d3dmesh"}
00493da0  *data_8c3528 = 0x1b
00493daa  *data_8c352c = 0x5c11c0
00493db4  sub_434ec0(arg1, data_8c3528)
00493dc0  *data_8c351c = 0x1a
00493dca  *data_8c3520 = 0x5c11d0
00493dd4  sub_434ec0(arg1, data_8c351c)
00493de0  *data_8c3510 = 0
00493dea  *data_8c3514 = 0x5c1cf0
00493df4  sub_434ec0(arg1, data_8c3510)
00493e00  *data_8c3504 = 0x14
00493e0a  *data_8c3508 = 0x5c4b10
00493e14  sub_434ec0(arg1, data_8c3504)
00493e1e  *data_8c3500 = 0x6c2d80
00493e28  *data_8c34e8 = 0x7e3ce0  {"mName"}
00493e32  *data_8c34ec = 0x44
00493e3c  *data_8c34f4 = arg1
00493e42  *(arg1 + 0x1c) = 0x8c34e8
00493e4e  *data_8c34e4 = 0x4f33e0
00493e54  *data_8c34cc = 0x7e3e68  {"mVersion"}
00493e5e  *data_8c34d0 = 0x60
00493e68  *data_8c34d8 = arg1
00493e6e  *data_8c34f8 = 0x8c34cc
00493e78  *data_8c34c8 = 0x7397b0
00493e7d  *data_8c34b0 = 0x7e986c  {"mbDeformable"}
00493e87  *data_8c34b4 = 0x164
00493e91  *data_8c34bc = arg1
00493e97  *data_8c34dc = 0x8c34b0
00493ea1  *data_8c34ac = 0x480dc0
00493eab  *data_8c3494 = 0x7e9568  {"mBoundingBox"}
00493eb5  *data_8c3498 = 0x78
00493ebf  *data_8c34a0 = arg1
00493ec5  *data_8c34c0 = 0x8c3494
00493ecf  *data_8c3490 = 0x4916a0
00493ed9  *data_8c3478 = 0x7e985c  {"mTriangleSets"}
00493ee3  *data_8c347c = 0xc4
00493eed  *data_8c3484 = arg1
00493ef3  *data_8c34a4 = 0x8c3478
00493efd  *data_8c3474 = 0x48e750
00493f07  *data_8c345c = 0x7e9848  {"mVertexAnimations"}
00493f11  *data_8c3460 = 0xd4
00493f1b  *data_8c3468 = arg1
00493f21  *data_8c3488 = 0x8c345c
00493f2b  *data_8c3458 = 0x489ca0
00493f35  *data_8c3440 = 0x7e9838  {"mBonePalettes"}
00493f3f  *data_8c3444 = 0xe4
00493f49  *data_8c344c = arg1
00493f4f  *data_8c346c = 0x8c3440
00493f59  *data_8c343c = 0x4875f0
00493f63  *data_8c3424 = 0x7e9828  {"mSkinningData"}
00493f6d  *data_8c3428 = 0xf4
00493f77  *data_8c3430 = arg1
00493f7d  *data_8c3450 = 0x8c3424
00493f87  *data_8c3420 = 0x7397b0
00493f8c  *data_8c3408 = 0x7e981c  {"mbLightmaps"}
00493f96  *data_8c340c = 0x165
00493fa0  *data_8c3414 = arg1
00493fa6  *data_8c3434 = 0x8c3408
00493fb0  *data_8c3404 = 0x7397b0
00493fb5  *data_8c33ec = 0x7e9808  {"mbLowQualityRender"}
00493fbf  *data_8c33f0 = 0x167
00493fc9  *data_8c33f8 = arg1
00493fcf  *data_8c3418 = 0x8c33ec
00493fd9  *data_8c33e8 = 0x7397b0
00493fde  *data_8c33d0 = 0x7e97f0  {"mbVertexAlphaSupport"}
00493fe8  *data_8c33d4 = 0x168
00493ff2  *data_8c33dc = arg1
00493ff8  *data_8c33cc = 0x7397b0
00493ffd  *data_8c33b0 = 0x7397b0
00494002  *data_8c33c0 = arg1
00494008  *data_8c3388 = arg1
0049400e  *data_8c33a4 = arg1
00494014  *data_8c336c = arg1
0049401a  *data_8c3350 = arg1
00494020  *data_8c3334 = arg1
00494026  *data_8c3318 = arg1
0049402e  *data_8c33fc = 0x8c33d0
00494038  *data_8c33b4 = 0x7e97d8  {"mbMeshHasVertexAlpha"}
00494042  *data_8c33b8 = 0x169
0049404c  *data_8c33e0 = 0x8c33b4
00494056  *data_8c3394 = 0x4f33e0
0049405c  *data_8c337c = 0x7e97c4  {"mTriangleStripState"}
00494066  *data_8c3380 = 0x70
00494070  *data_8c33c4 = 0x8c337c
0049407a  *data_8c3398 = 0x7e97a4  {"mbMeshHasSmoothNormalsSupport"}
00494084  *data_8c339c = 0x16a
0049408e  *data_8c338c = 0x8c3398
00494098  *data_8c3378 = 0x4f33e0
0049409e  *data_8c3360 = 0x7e978c  {"mAnimatedVertexCount"}
004940a8  *data_8c3364 = 0x74
004940b2  *data_8c33a8 = 0x8c3360
004940bc  *data_8c335c = 0x40d890
004940c6  *data_8c3344 = 0x7e3c80  {"mFlags"}
004940d0  *data_8c3348 = 0x64
004940da  *data_8c3370 = 0x8c3344
004940e4  *data_8c3340 = 0x48e790
004940ee  *data_8c3328 = 0x7e9770  {"mToolAnimatedVertexEntries"}
004940f8  *data_8c332c = 0x16c
00494102  *data_8c3354 = 0x8c3328
0049410c  *data_8c3324 = 0x493c60
00494116  *data_8c330c = 0x7e9750  {"mToolAnimatedVertexGroupEntries"}
00494120  *data_8c3310 = 0x17c
0049412a  *data_8c3338 = 0x8c330c
00494135  return arg1


----------------------------------------------------


int32_t __stdcall sub_44a810(void* arg1 @ ecx, void* arg2)

0044a81d  int32_t* fsbase
0044a81d  int32_t var_c = *fsbase
0044a81e  *fsbase = &var_c
0044a837  char* var_bc = nullptr
0044a83b  char* eax_1 = *(arg2 + 0x14)
0044a843  char* var_b8 = eax_1
0044a840  int32_t eax_2
0044a840  if (*(arg1 + 0x64) != 0)
0044a85e      var_bc = eax_1
0044a862      eax_2 = sub_44a280(&var_bc, 4)
0044a850  else
0044a850      eax_2 = sub_44a3a0(arg1, &var_b8, 4)                          // <- read the file name
0044a867  if (*(arg1 + 0x64) != 0)
0044abfb      char* ecx_17 = var_b8
0044abff      if (ecx_17 u> 0)
0044ac07          if (*(arg2 + 0x18) u< 0x10)
0044ac25              eax_2 = sub_44a280(arg2 + 4, ecx_17)
0044ac14          else
0044ac14              eax_2 = sub_44a280(*(arg2 + 4), ecx_17)
0044a870  else if (var_b8 u> 0)
0044a882      char* eax_4 = var_b8
0044a889      if (eax_4 u>= sub_402730() - 2)
0044aa5b          void* eax_16 = sub_42dc60(eax_4 + 1)
0044aa60          if (*(arg1 + 0x64) != 0)
0044aa7c              sub_44a280(eax_16, var_b8)
0044aa6f          else
0044aa6f              sub_44a3a0(arg1, eax_16, var_b8)
0044aa87          *(eax_16 + var_b8) = 0
0044aa81          char var_b0
0044aa81          int32_t var_9c
0044aa81          char var_40
0044aa81          int32_t var_2c
0044aa81          void* eax_20
0044aa81          if (eax_16 == 0)
0044aad1              var_2c = 0xf
0044aadf              var_40 = 0
0044aae6              void var_44
0044aae6              eax_20 = &var_44
0044aaf8              var_bc = 8
0044aa91          else
0044aa91              char* eax_18 = eax_16
0044aa93              var_9c = 0xf
0044aa9b              var_b0 = 0
0044aa9f              void* edx_9 = eax_18 + 1
0044aaa2              char* ecx_12
0044aaa2              do
0044aaa2                  ecx_12.b = *eax_18
0044aaa4                  eax_18 = eax_18 + 1
0044aaa4              while (ecx_12.b != 0)
0044aab3              void var_b4
0044aab3              sub_40d9b0(&var_b4, eax_16, eax_18 - edx_9)
0044aab8              eax_20 = &var_b4
0044aac7              var_bc = 4
0044ab14          void var_7c
0044ab14          int32_t edx_10 = sub_40d8d0(&var_7c, eax_20, nullptr, __gfids_table[0xbae7688].rvAddr+3)
0044ab19          if ((var_bc.b & 8) != 0)
0044ab32              var_bc = var_bc & 0xfffffff7
0044ab37              if (var_2c u>= 0x10)
0044ab3c                  void* edx_11 = var_40.d
0044ab4f                  edx_10 = sub_4a99b0(edx_11, edx_11)
0044ab6e          int32_t var_4_7
0044ab6e          var_4_7.b = 0xa
0044ab7c          if ((var_bc.b & 4) != 0 && var_9c u>= 0x10)
0044ab8e              sub_4a99b0(edx_10, var_b0.d)
0044abb4          sub_40d8d0(arg2, &var_7c, nullptr, __gfids_table[0xbae7688].rvAddr+3)
0044abf1          eax_2 = sub_42dca0(eax_16)
0044a891      else
0044a891          void* eax_5 = sub_402750()
0044a89f          sub_7611e0(eax_5, 0, var_b8)
0044a8a7          if (*(arg1 + 0x64) != 0)
0044a8c3              sub_44a280(eax_5, var_b8)
0044a8b4          else
0044a8b4              sub_44a3a0(arg1, eax_5, var_b8)
0044a8ce          *(eax_5 + var_b8) = 0
0044a8c8          char var_94
0044a8c8          int32_t var_80
0044a8c8          char var_5c
0044a8c8          int32_t var_48
0044a8c8          void* eax_10
0044a8c8          if (eax_5 == 0)
0044a91b              var_48 = 0xf
0044a929              var_5c = 0
0044a92d              void var_60
0044a92d              eax_10 = &var_60
0044a93c              var_bc = 2
0044a8d8          else
0044a8d8              void* eax_8 = eax_5
0044a8da              var_80 = 0xf
0044a8e2              var_94 = 0
0044a8e6              void* edx_4 = eax_8 + 1
0044a8f0              char ecx_3
0044a8f0              do
0044a8f0                  ecx_3 = *eax_8
0044a8f2                  eax_8 = eax_8 + 1
0044a8f2              while (ecx_3 != 0)
0044a901              void var_98
0044a901              sub_40d9b0(&var_98, eax_5, eax_8 - edx_4)
0044a906              eax_10 = &var_98
0044a911              var_bc = 1
0044a964          void var_28
0044a964          int32_t edx_5 = sub_40d8d0(&var_28, eax_10, nullptr, __gfids_table[0xbae7688].rvAddr+3)
0044a969          if ((var_bc.b & 2) != 0)
0044a982              var_bc = var_bc & 0xfffffffd
0044a987              if (var_48 u>= 0x10)
0044a999                  sub_4a99b0(edx_5, var_5c.d)
0044a9b5          int32_t var_4_2
0044a9b5          var_4_2.b = 4
0044a9c3          if ((var_bc.b & 1) != 0 && var_80 u>= 0x10)
0044a9c8              void* edx_6 = var_94.d
0044a9d5              sub_4a99b0(edx_6, edx_6)
0044a9fe          sub_40d8d0(arg2, &var_28, nullptr, __gfids_table[0xbae7688].rvAddr+3)
0044aa32          eax_2 = sub_402780()
0044aa42  *fsbase = var_c
0044aa4f  return eax_2


----------------------------------------------------------

int32_t __stdcall sub_44a3a0(void* arg1 @ ecx, void* arg2, int32_t arg3)

0044a3a1  int32_t ebp = arg3
0044a3b0  if (ebp == 0)
0044a3b0      return 0
0044a51c  if (*(arg1 + 0xa0) == 0)
0044a51c      return *(**(arg1 + 0xc) + 0x20)(arg2, ebp)                        // <- this calls the function that read the file
0044a3c4  arg3 = 0
0044a3c0  if (ebp s> 0)
0044a3d2      do
0044a3d2          if (*(arg1 + 0x1308) == 0)
0044a3f2              *(arg1 + 0x1300) = *(**(arg1 + 0xc) + 0x14)()
0044a3f8              void* eax_4 = **(arg1 + 0xc)
0044a3fe              char* edi_1 = arg1 + 0x10f4
0044a407              uint32_t ecx_2 = *(arg1 + 0x12f4)
0044a40d              bool cond:2_1 = *(eax_4 + 0x20)(edi_1, *(arg1 + 0x12f4)) != ecx_2
0044a40f              *(arg1 + 0x1308) = 0
0044a419              if (not(cond:2_1))
0044a41b                  int32_t ebx_1 = *(arg1 + 0x1304)
0044a423                  int32_t eax_8
0044a423                  int32_t edx_3
0044a423                  edx_3:eax_8 = sx.q(ebx_1)
0044a424                  *(arg1 + 0x12f8)
0044a42a                  if (mods.dp.d(edx_3:eax_8, *(arg1 + 0x12f8)) == 0)
0044a436                      sub_593a60(arg1 + 0xa4, edi_1, ecx_2)
0044a43f                  else
0044a43f                      int32_t eax_11
0044a43f                      int32_t edx_5
0044a43f                      edx_5:eax_11 = sx.q(ebx_1)
0044a440                      *(arg1 + 0x12fc)
0044a44a                      if (mods.dp.d(edx_5:eax_11, *(arg1 + 0x12fc)) != 0 && ecx_2 s> 0)
0044a453                          char* eax_13 = edi_1
0044a455                          void* ecx_4 = 0xffffef0c - arg1
0044a457                          do
0044a457                              void* edx_6
0044a457                              edx_6.b = *eax_13
0044a459                              edx_6.b = not.b(edx_6.b)
0044a45b                              *eax_13 = edx_6.b
0044a45d                              eax_13 = eax_13 + 1
0044a45d                          while (ecx_4 + eax_13 s< *(arg1 + 0x12f4))
0044a46b              *(arg1 + 0x1304) = *(arg1 + 0x1304) + 1
0044a472          int32_t eax_14 = *(arg1 + 0x1308)
0044a478          int32_t edi_2 = *(arg1 + 0x12f4)
0044a4f2          if (eax_14 + ebp s< edi_2)
0044a4f2              if (ebp != 4)
0044a4f2                  sub_560c40(arg2, eax_14 + arg1 + 0x10f4, ebp)
0044a4f7                  *(arg1 + 0x1308) = *(arg1 + 0x1308) + ebp
0044a507                  return arg3 + ebp
0044a4d6              *arg2 = *(eax_14 + arg1 + 0x10f4)
0044a4d8              *(arg1 + 0x1308) = *(arg1 + 0x1308) + ebp
0044a4e7              return arg3 + ebp
0044a489          int32_t edi_3 = edi_2 - eax_14
0044a495          sub_560c40(arg2, eax_14 + arg1 + 0x10f4, edi_3)
0044a49a          arg3 = arg3 + edi_3
0044a49e          ebp = ebp - edi_3
0044a4a4          arg2 = arg2 + edi_3
0044a4a8          *(arg1 + 0x1308) = 0
0044a4a8      while (ebp s> 0)
0044a4c0  return arg3

------------------------------------------------------------

int32_t __fastcall sub_44a6e0(void* arg1)

0044a6e0  void* var_4 = arg1
0044a6e9  int32_t* eax = sub_44bff0(arg1 + 0x68)
0044a6ee  int32_t eax_1
0044a6ee  if (*(arg1 + 0x64) != 1 && *(arg1 + 0xa0) != 0)
0044a6ff      eax_1 = *(arg1 + 0x1308)
0044a6ee  void* edi_1
0044a6ee  if ((*(arg1 + 0x64) == 1 || (*(arg1 + 0x64) != 1 && *(arg1 + 0xa0) == 0)) || ((*(arg1 + 0x64) != 1 && *(arg1 + 0xa0) != 0) && eax_1 s<= 0))
0044a71d      edi_1 = *(**(arg1 + 0xc) + 0x14)()
0044a6ee  if ((*(arg1 + 0x64) != 1 && *(arg1 + 0xa0) != 0) && eax_1 s> 0)
0044a70f      edi_1 = *(arg1 + 0x1300) + eax_1
0044a71f  *eax = edi_1
0044a721  int32_t eax_4
0044a721  if (*(arg1 + 0x64) != 0)
0044a738      var_4 = edi_1
0044a73c      eax_4 = sub_44a280(&var_4, 4)
0044a72c  else
0044a72c      eax_4 = sub_44a3a0(arg1, eax, 4)
0044a74e  if (*(arg1 + 0x64) != 0)
0044a74e      *eax = edi_1
0044a754      return eax_4
0044a747  *eax = *eax + edi_1
0044a74d  return eax_4

--------------------------------------------------------------

int32_t sub_43d4f0(int32_t arg1 @ ebp, int32_t arg2 @ esi, int32_t arg3, void* arg4, void* arg5, int32_t* arg6)

0043d4fd  int32_t* fsbase
0043d4fd  int32_t var_c = *fsbase
0043d4fe  *fsbase = &var_c
0043d505  *data_8bad20
0043d514  void* edi
0043d514  void* var_448 = edi
0043d514  int32_t* esp_1 = &var_448
0043d515  sub_4a7d80()
0043d521  int32_t eax
0043d521  if ((*(arg4 + 0x10) & 1) == 0)
0043d538      int32_t* edi_1 = nullptr
0043d521      if (arg5 == 0 || (arg5 != 0 && (*(arg5 + 8) & 1) == 0))
0043d544          bool var_435_1 = true
0043d54d          void* ebp = *(arg4 + 0x18)
0043d550          if (ebp == 0)
0043d564              ebp = sub_43a730(arg4)
0043d56d          if (*(arg6 + 0x64) != 1)
0043d597              esp_1 = &var_448
0043d59c              int32_t* var_424
0043d59c              edi_1 = *sub_44a760(arg6, &var_424, arg4)
0043d56d              if (edi_1 != 0)
0043d66d                  var_435_1 = *(edi_1 + 8) == *(ebp + 0x28)
0043d5aa              else
0043d5aa                  *(arg6 + 0x9c) = *(arg6 + 0x9c) | 2
0043d5bb                  int32_t var_468
0043d5bb                  var_424 = &var_468
0043d5c2                  sub_436730(&var_468)
0043d5e9                  var_468 = 0
0043d5ed                  arg5.b = 1
0043d5f9                  void var_47c
0043d5f9                  sub_40d8d0(&var_47c, edi_1, arg6 + 0x2c, 0, 0xffffffff)
0043d604                  *(*data_8c043c + 0x1080) = 0
0043d60f                  *(*data_8c043c + 0x1084) = 0
0043d615                  *data_8c043c
0043d620                  arg5.b = 2
0043d62f                  arg4.b = 1
0043d637                  sub_414b00(sub_445ff0(0x7e6a14))
0043d63e                  sub_445ff0(0xf, 0x7e6a18, 0x7e6a1c)  {"Version information ""}
0043d64c                  __return_addr.b = 0
0043d654                  sub_414b00(sub_445ff0())
0043d654                  esp_1 = &var_448
0043d65b                  sub_445ff0()
0043d573          else
0043d573              if (ebp == 0)
0043d580                  ebp = sub_43a730(arg4)
0043d585              sub_44afa0(ebp)
0043d585              esp_1 = &var_448
0043d56d          bool var_437_1
0043d56d          char var_436_1
0043d56d          void* eax_20
0043d56d          if ((*(arg6 + 0x64) != 1 && edi_1 != 0) || *(arg6 + 0x64) == 1)
0043d676              var_436_1 = 1
0043d67b              var_437_1 = false
0043d672              if (*(arg6 + 0x64) == 0)
0043d68e                  var_437_1 = *(**(arg6 + 0xc) + 0x58)() == 0
0043d56d              if (var_435_1 == 0)
0043d78b                  eax_20 = sub_43c970(*edi_1, *(edi_1 + 4), *(edi_1 + 8), var_448, arg2, arg1)
0043d790                  esp_1 = &var_448
0043d56d          if ((*(arg6 + 0x64) != 1 && edi_1 == 0) || ((((*(arg6 + 0x64) != 1 && edi_1 != 0) || *(arg6 + 0x64) == 1) && var_435_1 == 0) && eax_20 == 0))
0043d660              eax = 0
0043d56d          if ((*(arg6 + 0x64) != 1 && edi_1 != 0) || *(arg6 + 0x64) == 1)
0043d79f              if ((var_435_1 == 0 && eax_20 != 0) && *(eax_20 + 0x34) s> 0)
0043d7b1                  bool cond:10_1
0043d7b1                  do
0043d7b1                      int32_t eax_21 = *(esp_1 + 0x1c)
0043d7c0                      int32_t ebx_4 = (eax_21 << 3) - eax_21
0043d7c5                      *(esp_1 + 0x450)
0043d7cc                      int32_t ebx_5 = ebx_4 + ebx_4
0043d7ce                      int32_t ebx_6 = ebx_5 + ebx_5
0043d7d0                      int32_t ebx_7 = ebx_6 + ebx_6
0043d7d4                      *(esp_1 - 4) = *(*(esp_1 + 0x14) + 0x3c) + ebx_7
0043d7d5                      *(esp_1 + 0x18) = ebx_7
0043d7d9                      void* eax_24
0043d7d9                      char ecx_23
0043d7d9                      eax_24, ecx_23 = sub_436a80()
0043d7d9                      esp_1 = esp_1
0043d7de                      void* ebp_2 = eax_24
0043d7e2                      *(esp_1 + 0x24) = ebp_2
0043d7e0                      void* edi_3
0043d7e0                      if (ebp_2 == 0)
0043d802                          edi_3 = nullptr
0043d7ed                      else
0043d7ed                          if ((*(ebp_2 + 8) & 0x10000000) == 0)
0043d7f5                              eax_24, ecx_23 = *(ebp_2 + 0x18)()
0043d7f7                              *(ebp_2 + 8) = *(ebp_2 + 8) | 0x10000000
0043d7fa                              *(ebp_2 + 0x18) = eax_24
0043d7fd                          edi_3 = *(ebp_2 + 0x18)
0043d806                      eax_24.b = ebp_2 == 0
0043d80b                      *(esp_1 + 0x20) = edi_3
0043d811                      if (ebp_2 != 0 && edi_3 != 0)
0043d81e                          eax_24.b = eax_24.b | ((*(edi_3 + 0x10) | *(ebp_2 + 8)) & 1)
0043d820                      void* eax_25
0043d820                      void* eax_26
0043d820                      void* edi_6
0043d820                      if (eax_24.b == 0)
0043d82c                          eax_25 = *(*(esp_1 + 0x14) + 0x3c)
0043d833                          eax_26 = eax_25 + ebx_7
0043d820                          if (*(eax_25 + ebx_7 + 0x20) != *(edi_3 + 8) || (*(eax_25 + ebx_7 + 0x20) == *(edi_3 + 8) && *(eax_26 + 0x24) != *(edi_3 + 0xc)))
0043d846                              *(esp_1 - 4) = 0x7e6a04  {" has changed.\n"}
0043d850                              *(esp_1 + 0x34) = esp_1 - 0x20
0043d854                              *(esp_1 - 0x24) = 0xffffffff
0043d856                              *(esp_1 - 0x28) = 0
0043d85d                              *(esp_1 - 8) = 0xf
0043d860                              *(esp_1 - 0xc) = 0
0043d867                              *(esp_1 - 0x2c) = eax_26
0043d868                              *(esp_1 - 0x1c) = 0
0043d86c                              sub_40d8d0(esp_1 - 0x20, 0xf)
0043d871                              *(esp_1 - 0x24) = 0x7e69f4  {"The type of "}
0043d876                              *(esp_1 - 0x28) = 0x7e6a18
0043d880                              *(esp_1 + 0x38) = esp_1 - 0x44
0043d884                              *(esp_1 - 0x2c) = 0xf
0043d887                              *(esp_1 - 0x48) = 0xffffffff
0043d88b                              *(esp_1 - 0x4c) = 0
0043d88c                              void* ebp_3 = arg6 + 0x2c
0043d88f                              *(esp_1 - 0x30) = 0
0043d892                              *(esp_1 - 0x50) = ebp_3
0043d893                              *(esp_1 + 0x444) = 3
0043d89b                              *(esp_1 - 0x40) = 0
0043d89f                              sub_40d8d0(esp_1 - 0x44, 0)
0043d8a9                              *(*data_8c043c + 0x1080) = 2
0043d8b9                              *(*data_8c043c + 0x1084) = 0
0043d8bf                              *data_8c043c
0043d8c5                              *(esp_1 - 0x48) = 0x7e6a14
0043d8ca                              *(esp_1 + 0x444) = 4
0043d8d2                              int32_t eax_28 = sub_445ff0()
0043d8d9                              *(esp_1 + 0x440) = 3
0043d8e1                              sub_414b00(eax_28)
0043d8e8                              sub_445ff0()
0043d8ef                              int32_t eax_31 = sub_445ff0()
0043d8f6                              *(esp_1 + 0x438) = 0
0043d8fe                              sub_414b00(eax_31)
0043d905                              sub_445ff0()
0043d90e                              int32_t eax_33 = *(*(esp_1 + 4) + 0x3c)
0043d915                              int32_t edx_8 = *(eax_33 + ebx_7 + 0x20)
0043d91b                              *(esp_1 - 0x14) = *(eax_33 + ebx_7 + 0x24)
0043d91c                              *(esp_1 - 0x18) = edx_8
0043d91d                              void* eax_35
0043d91d                              char edx_9
0043d91d                              eax_35, edx_9 = sub_434e60()
0043d922                              edi_6 = eax_35
0043d924                              void* eax_36 = *(esp_1 + 4)
0043d928                              void* esp_21 = esp_1 - 0x10
0043d820                              if (edi_6 == 0)
0043dad2                                  void* eax_54 = *(eax_36 + 0x3c) + ebx_7
0043dad9                                  void* eax_55
0043dad9                                  if (*(eax_54 + 0x18) u< 0x10)
0043dae3                                      eax_55 = eax_54 + 4
0043dade                                  else
0043dade                                      eax_55 = *(eax_54 + 4)
0043dae6                                  void* ebp_5
0043dae6                                  if (*(ebp_3 + 0x18) u< 0x10)
0043daf0                                      ebp_5 = ebp_3 + 4
0043daeb                                  else
0043daeb                                      ebp_5 = *(ebp_3 + 4)
0043daf3                                  *(esp_21 - 4) = eax_55
0043daf4                                  *(esp_21 - 8) = ebp_5
0043daf9                                  *(esp_21 - 0xc) = 0x7e6950  {"While serializing and remapping …"}
0043dafe                                  *(esp_21 - 0x10) = esp_21 + 0x3c
0043daff                                  sub_7621f5()
0043db04                                  esp_1 = esp_21
0043d933                              else
0043d933                                  bool cond:8_1 = *(arg6 + 0x64) == 1
0043d93e                                  *(esp_21 + 0x13) = *(ebx_7 + *(eax_36 + 0x3c) + 0x28)
0043d942                                  int32_t eax_37
0043d942                                  if (not(cond:8_1) && *(arg6 + 0xa0) != 0)
0043d94d                                      eax_37 = *(arg6 + 0x1308)
0043d942                                  if ((cond:8_1 || (not(cond:8_1) && *(arg6 + 0xa0) == 0)) || ((not(cond:8_1) && *(arg6 + 0xa0) != 0) && eax_37 s<= 0))
0043d96f                                      *(esp_21 + 0x18) = *(**(arg6 + 0xc) + 0x14)()
0043d942                                  if ((not(cond:8_1) && *(arg6 + 0xa0) != 0) && eax_37 s> 0)
0043d95f                                      *(esp_21 + 0x18) = *(arg6 + 0x1300) + eax_37
0043d97a                                  if (*(esp_21 + 0x13) != 0 && *(esp_21 + 0x11) == 0)
0043d983                                      sub_44a6e0()
0043d98a                                  int32_t eax_40
0043d98a                                  bool ecx_41
0043d98a                                  eax_40, ecx_41 = sub_434cf0(edi_6)
0043d991                                  int32_t* eax_41 = *(edi_6 + 0x20)
0043d994                                  int32_t eax_42
0043d994                                  int32_t eax_43
0043d994                                  if (eax_41 != 0)
0043d99b                                      while (*eax_41 != 0x14)
0043d99d                                          eax_41 = *(eax_41 + 8)
0043d9a2                                          if (eax_41 == 0)
0043d9a2                                              break
0043d994                                      if (*eax_41 == 0x14)
0043d9bc                                          eax_43 = *(eax_41 + 4)
0043d994                                          if (eax_43 != 0)
0043d9c3                                              *(esp_21 - 4) = arg6
0043d9c4                                              *(esp_21 - 8) = 0
0043d9c6                                              *(esp_21 - 0xc) = edi_6
0043d9c7                                              *(esp_21 - 0x10) = eax_40
0043d9c8                                              eax_42, ecx_41 = eax_43()
0043d9ca                                              esp_21 = esp_21
0043d994                                  if (((eax_41 == 0 || ((eax_41 != 0 && *eax_41 == 0x14) && eax_43 == 0)) || (eax_41 != 0 && *eax_41 != 0x14)) && true)
0043d9ad                                      *(esp_21 - 4) = arg6
0043d9ae                                      *(esp_21 - 8) = 0
0043d9b0                                      *(esp_21 - 0xc) = edi_6
0043d9b1                                      *(esp_21 - 0x10) = eax_40
0043d9b2                                      eax_42, ecx_41 = sub_43d4f0()
0043d9b7                                      esp_21 = esp_21
0043d9d4                                  void* edx_11 = *(esp_21 + 0x24)
0043d9de                                  int32_t* eax_45 = *(*(esp_21 + 0x20) + 0x20)
0043d9e4                                  *(esp_21 + 0x12) = *(esp_21 + 0x12) & eax_42 != 0
0043d9eb                                  int32_t ecx_43 = *(edx_11 + 4) + *(esp_21 + 0x44c)
0043d9f4                                  *(esp_21 + 0x2c) = eax_40
0043d9f8                                  *(esp_21 + 0x30) = edi_6
0043d9f2                                  int32_t eax_47
0043d9f2                                  int32_t eax_48
0043d9f2                                  if (eax_45 != 0)
0043d9fe                                      edi_6 = edi_6
0043da03                                      while (*eax_45 != 6)
0043da05                                          eax_45 = *(eax_45 + 8)
0043da0a                                          if (eax_45 == 0)
0043da0a                                              break
0043d9f2                                      if (*eax_45 == 6)
0043da2c                                          eax_48 = *(eax_45 + 4)
0043d9f2                                          if (eax_48 != 0)
0043da37                                              *(esp_21 - 4) = esp_21 + 0x2c
0043da38                                              int32_t edx_14 = *(esp_21 + 0x20)
0043da3c                                              *(esp_21 - 8) = 0
0043da3e                                              *(esp_21 - 0xc) = edx_14
0043da3f                                              *(esp_21 - 0x10) = ecx_43
0043da40                                              eax_47, ecx_43 = eax_48()
0043da42                                              esp_21 = esp_21
0043d9f2                                  if (((eax_45 == 0 || ((eax_45 != 0 && *eax_45 == 6) && eax_48 == 0)) || (eax_45 != 0 && *eax_45 != 6)) && true)
0043da15                                      int32_t eax_46 = *(esp_21 + 0x20)
0043da1d                                      *(esp_21 - 4) = esp_21 + 0x2c
0043da1e                                      *(esp_21 - 8) = 0
0043da20                                      *(esp_21 - 0xc) = eax_46
0043da21                                      *(esp_21 - 0x10) = ecx_43
0043da22                                      eax_47, ecx_43 = sub_439ae0()
0043da27                                      esp_21 = esp_21
0043da4e                                  ecx_43.b = eax_47 != 0
0043da51                                  *(esp_21 + 0x12) = *(esp_21 + 0x12) & ecx_43.b
0043da55                                  *(esp_21 - 4) = eax_40
0043da58                                  sub_434d50(edi_6)
0043da58                                  esp_1 = esp_21
0043da5d                                  if (*(esp_1 + 0x13) != 0 && *(esp_1 + 0x11) == 0)
0043da6d                                      sub_44a5c0()
0043da5d                                  if (*(esp_1 + 0x13) == 0 || (*(esp_1 + 0x13) != 0 && *(esp_1 + 0x11) != 0))
0043da5d                                      int32_t ecx_47
0043da5d                                      if (*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0)
0043da8d                                          ecx_47 = *(arg6 + 0x1308)
0043da5d                                      int32_t eax_50
0043da5d                                      if ((*(arg6 + 0x64) == 1 || (*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) == 0)) || ((*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0) && ecx_47 s<= 0))
0043daa9                                          eax_50 = *(**(arg6 + 0xc) + 0x14)()
0043da5d                                      if ((*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0) && ecx_47 s> 0)
0043da9d                                          eax_50 = *(arg6 + 0x1300) + ecx_47
0043da5d                                      if ((((*(arg6 + 0x64) == 1 || (*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) == 0)) || ((*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0) && ecx_47 s<= 0)) || ((*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0) && ecx_47 s> 0)) && (eax_50 - *(esp_1 + 0x18)) != *(ebx_7 + *(*(esp_1 + 0x14) + 0x3c) + 0x2c))
0043dabc                                          *(arg6 + 0x9c) = *(arg6 + 0x9c) | 2
0043d820                          if (*(eax_25 + ebx_7 + 0x20) == *(edi_3 + 8) && *(eax_26 + 0x24) == *(edi_3 + 0xc))
0043db6b                              bool cond:9_1 = *(arg6 + 0x64) == 1
0043db6f                              int32_t edx_6
0043db6f                              edx_6.b = *(eax_26 + 0x28)
0043db72                              *(esp_1 + 0x13) = edx_6.b
0043db76                              int32_t eax_60
0043db76                              if (not(cond:9_1) && *(arg6 + 0xa0) != 0)
0043db81                                  eax_60 = *(arg6 + 0x1308)
0043db76                              int32_t ebx_9
0043db76                              if ((cond:9_1 || (not(cond:9_1) && *(arg6 + 0xa0) == 0)) || ((not(cond:9_1) && *(arg6 + 0xa0) != 0) && eax_60 s<= 0))
0043db9f                                  ebx_9 = *(**(arg6 + 0xc) + 0x14)()
0043db76                              if ((not(cond:9_1) && *(arg6 + 0xa0) != 0) && eax_60 s> 0)
0043db91                                  ebx_9 = *(arg6 + 0x1300) + eax_60
0043dba8                              if (*(esp_1 + 0x13) != 0 && *(esp_1 + 0x11) == 0)
0043dbb1                                  sub_44a6e0()
0043dbb9                              int32_t* eax_63 = *(edi_3 + 0x20)
0043dbbc                              int32_t ecx_60 = *(ebp_2 + 4) + *(esp_1 + 0x44c)
0043dbc3                              int32_t eax_64
0043dbc3                              int32_t eax_65
0043dbc3                              if (eax_63 != 0)
0043dbca                                  while (*eax_63 != 0x14)
0043dbcc                                      eax_63 = *(eax_63 + 8)
0043dbd1                                      if (eax_63 == 0)
0043dbd1                                          break
0043dbc3                                  if (*eax_63 == 0x14)
0043dbea                                      eax_65 = *(eax_63 + 4)
0043dbc3                                      if (eax_65 != 0)
0043dbf1                                          *(esp_1 - 4) = arg6
0043dbf2                                          *(esp_1 - 8) = ebp_2
0043dbf3                                          *(esp_1 - 0xc) = edi_3
0043dbf4                                          *(esp_1 - 0x10) = ecx_60
0043dbf5                                          eax_64, ecx_60 = eax_65()
0043dbf7                                          esp_1 = esp_1
0043dbc3                              if (((eax_63 == 0 || ((eax_63 != 0 && *eax_63 == 0x14) && eax_65 == 0)) || (eax_63 != 0 && *eax_63 != 0x14)) && true)
0043dbdc                                  *(esp_1 - 4) = arg6
0043dbdd                                  *(esp_1 - 8) = ebp_2
0043dbde                                  *(esp_1 - 0xc) = edi_3
0043dbdf                                  *(esp_1 - 0x10) = ecx_60
0043dbe0                                  eax_64, ecx_60 = sub_43d4f0()
0043dbe5                                  esp_1 = esp_1
0043dc03                              ecx_60.b = eax_64 != 0
0043dc06                              *(esp_1 + 0x12) = *(esp_1 + 0x12) & ecx_60.b
0043dc16                              if (*(esp_1 + 0x13) != 0 && *(esp_1 + 0x11) == 0)
0043dc16                                  goto label_43dcb3
0043dc1c                              if ((*data_8b9408 & 0x20000000) == 0)
0043dc28                                  *(esp_1 - 4) = 0x8937b4
0043dc37                                  *(esp_1 - 4) = 0x8b93f8
0043dc3c                                  *data_8b940c = 8
0043dc46                                  sub_40c960()
0043dc4b                                  esp_1 = esp_1
0043dc4e                              if (edi_3 != 0x8b93f8)
0043dc56                                  int32_t ecx_62
0043dc56                                  if (*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0)
0043dc65                                      ecx_62 = *(arg6 + 0x1308)
0043dc56                                  int32_t eax_67
0043dc56                                  if ((*(arg6 + 0x64) == 1 || (*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) == 0)) || ((*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0) && ecx_62 s<= 0))
0043dc81                                      eax_67 = *(**(arg6 + 0xc) + 0x14)()
0043dc56                                  if ((*(arg6 + 0x64) != 1 && *(arg6 + 0xa0) != 0) && ecx_62 s> 0)
0043dc75                                      eax_67 = *(arg6 + 0x1300) + ecx_62
0043dc90                                  if ((eax_67 - ebx_9) != *(*(esp_1 + 0x18) + *(*(esp_1 + 0x14) + 0x3c) + 0x2c))
0043dc96                                      *(arg6 + 0x9c) = *(arg6 + 0x9c) | 2
0043d820                      if (eax_24.b != 0 || ((eax_24.b == 0 && (*(eax_25 + ebx_7 + 0x20) != *(edi_3 + 8) || (*(eax_25 + ebx_7 + 0x20) == *(edi_3 + 8) && *(eax_26 + 0x24) != *(edi_3 + 0xc)))) && edi_6 == 0))
0043db07                          void* ebp_6 = *(esp_1 + 0x14)
0043db0e                          int32_t edi_7 = *(esp_1 + 0x18)
0043db12                          ebx_7.b = *(edi_7 + *(ebp_6 + 0x3c) + 0x28)
0043db1a                          if (ebx_7.b != 0 && *(esp_1 + 0x11) == 0)
0043db23                              sub_44a6e0()
0043db28                          int32_t ecx_53 = *arg6
0043db2a                          char eax_59
0043db2a                          if (ecx_53 s> 0)
0043db34                              int32_t* ecx_54 = *(arg6 + 8) + (ecx_53 << 3) + 0xfffffff8
0043db3b                              int32_t eax_57 = *(ebp_6 + 0x3c) + edi_7
0043db3d                              *(esp_1 - 4) = *(ecx_54 + 4)
0043db3e                              *(esp_1 - 8) = eax_57
0043db3f                              int32_t eax_58 = *ecx_54
0043db41                              *(esp_1 - 0xc) = arg6
0043db42                              eax_59 = eax_58()
0043db44                              esp_1 = esp_1
0043db2a                          if ((ecx_53 s<= 0 || (ecx_53 s> 0 && eax_59 == 0)) && ebx_7.b != 0)
0043dca1                              sub_44a6b0(arg6)
0043dcaa                          if (((((ecx_53 s<= 0 || (ecx_53 s> 0 && eax_59 == 0)) && ebx_7.b != 0) || (ecx_53 s> 0 && eax_59 != 0)) && ebx_7.b != 0) && *(esp_1 + 0x11) == 0)
0043dcb3                              label_43dcb3:
0043dcb3                              sub_44a5c0()
0043db2a                          if ((ecx_53 s<= 0 || (ecx_53 s> 0 && eax_59 == 0)) && ebx_7.b == 0)
0043db5e                              *(esp_1 - 4) = *(edi_7 + *(ebp_6 + 0x3c) + 0x2c)
0043db61                              sub_44a580(arg6)
0043db61                              esp_1 = esp_1
0043dcc3                      cond:10_1 = *(esp_1 + 0x1c) + 1 s< *(*(esp_1 + 0x14) + 0x34)
0043dcc6                      *(esp_1 + 0x1c) = *(esp_1 + 0x1c) + 1
0043dcc0                  while (cond:10_1)
0043d56d              if (var_435_1 != 0)
0043d69e                  void* edi_2 = *(arg4 + 0x1c)
0043d6a1                  if (edi_2 != 0)
0043d6a9                      esp_1 = &var_448
0043d6b5                      do
0043d6b5                          if ((*(edi_2 + 8) & 0x10000000) == 0)
0043d6bd                              int32_t eax_14 = *(edi_2 + 0x18)()
0043d6bf                              *(edi_2 + 8) = *(edi_2 + 8) | 0x10000000
0043d6c2                              *(edi_2 + 0x18) = eax_14
0043d6c5                          void* ebp_1 = *(edi_2 + 0x18)
0043d6c8                          char eax_15 = (*(ebp_1 + 0x10)).b
0043d6cb                          if ((eax_15 & 1) == 0)
0043d6d3                              char ecx_14 = (*(edi_2 + 8)).b
0043d6d6                              if ((ecx_14 & 1) == 0)
0043d6df                                  char ebx_2
0043d6df                                  if ((eax_15 & 2) != 0 || ((eax_15 & 2) == 0 && (ecx_14 & 2) != 0))
0043d733                                      ebx_2 = 0
0043d6df                                  if ((eax_15 & 2) == 0 && (ecx_14 & 2) == 0)
0043d6ed                                      ebx_2 = 1
0043d6e8                                      if (var_437_1 == 0)
0043d6f3                                          sub_44a6e0()
0043d6fb                                  int32_t* eax_16 = *(ebp_1 + 0x20)
0043d6fe                                  int32_t ecx_17 = *(edi_2 + 4) + arg3
0043d705                                  int32_t eax_17
0043d705                                  int32_t eax_18
0043d705                                  if (eax_16 != 0)
0043d709                                      esp_1 = &var_448
0043d713                                      while (*eax_16 != 0x14)               
0043d715                                          eax_16 = *(eax_16 + 8)
0043d71a                                          if (eax_16 == 0)
0043d71a                                              break
0043d705                                      if (*eax_16 == 0x14)
0043d737                                          eax_18 = *(eax_16 + 4)
0043d705                                          if (eax_18 != 0)
0043d742                                              eax_17 = eax_18(ecx_17, ebp_1, edi_2, arg6)           // <- end up reading file
0043d744                                              esp_1 = &var_448
0043d705                                  if (((eax_16 == 0 || ((eax_16 != 0 && *eax_16 == 0x14) && eax_18 == 0)) || (eax_16 != 0 && *eax_16 != 0x14)) && true)
0043d729                                      eax_17 = sub_43d4f0(ecx_17, ebp_1, edi_2, arg6)
0043d72e                                      esp_1 = &var_448
0043d750                                  eax_17.b = eax_17 != 0
0043d753                                  var_436_1 = var_436_1 & eax_17.b
0043d75b                                  if (ebx_2 != 0 && var_437_1 == 0)
0043d764                                      sub_44a5c0()
0043d769                          edi_2 = *(edi_2 + 0x10)
0043d769                      while (edi_2 != 0)
0043d56d              if ((var_435_1 == 0 && eax_20 != 0) || var_435_1 != 0)
0043dcd6                  eax.b = *(esp_1 + 0x12) != 0
0043d521  if ((*(arg4 + 0x10) & 1) != 0 || (((*(arg4 + 0x10) & 1) == 0 && arg5 != 0) && (*(arg5 + 8) & 1) != 0))
0043d527      eax = 2
0043dce0  *esp_1
0043dce1  *(esp_1 + 4)
0043dce2  *(esp_1 + 8)
0043dce3  *fsbase = *(esp_1 + 0x43c)
0043dcea  *(esp_1 + 0xc)
0043dcf1  return eax

---------------------------------------------------------------

int32_t sub_48c490(void* arg1)

0048c49d  int32_t* fsbase
0048c49d  int32_t var_c = *fsbase
0048c49e  *fsbase = &var_c
0048c4a9  void* ebx = arg1
0048c4b2  void* ebp = arg_4
0048c4b6  void* eax_1 = *(ebp + 4)
0048c4b9  void* var_30 = eax_1
0048c4ad  if (*(ebx + 0x64) != 0)
0048c4d6      arg_4 = eax_1
0048c4da      sub_44a280(&arg_4, 4)
0048c4c8  else
0048c4c8      sub_44a3a0(ebx, &var_30, 4)
0048c4e4  arg_4.b = 1
0048c4df  if (var_30 s> 0)
0048c4ef      if ((*data_8c1f08 & 0x20000000) == 0)
0048c505          sub_438160(0x8c1ef8, 0x89a7a4)
0048c50f          *data_8c1f0c = 0x20
0048c519          sub_48bbe0(data_8c1ef8)
0048c528      int32_t eax_2 = sub_434e10(data_8c1ef8, 0x14)
0048c52f      int32_t var_24_1 = eax_2
0048c52d      if (eax_2 == 0)
0048c535          var_24_1 = 0x43d4f0
0048c53d      if (*(ebx + 0x64) != 1)
0048c583          void* eax_6 = *(ebp + 8)
0048c58a          void* esi_2 = eax_6 + var_30
0048c58d          if (esi_2 != eax_6)
0048c59c              void* edi_1 = *(ebp + 0xc)
0048c59f              void* var_28_1 = nullptr
0048c59a              if (esi_2 s> 0)
0048c5b9                  var_28_1 = sub_42dc60(esi_2 << 5)
0048c5bd              void* eax_10 = *(ebp + 4)
0048c5c2              void* var_2c_1 = eax_10
0048c5c0              if (eax_10 s>= esi_2)
0048c5c8                  var_2c_1 = esi_2
0048c5cc              void* ecx_4 = eax_10
0048c5ce              int32_t eax_11 = 0
0048c5d8              int32_t var_20_1 = 0
0048c5d0              if (var_2c_1 s> 0)
0048c5e8                  do
0048c5e8                      int32_t* esi_4 = eax_11 << 5
0048c5eb                      void* ebx_2 = esi_4 + var_28_1
0048c5f2                      if (ebx_2 != 0)
0048c601                          *ebx_2 = *(esi_4 + edi_1)
0048c607                          void* eax_13 = esi_4 + edi_1 + 8
0048c60d                          *(ebx_2 + 4) = *(esi_4 + edi_1 + 4)
0048c60b                          void* eax_14
0048c60b                          if (eax_13 == 0)
0048c617                              eax_14 = nullptr
0048c612                          else
0048c612                              eax_14 = eax_13 + 4
0048c61d                          sub_51de30(ebx_2 + 0xc, eax_14)
0048c622                          *(ebx_2 + 8) = 0x7e8914
0048c62d                          *(ebx_2 + 0x18) = *(esi_4 + edi_1 + 0x18)
0048c634                          *(ebx_2 + 0x1c) = *(esi_4 + edi_1 + 0x1c)
0048c637                          eax_11 = var_20_1
0048c63b                      eax_11 = eax_11 + 1
0048c64a                      var_20_1 = eax_11
0048c64a                  while (eax_11 s< var_2c_1)
0048c650                  esi_2 = esi_2
0048c654                  ebx = arg1
0048c658                  ecx_4 = ecx_4
0048c65c              if (ecx_4 s> 0)
0048c660                  int32_t* ebx_3 = edi_1 + 8
0048c663                  void* var_20_2 = ecx_4
0048c669                  void* temp2_1
0048c669                  do
0048c669                      sub_54a490(ebx_3)
0048c66e                      ebx_3 = ebx_3 + 0x20
0048c671                      temp2_1 = var_20_2
0048c671                      var_20_2 = var_20_2 - 1
0048c671                  while (temp2_1 != 1)
0048c678                  ebx = arg1
0048c684              *(ebp + 4) = var_2c_1
0048c68d              *(ebp + 8) = esi_2
0048c690              *(ebp + 0xc) = var_28_1
0048c693              sub_42dca0(edi_1)
0048c69d          int32_t var_1c_2 = 0
0048c698          if (var_30 s> 0)
0048c6b0              bool cond:13_1
0048c6b0              do
0048c6b0                  int32_t ecx_10 = *(ebp + 8)
0048c6b3                  if (*(ebp + 4) == ecx_10)
0048c6bc                      int32_t eax_16 = ecx_10
0048c6be                      if (eax_16 s< 4)
0048c6c3                          eax_16 = 4
0048c6c8                      int32_t edi_2 = ecx_10 + eax_16
0048c6cb                      if (edi_2 != ecx_10)
0048c6d9                          void* ebx_4 = *(ebp + 0xc)
0048c6dc                          void* var_28_2 = nullptr
0048c6d7                          if (edi_2 s> 0)
0048c6f6                              var_28_2 = sub_42dc60(edi_2 << 5)
0048c6fa                          int32_t eax_20 = *(ebp + 4)
0048c6ff                          int32_t var_2c_2 = eax_20
0048c6fd                          if (eax_20 s>= edi_2)
0048c705                              var_2c_2 = edi_2
0048c709                          int32_t ecx_12 = eax_20
0048c70b                          int32_t eax_21 = 0
0048c715                          int32_t var_20_3 = 0
0048c70d                          if (var_2c_2 s> 0)
0048c726                              do
0048c726                                  int32_t* esi_6 = eax_21 << 5
0048c729                                  void* edi_3 = esi_6 + var_28_2
0048c730                                  if (edi_3 != 0)
0048c73f                                      *edi_3 = *(esi_6 + ebx_4)
0048c745                                      *(edi_3 + 4) = *(esi_6 + ebx_4 + 4)
0048c748                                      void* eax_23 = esi_6 + ebx_4 + 8
0048c74c                                      void* eax_24
0048c74c                                      if (eax_23 == 0)
0048c755                                          eax_24 = nullptr
0048c750                                      else
0048c750                                          eax_24 = eax_23 + 4
0048c75b                                      sub_51de30(edi_3 + 0xc, eax_24)
0048c760                                      eax_21 = var_20_3
0048c764                                      *(edi_3 + 8) = 0x7e8914
0048c76f                                      *(edi_3 + 0x18) = *(esi_6 + ebx_4 + 0x18)
0048c776                                      *(edi_3 + 0x1c) = *(esi_6 + ebx_4 + 0x1c)
0048c779                                  eax_21 = eax_21 + 1
0048c788                                  var_20_3 = eax_21
0048c788                              while (eax_21 s< var_2c_2)
0048c78e                              edi_2 = edi_2
0048c792                              ecx_12 = ecx_12
0048c796                          if (ecx_12 s> 0)
0048c79a                              int32_t* esi_7 = ebx_4 + 8
0048c79d                              int32_t var_20_4 = ecx_12
0048c7a3                              int32_t temp3_1
0048c7a3                              do
0048c7a3                                  sub_54a490(esi_7)
0048c7a8                                  esi_7 = esi_7 + 0x20
0048c7ab                                  temp3_1 = var_20_4
0048c7ab                                  var_20_4 = var_20_4 - 1
0048c7ab                              while (temp3_1 != 1)
0048c7ba                          *(ebp + 0xc) = var_28_2
0048c7c3                          *(ebp + 4) = var_2c_2
0048c7c6                          *(ebp + 8) = edi_2
0048c7c9                          sub_42dca0(ebx_4)
0048c7ce                          ebx = arg1
0048c7d5                  int32_t esi_9 = *(ebp + 4) << 5
0048c7d8                  int32_t* esi_10 = esi_9 + *(ebp + 0xc)
0048c7d8                  if (esi_9 != neg.d(*(ebp + 0xc)))
0048c7ef                      sub_4966b0(esi_10)
0048c7f7                      sub_486e90(esi_10 + 8)
0048c7fc                  *(ebp + 4) = *(ebp + 4) + 1
0048c811                  int32_t eax_26
0048c811                  bool edx_7
0048c811                  eax_26, edx_7 = var_24_1(esi_10, 0x8c1ef8, 0, ebx)
0048c821                  arg_4.b = arg_4.b & eax_26 != 0
0048c828                  cond:13_1 = var_1c_2 + 1 s< var_30
0048c82c                  var_1c_2 = var_1c_2 + 1
0048c825              while (cond:13_1)
0048c544      else
0048c544          int32_t esi_1 = 0
0048c546          if (*(ebp + 4) s> 0)
0048c54f              int32_t ebx_1 = 0
0048c56c              do
0048c56c                  int32_t eax_5
0048c56c                  eax_5.b = var_24_1(*(ebp + 0xc) + ebx_1, 0x8c1ef8, 0, arg1) != 0
0048c56f                  arg_4.b = arg_4.b & eax_5.b
0048c573                  esi_1 = esi_1 + 1
0048c576                  ebx_1 = ebx_1 + 0x20
0048c576              while (esi_1 s< *(ebp + 4))
0048c843  int32_t eax_29
0048c843  eax_29.b = arg_4.b != 0
0048c847  *fsbase = var_c
0048c851  return eax_29

-----------------------------------


uint32_t __stdcall sub_738460(int32_t* arg1 @ ecx, LPVOID arg2, DWORD arg3)

0073846b  if (*(arg1 + 0x40) == 0)
0073846b      return 0
00738475  DWORD ebx = arg3
0073846e  if (*data_8fa5f0 != 0)
00738483      *(*data_8c043c + 0x1080) = 0
0073848f      *(*data_8c043c + 0x1084) = 0
007384a0      int32_t* eax_1 = sub_445ff0(*data_8c043c, "Reading: ")
007384a7      if (*(eax_1 + 0x1088) != 0)
007384b3          sub_41caf0(eax_1, ebx)
007384bf      sub_445ff0(eax_1, data_7e403c)
007384dd  char eax_4
007384dd  do
007384dd      arg3 = 0
007384e9      if (ReadFile(hFile: *(arg1 + 0x40), lpBuffer: arg2, nNumberOfBytesToRead: ebx, lpNumberOfBytesRead: &arg3, lpOverlapped: nullptr) != 0)
007384e9          break
007384f2      eax_4 = *(*arg1 + 0x70)()
007384ed  while (eax_4 != 0)
007384f8  uint32_t eax_5 = arg3
007384fc  *(arg1 + 0x44) = *(arg1 + 0x44) + eax_5
00738503  return eax_5
