void* sub_43c970(int32_t, char* arg2, int32_t arg3, char arg4, int32_t, int32_t, int32_t)

    0043c970  char* var_4 = __gfids_table[0xbae7688].rvAddr+3
    0043c978  char* var_8 = sub_78f93a
    0043c97d  int32_t* fsbase
    0043c97d  int32_t var_c = *fsbase
    0043c983  *fsbase = &var_c
    0043c98a  sub_7627a0(0x13ec)
    0043c994  var_8 = nullptr
    0043c998  if ((*data_8bfec8 & 1) == 0)
    0043c9a2      *data_8bfec8 = *data_8bfec8 | 1
    0043c9b5      sub_447ed0(data_8bfeb8)
    0043c9bf      sub_7623b0(0x7dc320)
    0043c9df  void* eax_1 = sub_447cd0(data_8bfebc, &arg_13f0)
    0043c9f0  void* eax_2 = sub_4449c0(eax_1, &arg_13f8)
    0043c9f5  if (eax_2 == 0)
    0043c9fd      int32_t esi_1 = arg_13f8
    0043ca35      sub_446c00(eax_1, esi_1)
    0043ca44      void* eax_3 = sub_4449c0(eax_1, &arg_13f8)
    0043ca49      int32_t edi_1 = arg_13f0
    0043ca5c      *(eax_3 + 0x20) = edi_1
    0043ca5f      *(eax_3 + 0x24) = arg_13f4
    0043ca67      *(eax_3 + 0x28) = esi_1
    0043ca70      char var_2c_1
    0043ca70      var_2c_1.d = edi_1
    0043ca72      sub_4377d0(&arg_94, var_2c_1, arg_13f4, esi_1, 0)
    0043caac      arg_13e8.b = 2
    0043cab9      void* esi_2
    0043cab9      if (sub_4a52f0(*data_8bad1c, &arg_94) != 0)
    0043cbe4          esi_2 = &arg_94
    0043cac9      else
    0043cac9          var_2c_1.d = edi_1
    0043cade          arg_13e8.b = 3
    0043cae6          int32_t edx_1 = sub_40d8d0(&arg_70, sub_4377d0(&arg_38, var_2c_1, arg_13f4, esi_1, 1), nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043caf2          arg_13e8.b = 2
    0043caef          if (arg_50 u>= 0x10)
    0043cb09              sub_4a99b0(edx_1, edi_1, arg_3c)
    0043cb1c          sub_4a52f0(*data_8bad1c, &arg_70)
    0043cb21          esi_2 = &arg_70
    0043cb2f      sub_44ae70(&arg_d4)
    0043cb38      var_2c_1.d = esi_2
    0043cb40      arg_13e8.b = 4
    0043cb4d      if (sub_44b510(&arg_d4, var_2c_1, 0, 0) != 0)
    0043cbfa          sub_40d8d0(eax_3, esi_2, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043cc06          arg2 = nullptr
    0043cbff          if (arg_138 != 0)
    0043cc31              var_8 = var_4
    0043cc35              sub_44a280(&var_8, 4)
    0043cc1a          else
    0043cc1a              sub_44a3a0(&arg_d4, &var_4, 4)
    0043cc3a          void* edi_2
    0043cc3a          if (var_4 != 0xffffffff)
    0043cc8a              edi_2 = 0xf
    0043cca4              arg_13e8.b = 5
    0043ccb3              char* eax_15 = var_4
    0043ccba              if (eax_15 s>= sub_402730() - 2)
    0043ce4e                  char* eax_27 = sub_42dc60(eax_15 + 1)
    0043ce53                  if (arg_138 != 0)
    0043ce7f                      sub_44a280(eax_27, var_4)
    0043ce6b                  else
    0043ce6b                      sub_44a3a0(&arg_d4, eax_27, var_4)
    0043ce8a                  *(eax_27 + var_4) = 0
    0043ce84                  void* const* eax_31
    0043ce84                  if (eax_27 == 0)
    0043cecc                      arg_6c = 0xf
    0043ceda                      arg4 = 0
    0043cede                      eax_31 = &arg_54
    0043ceed                      var_8 = 8
    0043ce8f                  else
    0043ce8f                      char* eax_29 = eax_27
    0043ce91                      arg_18 = 0xf
    0043ce99                      arg_4 = 0
    0043ce9d                      void* edx_11 = eax_29 + 1
    0043cea0                      char ecx_24
    0043cea0                      do
    0043cea0                          ecx_24 = *eax_29
    0043cea2                          eax_29 = eax_29 + 1
    0043cea2                      while (ecx_24 != 0)
    0043ceb1                      sub_40d9b0(&__return_addr, eax_27, eax_29 - edx_11)
    0043ceb6                      eax_31 = &__return_addr
    0043ceba                      arg_13e8.b = 0xc
    0043cec2                      var_8 = 4
    0043cefd                  arg_50 = 0xf
    0043cf05                  arg_3c.b = 0
    0043cf09                  int32_t edx_12 = sub_40d8d0(&arg_38, eax_31, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043cf0e                  if ((var_8.b & 8) != 0)
    0043cf23                      var_8 = var_8 & 0xfffffff7
    0043cf28                      if (arg_6c u>= 0x10)
    0043cf3a                          edx_12 = sub_4a99b0(edx_12, 0xf, arg4.d)
    0043cf56                  arg_13e8.b = 0x10
    0043cf64                  if ((var_8.b & 4) != 0 && arg_18 u>= 0x10)
    0043cf76                      sub_4a99b0(edx_12, 0xf, arg_4.d)
    0043cf96                  arg_13e8.b = 0x11
    0043cf9e                  sub_40d8d0(&arg_b0, &arg_38, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043cfa7                  arg_13e8.b = 5
    0043cfaf                  sub_40dba0(&arg_38)
    0043cfba                  sub_42dca0(eax_27, 0xf, eax_27)
    0043ccc2              else
    0043ccc2                  char* eax_16 = sub_402750()
    0043ccd0                  sub_7611e0(eax_16, 0, var_4)
    0043ccd8                  if (arg_138 != 0)
    0043cd02                      sub_44a280(eax_16, var_4)
    0043ccee                  else
    0043ccee                      sub_44a3a0(&arg_d4, eax_16, var_4)
    0043cd0d                  *(eax_16 + var_4) = 0
    0043cd07                  void* const* eax_20
    0043cd07                  if (eax_16 == 0)
    0043cd4f                      arg_6c = 0xf
    0043cd5d                      arg4 = 0
    0043cd61                      eax_20 = &arg_54
    0043cd70                      var_8 = 2
    0043cd12                  else
    0043cd12                      char* eax_18 = eax_16
    0043cd14                      arg_18 = 0xf
    0043cd1c                      arg_4 = 0
    0043cd20                      void* edx_7 = eax_18 + 1
    0043cd23                      char ecx_15
    0043cd23                      do
    0043cd23                          ecx_15 = *eax_18
    0043cd25                          eax_18 = eax_18 + 1
    0043cd25                      while (ecx_15 != 0)
    0043cd34                      sub_40d9b0(&__return_addr, eax_16, eax_18 - edx_7)
    0043cd39                      eax_20 = &__return_addr
    0043cd3d                      arg_13e8.b = 6
    0043cd45                      var_8 = 1
    0043cd80                  arg_50 = 0xf
    0043cd88                  arg_3c.b = 0
    0043cd8c                  int32_t edx_8 = sub_40d8d0(&arg_38, eax_20, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043cd91                  if ((var_8.b & 2) != 0)
    0043cdaa                      var_8 = var_8 & 0xfffffffd
    0043cdaf                      if (arg_6c u>= 0x10)
    0043cdc1                          edx_8 = sub_4a99b0(edx_8, 0xf, arg4.d)
    0043cddd                  arg_13e8.b = 0xa
    0043cdeb                  if ((var_8.b & 1) != 0 && arg_18 u>= 0x10)
    0043cdfd                      sub_4a99b0(edx_8, 0xf, arg_4.d)
    0043ce1d                  arg_13e8.b = 0xb
    0043ce25                  sub_40d8d0(&arg_b0, &arg_38, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043ce2e                  arg_13e8.b = 5
    0043ce36                  sub_40dba0(&arg_38)
    0043ce3b                  sub_402780()
    0043cfc9              arg_13e8.b = 4
    0043cc41          else if (arg_138 != 0)
    0043cc77              var_8 = arg2
    0043cc7b              sub_44a280(&var_8, 4)
    0043cc80              edi_2 = 0xf
    0043cc58          else
    0043cc58              sub_44a3a0(&arg_d4, &arg2, 4)
    0043cc5d              edi_2 = 0xf
    0043cfeb          char* eax_37 = arg2
    0043cfef          if (eax_37 == 0)
    0043d00f              arg_13e8.b = 0x12
    0043d017              sub_44a810(&arg_d4, &__return_addr)
    0043d025              sub_4967a0(&arg_30, &__return_addr)
    0043d034              void* eax_39 = sub_434e60(arg_30, arg3)
    0043d03c              if (eax_39 == 0)
    0043d05a                  arg_13e8.b = 0x13
    0043d062                  sub_40d8d0(&__return_addr, sub_436c70(&arg_38, &__return_addr), nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043d06b                  arg_13e8.b = 0x12
    0043d073                  sub_40dba0(&arg_38)
    0043d084                  sub_4967a0(&arg_8c, &__return_addr)
    0043d095                  sub_4966e0(&arg_30, &arg_8c)
    0043d0a4                  eax_39 = sub_434e60(arg_30, arg3)
    0043d0af              *(eax_3 + 0x20) = *(eax_39 + 8)
    0043d0b5              *(eax_3 + 0x24) = *(eax_39 + 0xc)
    0043d0bf              arg_13e8.b = 4
    0043d0dd          else if (eax_37 == 1)
    0043d0e2              if (arg_138 != 0)
    0043d111                  arg_24 = *(eax_3 + 0x20)
    0043d115                  arg_28 = *(eax_3 + 0x24)
    0043d119                  sub_44a280(&arg_24, 8)
    0043d0f8              else
    0043d0f8                  sub_44a3a0(&arg_d4, eax_3 + 0x20, 8)
    0043d127          void* ecx_41 = &arg_d4
    0043d11e          if (arg_138 != 0)
    0043d143              var_8 = *(eax_3 + 0x28)
    0043d147              sub_44a280(&var_8, 4)
    0043d134          else
    0043d134              sub_44a3a0(ecx_41, eax_3 + 0x28, 4)
    0043d153          void* eax_46 = eax_3 + 0x2c
    0043d14c          if (arg_138 != 0)
    0043d16f              var_8 = *eax_46
    0043d17b              sub_44a280(&var_8, 4)
    0043d162          else
    0043d162              sub_44a3a0(&arg_d4, eax_46, 4)
    0043d191          var_c:3.b = *(eax_3 + 0x30) != 0 + 0x30
    0043d18a          var_9
    0043d18a          if (arg_138 != 0)
    0043d1b6              sub_44a280(&var_9, 1)
    0043d1a3          else
    0043d1a3              sub_44a3a0(&arg_d4, &var_9, 1)
    0043d1c5          *(eax_3 + 0x30) = var_c:3.b == 0x31
    0043d1c8          if (arg_138 != 0)
    0043d1f4              var_8 = arg_2c
    0043d1f8              sub_44a280(&var_8, 4)
    0043d1dd          else
    0043d1dd              sub_44a3a0(&arg_d4, &arg_2c, 4)
    0043d1fd          int32_t ebp_3 = 0
    0043d1ff          if (arg_2c s> 0)
    0043d20d              edi_2 = eax_3 + 0x34
    0043d212              do
    0043d212                  void* eax_49 = sub_4453b0(edi_2)
    0043d221                  sub_44a810(&arg_d4, eax_49)
    0043d226                  char* eax_50 = arg2
    0043d22a                  if (eax_50 == 0)
    0043d24e                      arg_13e8.b = 0x14
    0043d256                      sub_44a810(&arg_d4, &__return_addr)
    0043d264                      sub_4967a0(&arg_24, &__return_addr)
    0043d273                      void* eax_52 = sub_434e60(arg_24, arg_28)
    0043d27b                      if (eax_52 == 0)
    0043d29d                          arg_13e8.b = 0x15
    0043d2a5                          int32_t edx_17 = sub_40d8d0(&__return_addr, sub_436c70(&arg_38, &__return_addr), nullptr, __gfids_table[0xbae7688].rvAddr+3)
    0043d2b1                          arg_13e8.b = 0x14
    0043d2ae                          if (arg_50 u>= 0x10)
    0043d2c8                              sub_4a99b0(edx_17, edi_2, arg_3c)
    0043d2d9                          sub_4967a0(&arg_cc, &__return_addr)
    0043d2ea                          sub_4966e0(&arg_24, &arg_cc)
    0043d2f9                          int32_t edx_19
    0043d2f9                          eax_52, edx_19 = sub_434e60(arg_24, arg_28)
    0043d313                          *(eax_49 + 0x20) = 0
    0043d316                          *(eax_49 + 0x24) = 0
    0043d308                      *(eax_49 + 0x20) = *(eax_52 + 8)
    0043d30e                      *(eax_49 + 0x24) = *(eax_52 + 0xc)
    0043d320                      arg_13e8.b = 4
    0043d33e                  else if (eax_50 == 1)
    0043d34a                      void* eax_56 = eax_49 + 0x20
    0043d343                      if (arg_138 != 0)
    0043d362                          *(eax_56 + 4)
    0043d36c                          arg_8c = *eax_56
    0043d382                          sub_44a280(&arg_8c, 8)
    0043d359                      else
    0043d359                          sub_44a3a0(&arg_d4, eax_56, 8)
    0043d38e                  void* eax_57 = eax_49 + 0x2c
    0043d387                  if (arg_138 != 0)
    0043d3aa                      var_8 = *eax_57
    0043d3b6                      sub_44a280(&var_8, 4)
    0043d39d                  else
    0043d39d                      sub_44a3a0(&arg_d4, eax_57, 4)
    0043d3cc                  var_c:3.b = *(eax_49 + 0x28) != 0 + 0x30
    0043d3c5                  if (arg_138 != 0)
    0043d3f1                      sub_44a280(&var_9, 1)
    0043d3de                  else
    0043d3de                      sub_44a3a0(&arg_d4, &var_9, 1)
    0043d400                  *(eax_49 + 0x28) = var_c:3.b == 0x31
    0043d40a                  void* eax_60 = eax_49 + 0x30
    0043d403                  if (arg_138 != 0)
    0043d424                      arg_30 = *eax_60
    0043d430                      sub_44a280(&arg_30, 4)
    0043d417                  else
    0043d417                      sub_44a3a0(&arg_d4, eax_60, 4)
    0043d435                  ebp_3 = ebp_3 + 1
    0043d435              while (ebp_3 s< arg_2c)
    0043d449          arg_13e8.b = 2
    0043d451          int32_t edx_21 = sub_44b370(&arg_d4)
    0043d460          arg_13e8.b = 1
    0043d489          if (arg_ac u>= 0x10)
    0043d4c5              sub_4a99b0(edx_21, edi_2, arg_98)
    0043d4ca          eax_2 = eax_3
    0043cb5c      else
    0043cb5c          arg_13e8.b = 2
    0043cb64          int32_t edx_2 = sub_44b370(&arg_d4)
    0043cb73          arg_13e8.b = 1
    0043cb9c          if (arg_ac u>= 0x10)
    0043cbd8              sub_4a99b0(edx_2, edi_1, arg_98)
    0043cbdd          eax_2 = nullptr
    0043d4d8  *fsbase = arg_13e0
    0043d4e6  return eax_2

--------------------------------------------------------------------

int32_t* __fastcall sub_44c490(int32_t* arg1)

    0044c496  void* eax = *(arg1 + 4)
    0044c499  if (*arg1 == eax)
    0044c4a1      void* ecx = eax
    0044c4a3      if (ecx s< 4)
    0044c4a8          ecx = 4
    0044c4ae      void* esi_1 = eax + ecx
    0044c4b1      if (esi_1 != eax)
    0044c4bd          void* eax_1 = *(arg1 + 8)
    0044c4c1          void* ebx_1 = nullptr
    0044c4ca          void* var_14_1 = nullptr
    0044c4c3          if (esi_1 s> 0)
    0044c4db              void* eax_2
    0044c4db              eax_2, ecx = sub_42dc60(esi_1 << 4)
    0044c4e0              var_14_1 = eax_2
    0044c4e4              ebx_1 = eax_2
    0044c4e6          void* ebp_1 = *arg1
    0044c4ea          void* var_8_1 = ebp_1
    0044c4ee          void* var_10_1 = ebp_1
    0044c4e8          if (ebp_1 s>= esi_1)
    0044c4f4              var_10_1 = esi_1
    0044c4f8          void* edx_1 = var_10_1
    0044c4fc          if (edx_1 s> 0)
    0044c504              void* eax_3 = ebx_1
    0044c506              ecx = eax_1 - ebx_1
    0044c508              void* temp2_1
    0044c508              do
    0044c508                  if (eax_3 != 0)
    0044c50f                      *eax_3 = *(ecx + eax_3)
    0044c515                      *(eax_3 + 4) = *(ecx + eax_3 + 4)
    0044c51c                      *(eax_3 + 8) = *(ecx + eax_3 + 8)
    0044c523                      *(eax_3 + 0xc) = *(ecx + eax_3 + 0xc)
    0044c526                      ebp_1 = var_8_1
    0044c52a                  eax_3 = eax_3 + 0x10
    0044c52d                  temp2_1 = edx_1
    0044c52d                  edx_1 = edx_1 - 1
    0044c52d              while (temp2_1 != 1)
    0044c532          if (ebp_1 s> 0)
    0044c53a              int32_t* ebx_3 = eax_1 + 0xc
    0044c540              void* temp3_1
    0044c540              do
    0044c540                  void* esi_2 = *ebx_3
    0044c542                  if (esi_2 != 0)
    0044c548                      sub_444d40(esi_2, esi_2)
    0044c553                      sub_42dca0(esi_2, arg1, esi_2)
    0044c558                      *ebx_3 = 0
    0044c55e                  ebx_3 = ebx_3 + 0x10
    0044c561                  temp3_1 = ebp_1
    0044c561                  ebp_1 = ebp_1 - 1
    0044c561              while (temp3_1 != 1)
    0044c566              ebx_1 = var_14_1
    0044c56a              esi_1 = esi_1
    0044c57c          *arg1 = var_10_1
    0044c57e          *(arg1 + 4) = esi_1
    0044c581          *(arg1 + 8) = ebx_1
    0044c584          sub_42dca0(esi_1, arg1, eax_1)
    0044c58e  int32_t eax_6 = *arg1 << 4
    0044c591  int32_t* eax_7 = eax_6 + *(arg1 + 8)
    0044c591  if (eax_6 != neg.d(*(arg1 + 8)))
    0044c598      *eax_7 = 0
    0044c59a      *(eax_7 + 4) = 0
    0044c59d      *(eax_7 + 8) = 0
    0044c5a0      *(eax_7 + 0xc) = 0
    0044c5a3  *arg1 = *arg1 + 1
    0044c5aa  return eax_7

------------------------------------------------------------------------------

int32_t* sub_429d40(int32_t* arg1)

    00429d45  *(arg1 + 0x28) = 0x8955e4
    00429d4c  *arg1 = 0x7e4cf0  {"note"}
    00429d52  *data_8be5b0 = 0x427da0
    00429d5c  *data_8be598 = 0x7e4cd4  {"Baseclass_UID::Generator"}
    00429d66  *data_8be59c = 0
    00429d70  *data_8be5a0 = 0x10
    00429d7a  *data_8be5a4 = arg1
    00429d80  *(arg1 + 0x1c) = 0x8be598
    00429d8e  *data_8be588 = 0x427e10
    00429d98  *data_8be570 = 0x7e4cbc  {"Baseclass_UID::Owner"}
    00429da2  *data_8be574 = 8
    00429dac  *data_8be578 = 0x10
    00429db6  *data_8be57c = arg1
    00429dbc  *data_8be5a8 = 0x8be570
    00429dc6  *data_8be58c = 0x14
    00429dd0  *data_8be590 = 0x4ccdf0
    00429dda  sub_434ec0(arg1, data_8be58c)
    00429de6  *data_8be564 = 4
    00429df0  *data_8be568 = 0x4cc4b0
    00429dfa  sub_434ec0(arg1, data_8be564)
    00429e06  *data_8be558 = 0x20
    00429e10  *data_8be55c = 0x4cc4c0
    00429e1a  sub_434ec0(arg1, data_8be558)
    00429e1f  *data_8be544 = *data_8be544 | 1
    00429e26  *data_8be548 = arg1
    00429e2c  *data_8be52c = arg1
    00429e34  *data_8be554 = 0x429800
    00429e3e  *data_8be53c = 0x7e4cb0  {"mEntries"}
    00429e48  *data_8be540 = 0x10
    00429e52  *data_8be580 = 0x8be53c
    00429e5c  *data_8be538 = 0x6c2d80
    00429e66  *data_8be520 = 0x7e3ce0  {"mName"}
    00429e70  *data_8be524 = 0x20
    00429e7a  *data_8be54c = 0x8be520
    00429e85  return arg1

---------------------------------------------------------------------------------------------------------

int32_t* __fastcall sub_44bff0(int32_t* arg1)

    0044bff6  int32_t eax = *(arg1 + 4)
    0044bff9  if (*arg1 == eax)
    0044c001      int32_t ecx = eax
    0044c003      if (ecx s< 4)
    0044c008          ecx = 4
    0044c00e      int32_t edi_1 = eax + ecx
    0044c011      if (edi_1 != eax)
    0044c016          int32_t ebx_1 = *(arg1 + 8)
    0044c019          void* eax_1 = nullptr
    0044c01b          if (edi_1 s> 0)
    0044c031              eax_1 = sub_42dc60(edi_1 << 2)
    0044c036          int32_t ebp_1 = *arg1
    0044c038          int32_t var_8_1
    0044c038          if (ebp_1 s>= edi_1)
    0044c042              ebp_1 = edi_1
    0044c044              var_8_1 = edi_1
    0044c03c          else
    0044c03c              var_8_1 = ebp_1
    0044c048          if (ebp_1 s> 0)
    0044c04c              void* ecx_2 = eax_1
    0044c04e              void* ebx_2 = ebx_1 - eax_1
    0044c050              int32_t edx_1 = ebp_1
    0044c052              int32_t temp0_1
    0044c052              do
    0044c052                  if (ecx_2 != 0)
    0044c059                      *ecx_2 = *(ebx_2 + ecx_2)
    0044c05b                      ebp_1 = var_8_1
    0044c05f                  ecx_2 = ecx_2 + 4
    0044c062                  temp0_1 = edx_1
    0044c062                  edx_1 = edx_1 - 1
    0044c062              while (temp0_1 != 1)
    0044c067              ebx_1 = ebx_1
    0044c071          *arg1 = ebp_1
    0044c073          *(arg1 + 4) = edi_1
    0044c076          *(arg1 + 8) = eax_1
    0044c079          sub_42dca0(arg1, edi_1, ebx_1)
    0044c086  int32_t* eax_3 = *(arg1 + 8) + (*arg1 << 2)
    0044c089  if (eax_3 != 0)
    0044c08d      *eax_3 = 0
    0044c093  *arg1 = *arg1 + 1
    0044c09a  return eax_3

---------------------------------------------------------------------

int32_t sub_4c4020(LPCRITICAL_SECTION arg1, int32_t arg2, void* arg3, int32_t arg4, char arg5, int32_t arg6, char arg7, int32_t arg8, int32_t arg9, char arg10, int32_t arg11, int32_t arg12, void* arg13)

    004c4020  char* var_4 = __gfids_table[0xbae7688].rvAddr+3
    004c402d  int32_t* fsbase
    004c402d  void* var_c = *fsbase
    004c4033  *fsbase = &var_c
    004c403a  int32_t* ecx = sub_7627a0(0x1548)
    004c4045  LPCRITICAL_SECTION ebx = ecx + 0xe4
    004c404d  __return_addr = nullptr
    004c4051  LPCRITICAL_SECTION var_20 = ebx
    004c4056  EnterCriticalSection(lpCriticalSection: var_20)
    004c4066  var_20 = __gfids_table[0xbae7688].rvAddr+3
    004c4071  sub_40d8d0(*(ecx + 0x44), arg13, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004c4085  var_20 = *(*(ecx + 0xb0) + 4)
    004c4088  sub_4c99c0(var_20)
    004c408d  void* eax_2 = *(ecx + 0xb0)
    004c4090  *(eax_2 + 4) = eax_2
    004c4093  int32_t* eax_3 = *(ecx + 0xb0)
    004c4096  *(ecx + 0xb4) = 0
    004c4099  *eax_3 = eax_3
    004c409b  void* edi_1 = *(ecx + 0xb0)
    004c409e  *(edi_1 + 8) = edi_1
    004c40a8  while (true)
    004c40a8      var_20 = &arg_34
    004c40a9      void* eax_4 = sub_4aaf20(*(ecx + 0x44), var_20)
    004c40b8      int32_t ebp_1 = *data_8bad1c
    004c40c0      arg_1544.b = 1
    004c40ca      var_20 = *(*ecx + 0x98)()
    004c40d0      void* eax_7
    004c40d0      int32_t edx_2
    004c40d0      eax_7, edx_2 = sub_4a5c10(ebp_1, eax_4, 2)
    004c40d5      *(ecx + 0xcc) = eax_7
    004c40e2      arg_1544.b = 0
    004c40df      if (arg4 u>= 0x10)
    004c40f3          var_20 = arg4 + 1
    004c40f9          sub_4a99b0(edx_2, eax_4, arg3)
    004c4195      void var_3c
    004c4195      if (*(ecx + 0xcc) != 0)
    004c4195          arg_10 = nullptr
    004c419e          var_20 = 4
    004c419b          *(**(ecx + 0xcc) + 0x20)(&arg_c, 4)
    004c41a7          void* eax_16 = arg_c
    004c41b0          if (eax_16 s< 1)
    004c44d0              arg_10 = eax_16
    004c41be          else
    004c41be              var_c = 1
    004c41c7              var_20 = 4
    004c41c4              *(**(ecx + 0xcc) + 0x20)(&var_c, 4)
    004c41d7              bool cond:0_1 = arg_c s< 2
    004c41dc              *(ecx + 0x41) = var_c != 0
    004c41df              if (not(cond:0_1))
    004c41ec                  var_20 = 4
    004c41e9                  *(**(ecx + 0xcc) + 0x20)(&arg_8, 4)
    004c41f9                  *(ecx + 0x68) = arg_8
    004c41fc              if (arg_c s>= 3)
    004c4212                  var_20 = 4
    004c420f                  *(**(ecx + 0xcc) + 0x20)(&arg_4, 4)
    004c421f                  *(ecx + 0x6c) = arg_4
    004c4228                  var_4 = nullptr
    004c4231                  var_20 = 4
    004c422e                  *(**(ecx + 0xcc) + 0x20)(&var_4, 4)
    004c423a                  char* eax_20 = var_4
    004c423e                  if (eax_20 s> 0)
    004c4246                      void* ecx_19 = *(ecx + 0x84)
    004c424c                      void* edi_3 = ecx_19 + eax_20
    004c424f                      if (edi_3 != ecx_19)
    004c4253                          char* ebp_2 = *(ecx + 0x88)
    004c4260                          var_20 = edi_3 << 2
    004c4266                          void* eax_22 = sub_42dc60(var_20)
    004c426d                          void* eax_23 = *(ecx + 0x80)
    004c4275                          var_c = eax_23
    004c4273                          if (eax_23 s>= edi_3)
    004c427b                              var_c = edi_3
    004c428a                          var_20 = var_c << 2
    004c428f                          sub_560c40(eax_22, ebp_2, var_20)
    004c4298                          var_20 = ebp_2
    004c429e                          *(ecx + 0x80) = var_c
    004c42a4                          *(ecx + 0x84) = edi_3
    004c42aa                          *(ecx + 0x88) = eax_22
    004c42b0                          sub_42dca0(ecx, edi_3, var_20)
    004c42b5                          eax_20 = var_4
    004c42c0                      arg_8 = nullptr
    004c42be                      if (eax_20 s> 0)
    004c42d6                          void* eax_33
    004c42d6                          do
    004c42d6                              arg_14 = 0
    004c42df                              var_20 = 4
    004c42dc                              *(**(ecx + 0xcc) + 0x20)(&arg_14, 4)
    004c42e8                              void* eax_27 = *(ecx + 0x84)
    004c42ee                              if (*(ecx + 0x80) == eax_27)
    004c42f8                                  void* ecx_25 = 8
    004c42f6                                  if (eax_27 != 0)
    004c42ff                                      ecx_25 = eax_27
    004c4301                                  void* edi_4 = eax_27 + ecx_25
    004c4304                                  if (edi_4 != eax_27)
    004c4308                                      char* ebp_3 = *(ecx + 0x88)
    004c4315                                      var_20 = edi_4 << 2
    004c431b                                      void* eax_29 = sub_42dc60(var_20)
    004c4322                                      void* eax_30 = *(ecx + 0x80)
    004c432a                                      var_c = eax_30
    004c4328                                      if (eax_30 s>= edi_4)
    004c4330                                          var_c = edi_4
    004c433f                                      var_20 = var_c << 2
    004c4344                                      sub_560c40(eax_29, ebp_3, var_20)
    004c434d                                      var_20 = ebp_3
    004c4353                                      *(ecx + 0x80) = var_c
    004c4359                                      *(ecx + 0x84) = edi_4
    004c435f                                      *(ecx + 0x88) = eax_29
    004c4365                                      sub_42dca0(ecx, edi_4, var_20)
    004c4382                              *(*(ecx + 0x88) + (*(ecx + 0x80) << 2)) = arg_14
    004c4384                              eax_33 = arg_8
    004c4388                              *(ecx + 0x80) = *(ecx + 0x80) + 1
    004c4394                              arg_8 = eax_33 + 1
    004c438e                          while (eax_33 + 1 s< var_4)
    004c43a9                  var_20 = 4
    004c43a6                  *(**(ecx + 0xcc) + 0x20)(ecx + 0x64, 4)
    004c43b1              if (arg_c s>= 4)
    004c43c3                  var_20 = 4
    004c43c0                  *(**(ecx + 0xcc) + 0x20)(ecx + 0x70, 4)
    004c43d6                  var_20 = 4
    004c43d3                  *(**(ecx + 0xcc) + 0x20)(ecx + 0x74, 4)
    004c43de              if (arg_c s>= 5)
    004c43eb                  arg_8 = 1
    004c43f4                  var_20 = 4
    004c43f1                  *(**(ecx + 0xcc) + 0x20)(&arg_8, 4)
    004c4401                  arg_14 = 1
    004c4408                  *(ecx + 0x79) = arg_8 != 0
    004c4416                  var_20 = 4
    004c4413                  *(**(ecx + 0xcc) + 0x20)(&arg_14, 4)
    004c4426                  *(ecx + 0x78) = arg_14 != 0
    004c4429              if (arg_c s>= 7)
    004c443b                  var_20 = 4
    004c4438                  *(**(ecx + 0xcc) + 0x20)(ecx + 0x7c, 4)
    004c4443              if (arg_c s>= 8)
    004c4450                  int32_t var_8
    004c4450                  var_8:3.b = 0
    004c445a                  var_20 = 1
    004c4460                  var_5
    004c4457                  *(**(ecx + 0xcc) + 0x20)(&var_5, 1)
    004c44c5              var_20 = 4
    004c44c2              *(**(ecx + 0xcc) + 0x20)(&arg_10, 4)
    004c44d9          void* ecx_46 = arg_10
    004c44dd          int32_t* eax_48
    004c44dd          if (ecx_46 s>= sub_402730())
    004c44e8              var_20 = ecx_46
    004c44ee              eax_48 = sub_42dc60(var_20)
    004c44e1          else
    004c44e1              eax_48 = sub_402750()
    004c44f3          if (arg_c s< 6 || (arg_c s>= 6 && *(ecx + 0x6c) != 2))
    004c4572              var_20 = arg_10
    004c456f              *(**(ecx + 0xcc) + 0x20)(eax_48, var_20)
    004c44f3          if (arg_c s>= 6 && *(ecx + 0x6c) == 2)
    004c450d              var_20 = 4
    004c450a              *(**(ecx + 0xcc) + 0x20)(&var_c, 4)
    004c451a              var_20 = var_c
    004c4520              void* eax_51 = sub_42dc60(var_20)
    004c4536              var_20 = var_c
    004c452d              *(**(ecx + 0xcc) + 0x20)(eax_51, var_20)
    004c4542              var_20 = var_c
    004c454a              arg_4 = arg_10
    004c454e              sub_4c0aa0(eax_48, &arg_4, eax_51, var_20)
    004c4556              var_20 = eax_51
    004c455c              sub_42dca0(ecx, eax_48, var_20)
    004c4576          if (*(ecx + 0x41) != 0)
    004c458f              arg_1544.b = 4
    004c4597              sub_5947c0(&arg_4ec)
    004c459c              void* eax_56 = arg_10
    004c45a2              void* ecx_58 = eax_56 & 0x80000007
    004c45a2              if (ecx_58 s< 0)
    004c45ae                  ecx_58 = ((ecx_58 - 1) | 0xfffffff8) + 1
    004c45b1              var_20 = eax_56 - ecx_58
    004c45ba              sub_593a60(&arg_4ec, eax_48, var_20)
    004c45c6              arg_1544.b = 0
    004c45dd          var_20 = &arg_a8
    004c45de          sub_4ab1c0(*(ecx + 0x44), var_20)
    004c45ea          arg_1544.b = 5
    004c45f2          sub_4a9b60(&arg_a8)
    004c45f7          void* eax_58 = *eax_48
    004c45fd          var_c = eax_58
    004c4601          void* ebp_5 = eax_48 + 4
    004c45fb          if (eax_58 s> 0)
    004c460a              do
    004c460a                  LPCRITICAL_SECTION edi_6 = *ebp_5
    004c460d                  var_c = var_c - 1
    004c4615                  void* ebp_6 = ebp_5 + 4
    004c461d                  arg_8 = edi_6 + 1
    004c4618                  char* eax_60
    004c4618                  if (edi_6 + 1 s>= 0x400)
    004c4630                      var_20 = arg_8
    004c4636                      eax_60 = sub_42dc60(var_20)
    004c4623                  else
    004c4623                      eax_60 = &arg_ec
    004c463b                  var_20 = edi_6
    004c4640                  var_4 = eax_60
    004c4644                  sub_765eb0(eax_60, ebp_6, var_20)
    004c4649                  char* eax_61 = var_4
    004c4650                  ebp_5 = ebp_6 + edi_6
    004c4654                  *(eax_61 + edi_6) = 0
    004c4652                  void** eax_64
    004c4652                  if (eax_61 == 0)
    004c469d                      arg6 = 0xf
    004c46af                      arg5 = 0
    004c46b7                      __return_addr = __return_addr | 2
    004c46bc                      eax_64 = &arg_8c
    004c465f                  else
    004c465f                      arg2 = 0xf
    004c4663                      arg1 = nullptr
    004c4667                      arg_1c.b = 0
    004c466c                      void* edx_33 = eax_61 + 1
    004c4670                      char ecx_66
    004c4670                      do
    004c4670                          ecx_66 = *eax_61
    004c4672                          eax_61 = eax_61 + 1
    004c4672                      while (ecx_66 != 0)
    004c467b                      var_20 = eax_61 - edx_33
    004c4685                      sub_40d9b0(&arg_18, var_4, var_20)
    004c468a                      __return_addr = __return_addr | 1
    004c468f                      eax_64 = &arg_18
    004c4693                      arg_1544.b = 6
    004c46d3                  var_20 = __gfids_table[0xbae7688].rvAddr+3
    004c46f4                  int32_t edx_34 = sub_40d8d0(&arg_70, eax_64, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004c46f9                  if ((__return_addr.b & 2) != 0)
    004c4712                      __return_addr = __return_addr & 0xfffffffd
    004c4717                      if (arg6 u>= 0x10)
    004c4726                          var_20 = arg6 + 1
    004c472f                          sub_4a99b0(edx_34, 0xf, arg5.d)
    004c4734                      arg6 = 0xf
    004c4742                      arg5 = 0
    004c474f                  arg_1544.b = 0xa
    004c474a                  if ((__return_addr.b & 1) != 0)
    004c475d                      __return_addr = __return_addr & 0xfffffffe
    004c4762                      if (arg2 u>= 0x10)
    004c4767                          void* edx_35 = arg_1c
    004c476e                          var_20 = arg2 + 1
    004c4774                          sub_4a99b0(edx_35, 0xf, edx_35)
    004c4779                      arg2 = 0xf
    004c477d                      arg1 = nullptr
    004c4781                      arg_1c.b = 0
    004c478c                  var_20 = 2
    004c4793                  arg_1544.b = 0xb
    004c47a7                  var_20 = &arg_70
    004c47b1                  arg_1544.b = 0xc
    004c47c1                  var_20 = __gfids_table[0xbae7688].rvAddr+3
    004c47c9                  arg_1544.b = 0xd
    004c47e7                  int32_t edx_36 = sub_40d8d0(&arg_54, sub_40eaa0(&arg_d0, sub_4a6070(*data_8bad1c, &arg_34, 2), var_20), nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004c47f6                  arg_1544.b = 0xf
    004c47f3                  if (arg11 u>= 0x10)
    004c4803                      var_20 = arg11 + 1
    004c4813                      edx_36 = sub_4a99b0(edx_36, 0xf, arg10.d)
    004c4818                  arg11 = 0xf
    004c4826                  arg10 = 0
    004c4835                  arg_1544.b = 0x10
    004c4832                  if (arg4 u>= 0x10)
    004c4846                      var_20 = arg4 + 1
    004c484c                      sub_4a99b0(edx_36, 0xf, arg3)
    004c4851                  arg4 = 0xf
    004c4859                  arg3.b = 0
    004c4868                  arg_1544.b = 0x11
    004c48a4                  sub_4a9b60(&arg_54)
    004c48ad                  var_20 = &arg_54
    004c48bc                  sub_4125f0(ecx + 0xa0, &arg_c4, var_20)
    004c48c1                  if (arg_8 s> 0x400)
    004c48cf                      var_20 = var_4
    004c48d5                      sub_42dca0(ecx, 0xf, var_20)
    004c48e4                  arg_1544.b = 5
    004c48e4              while (var_c s> 0)
    004c491d          char* ebx_3 = *ebp_5
    004c4920          void* ebp_7 = ebp_5 + 4
    004c4923          LPCRITICAL_SECTION eax_76 = nullptr
    004c4927          var_c = ebx_3
    004c492b          void* edi_7 = ebp_7
    004c4925          if (ebx_3 s> 0)
    004c492f              char* edx_39 = ebx_3
    004c4931              char* temp1_1
    004c4931              do
    004c4931                  temp1_1 = edx_39
    004c4931                  edx_39 = edx_39 - 1
    004c4934                  int32_t ecx_76 = *ebp_7
    004c4937                  eax_76 = eax_76 + ecx_76 + 1
    004c493b                  ebp_7 = ecx_76 + ebp_7 + 0x10
    004c493b              while (temp1_1 != 1)
    004c4941          var_20 = eax_76
    004c4947          void* eax_77 = sub_42dc60(var_20)
    004c494e          *(ecx + 0x4c) = eax_77
    004c4951          void* ebp_8 = eax_77
    004c494c          if (ebx_3 s> 0)
    004c4955              do
    004c4955                  ebx_3 = *edi_7
    004c4957                  var_c = var_c - 1
    004c495c                  var_20 = ebx_3
    004c4962                  arg_4 = ebp_8
    004c4966                  sub_765eb0(ebp_8, edi_7 + 4, var_20)
    004c496b                  void* edx_40 = arg_4
    004c496f                  *(ebx_3 + ebp_8) = 0
    004c497b                  *(edi_7 + 4 + ebx_3 + 8)
    004c498c                  arg_18 = edx_40
    004c4990                  var_20 = &arg_18
    004c4991                  arg_1c = *(edi_7 + 4 + ebx_3 + 4)
    004c49aa                  ebp_8 = ebx_3 + ebp_8 + 1
    004c49ae                  edi_7 = edi_7 + 4 + ebx_3 + 0xc
    004c49b5                  sub_4cb090(ecx + 0xac, &arg_c4, var_20)
    004c49b5              while (var_c s> 0)
    004c49ce          *(ecx + 0x60) = *(**(ecx + 0xcc) + 0x14)()
    004c49d6          if (arg_10 s>= sub_402730())
    004c49e3              var_20 = edi_7
    004c49e9              sub_42dca0(ecx, edi_7, var_20)
    004c49dc          else
    004c49dc              sub_402780()
    004c49f1          var_20 = data_7e403c
    004c49fb          arg_4 = &var_3c
    004c4a13          sub_40d8d0(&var_3c, *(ecx + 0x44), nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004c4a1d          *(*data_8c043c + 0x1080) = 1
    004c4a2d          *(*data_8c043c + 0x1084) = 0
    004c4a3e          arg_1544.b = 0x12
    004c4a4d          arg_1544.b = 5
    004c4a5c          sub_445ff0(sub_414b00(sub_445ff0(*data_8c043c, "Looking for globals for "), var_3c, 0), data_7e403c)
    004c4a61          int32_t edi_11 = *data_8e6b1c
    004c4a67          if (edi_11 != 0)
    004c4a6f              do
    004c4a6f                  if (*(edi_11 + 0x42) != 0)
    004c4a80                      var_20 = &arg_18
    004c4a81                      sub_4aaf20(*(edi_11 + 0x44), var_20)
    004c4a86                      var_20 = 6
    004c4a8d                      arg_1544.b = 0x13
    004c4a95                      sub_44c0a0(&arg_18, nullptr, 6)
    004c4a9a                      var_20 = data_7e8b2c  {"...\n"}
    004c4aa4                      arg_4 = &var_3c
    004c4abe                      sub_40d8d0(&var_3c, &arg_18, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004c4ac9                      *(*data_8c043c + 0x1080) = 0
    004c4ad5                      *(*data_8c043c + 0x1084) = 0
    004c4ae6                      arg_1544.b = 0x14
    004c4af5                      arg_1544.b = 0x13
    004c4b04                      sub_445ff0(sub_414b00(sub_445ff0(*data_8c043c, "Checking global archive with suf…")), "...\n")
    004c4b10                      var_20 = &arg_34
    004c4b11                      void* eax_89 = sub_4aaf20(*(ecx + 0x44), var_20)
    004c4b1b                      void* ecx_95 = arg_1c
    004c4b16                      if (arg2 u< 0x10)
    004c4b21                          ecx_95 = &arg_1c
    004c4b29                      var_20 = arg1
    004c4b2e                      void* eax_90
    004c4b2e                      int32_t edx_44
    004c4b2e                      eax_90, edx_44 = sub_43eee0(eax_89, ecx_95, nullptr, var_20)
    004c4b3a                      ebx_3.b = eax_90 != 0xffffffff
    004c4b3d                      if (arg4 u>= 0x10)
    004c4b45                          var_20 = arg4 + 1
    004c4b4f                          edx_44 = sub_4a99b0(edx_44, edi_11, arg3)
    004c4b8e                      if (ebx_3.b != 0)
    004c4b8e                          *(*data_8c043c + 0x1080) = 0
    004c4b99                          *(*data_8c043c + 0x1084) = 0
    004c4ba5                          var_20 = data_7ea960  {"Match! Setting as parent...\n"}
    004c4baa                          int32_t edx_46 = sub_445ff0(*data_8c043c, "Match! Setting as parent...\n")
    004c4bb6                          *(ecx + 0x48) = edi_11
    004c4bb9                          arg_1544.b = 5
    004c4bb3                          if (arg2 u>= 0x10)
    004c4bca                              var_20 = arg2 + 1
    004c4bd0                              sub_4a99b0(edx_46, edi_11, arg_1c)
    004c4bb3                          break
    004c4b5f                      arg_1544.b = 5
    004c4b5c                      if (arg2 u>= 0x10)
    004c4b70                          var_20 = arg2 + 1
    004c4b76                          sub_4a99b0(edx_44, edi_11, arg_1c)
    004c4b7b                  edi_11 = *(edi_11 + 0x3c)
    004c4b7b              while (edi_11 != 0)
    004c4bdf          arg_1544.b = 0
    004c4bdc          if (arg8 u>= 0x10)
    004c4be9              void* edx_47 = arg7.d
    004c4bf3              var_20 = arg8 + 1
    004c4bfc              sub_4a99b0(edx_47, edi_11, edx_47)
    004c4c1f          var_20 = ebx
    004c4c1f          break
    004c4116      char eax_11 = *(*ecx + 0x9c)()
    004c411f      if (eax_11 == 0)
    004c411f          var_20 = data_7e4164
    004c4129          arg_4 = &var_3c
    004c413e          sub_40d8d0(&var_3c, *(ecx + 0x44), nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004c4149          *(*data_8c043c + 0x1080) = 0
    004c4155          *(*data_8c043c + 0x1084) = 0
    004c4166          arg_1544.b = 2
    004c4175          arg_1544.b = 0
    004c4184          sub_445ff0(sub_414b00(sub_445ff0(*data_8c043c, "Failed to open archive: ""), var_3c, eax_11), data_7e4164)
    004c4189          var_20 = ebx
    004c418a          break
    004c4c20  int32_t eax_102 = LeaveCriticalSection(lpCriticalSection: var_20)
    004c4c30  *fsbase = arg12
    004c4c3e  return eax_102

------------------------------------------------------------------------------


void __fastcall sub_42f140(void* arg1)

    0042f14d  int32_t* fsbase
    0042f14d  int32_t var_c = *fsbase
    0042f14e  *fsbase = &var_c
    0042f15c  void* eax = *(arg1 + 0x18)
    0042f161  float var_14
    0042f161  if (eax != 0)
    0042f16c      var_14 = fconvert.s(fconvert.t(*(eax + 0x1c)))
    0042f170      long double x87_r7_2 = float.t(0)
    0042f172      long double temp1_1 = fconvert.t(*(arg1 + 0x50))
    0042f172      x87_r7_2 - temp1_1
    0042f175      eax.w = (x87_r7_2 < temp1_1 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r7_2, temp1_1) ? 1 : 0 << 0xa) | ((x87_r7_2 == temp1_1 ? 1 : 0 << 0xe) | 0x3800)))
    0042f177      long double x87_r6_1 = fconvert.t(var_14)
    0042f17b      if ((eax:1.b & 1) == 0)
    0042f180          x87_r6_1 - x87_r7_2
    0042f182          eax.w = (x87_r6_1 < x87_r7_2 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r6_1, x87_r7_2) ? 1 : 0 << 0xa) | ((x87_r6_1 == x87_r7_2 ? 1 : 0 << 0xe) | 0x3000)))
    0042f17b          if ((eax:1.b & 0x41) == 0)
    0042f189              if ((*(arg1 + 0x4c) & 1) != 0)
    0042f193                  *(arg1 + 0x24)
    0042f197                  sub_42eee0(arg1)
    0042f1a3              if (sub_42ec20(arg1) != 0)
    0042f1ab                  sub_42e8f0(*(arg1 + 0x24))
    0042f17b      if ((eax:1.b & 1) != 0 || ((eax:1.b & 1) == 0 && (eax:1.b & 0x41) != 0))
    0042f1b7          long double temp2_1 = fconvert.t(*(arg1 + 0x50))
    0042f1b7          x87_r7_2 - temp2_1
    0042f1ba          eax.w = (x87_r7_2 < temp2_1 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r7_2, temp2_1) ? 1 : 0 << 0xa) | ((x87_r7_2 == temp2_1 ? 1 : 0 << 0xe) | 0x3000)))
    0042f1bc          eax:1.b & 5
    0042f1bc          bool p_1 = unimplemented  {test ah, 0x5}
    0042f1bf          if (not(p_1))
    0042f1c1              x87_r7_2 - x87_r6_1
    0042f1c3              eax.w = (x87_r7_2 < x87_r6_1 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r7_2, x87_r6_1) ? 1 : 0 << 0xa) | ((x87_r7_2 == x87_r6_1 ? 1 : 0 << 0xe) | 0)))
    0042f1c5              if ((eax:1.b & 1) == 0)
    0042f1ca                  char eax_3
    0042f1ca                  void* ecx_2
    0042f1ca                  eax_3, ecx_2 = sub_42ec20(arg1)
    0042f1cf                  if (eax_3 != 0)
    0042f1d3                      *(arg1 + 0x24)
    0042f1d7                      sub_42e9b0(ecx_2)
    0042f1e4                  if (((*(arg1 + 0x4c) u>> 1).b & 1) != 0)
    0042f1e8                      *(arg1 + 0x24)
    0042f1ee                      sub_42f020(arg1)
    0042f1fd      *(arg1 + 0x50) = fconvert.s(fconvert.t(var_14))
    0042f200  if (*(arg1 + 0x2c) != 0)
    0042f20a      void* esi_1 = *(arg1 + 0x18)
    0042f20d      if (esi_1 != 0)
    0042f215          *(esi_1 + 0x38) = *(esi_1 + 0x38) + 1
    0042f21a          void* var_10 = esi_1
    0042f22c          while (true)
    0042f22c              int32_t* eax_6
    0042f22c              int32_t ecx_6
    0042f22c              eax_6, ecx_6 = sub_40d7a0(esi_1, &var_14)
    0042f233              float eax_7 = var_14
    0042f237              ecx_6.b = *eax_6 != 0
    0042f23c              var_14 = 0f
    0042f23a              if (eax_7 != 0)
    0042f242                  *(eax_7 i+ 0x38) = *(eax_7 i+ 0x38) + 0xffffffff
    0042f247              if (ecx_6.b == 0)
    0042f247                  break
    0042f255              void* eax_9 = *sub_40d7a0(esi_1, &var_10)
    0042f257              if (eax_9 != 0)
    0042f25b                  *(eax_9 + 0x38) = *(eax_9 + 0x38) + 1
    0042f25f              void* ecx_8 = esi_1
    0042f263              esi_1 = eax_9
    0042f261              if (ecx_8 != 0)
    0042f267                  *(ecx_8 + 0x38) = *(ecx_8 + 0x38) + 0xffffffff
    0042f26a              void* eax_10 = var_10
    0042f270              var_10 = nullptr
    0042f26e              if (eax_10 != 0)
    0042f276                  *(eax_10 + 0x38) = *(eax_10 + 0x38) + 0xffffffff
    0042f27b          void* eax_11 = *(arg1 + 0x18)
    0042f287          var_10 = esi_1
    0042f28b          var_14 = fconvert.s(fconvert.t(*(eax_11 + 0x3c)) - fconvert.t(*(eax_11 + 0x18)))
    0042f296          var_14 = fconvert.s(fconvert.t(var_14) + fconvert.t(*(esi_1 + 0x18)))
    0042f2a1          sub_4e38e0(esi_1, fconvert.s(fconvert.t(var_14)))
    0042f2a6          *(esi_1 + 0x28) = *(esi_1 + 0x28) | 0x400000
    0042f2ad          void* eax_12 = *(arg1 + 0x18)
    0042f2b0          *(eax_12 + 0x28) = *(eax_12 + 0x28) | 0x8000000
    0042f2ba          *(arg1 + 0x2c) = 0
    0042f2bd          *(esi_1 + 0x38) = *(esi_1 + 0x38) + 0xffffffff
    0042f2c8  *fsbase = var_c


------------------------------------------------------------------------------------


int32_t __stdcall sub_4a0da0(void* arg1 @ ecx, int32_t arg2 @ edx, void* arg3, char arg4)

    004a0dad  int32_t* fsbase
    004a0dad  int32_t var_c = *fsbase
    004a0dae  *fsbase = &var_c
    004a0dbc  int32_t var_58 = 0
    004a0dc0  int32_t* eax_1 = *(arg1 + 0x30)
    004a0dc3  void* ecx = arg1 + 0x2c
    004a0dc8  void* edi = *eax_1
    004a0dca  void* esi = ecx
    004a0dcc  int32_t var_54 = 0
    004a0dd0  void* var_50 = ecx
    004a0dd4  void* var_48 = edi
    004a0dd8  void* var_4c = esi
    004a0de2  while (true)
    004a0de2      int32_t ebp_1 = *(ecx + 4)
    004a0de0      if (esi == 0 || (esi != 0 && esi != ecx))
    004a0deb          arg2 = sub_761e75()
    004a0df2      if (edi == ebp_1)
    004a0df2          break
    004a0df8      if (esi == 0)
    004a0dfc          arg2 = sub_761e75()
    004a0e01      if (edi == *(esi + 4))
    004a0e06          arg2 = sub_761e75()
    004a0e0b      void* esi_1 = edi + 0x10
    004a0e12      char eax_3
    004a0e12      char ebx
    004a0e12      if (arg3 != 0)
    004a0e22          var_58 = var_58 | 1
    004a0e2e          void var_28
    004a0e2e          eax_3, arg2 = sub_4aac50(arg3, sub_49bc30(esi_1, &var_28))
    004a0e12          if (eax_3 == 0)
    004a0e37              ebx = 1
    004a0e12      if (arg3 == 0 || (arg3 != 0 && eax_3 != 0))
    004a0e3b          ebx = 0
    004a0e40      if ((var_58.b & 1) != 0)
    004a0e4f          var_58 = var_58 & 0xfffffffe
    004a0e54          int32_t var_10
    004a0e54          void* var_24
    004a0e54          if (var_10 u>= 0x10)
    004a0e66              sub_4a99b0(arg2, 0xffffffff, var_24)
    004a0e6b      if (ebx == 0)
    004a0e6f          int32_t eax_6 = *(esi_1 + 0x64)
    004a0e77          if ((((eax_6 u>> 3).b & 1) != 0 || (((eax_6 u>> 3).b & 1) == 0 && arg4 == ebx)) && ((eax_6 u>> 4).b & 1) == 0)
    004a0e90              void var_44
    004a0e90              sub_49bc60(esi_1, &var_44)
    004a0ea2              sub_57f6b0(&var_44)
    004a0eaf              int32_t var_30
    004a0eaf              var_54 = var_54 + var_30
    004a0eb6              char var_40
    004a0eb6              int32_t var_2c
    004a0eb6              if (var_2c u>= 0x10)
    004a0ecc                  sub_4a99b0(var_30, 0xffffffff, var_40.d)
    004a0ed1              var_2c = 0xf
    004a0ed9              var_30 = 0
    004a0ee1              var_40 = 0
    004a0eea      arg2 = sub_40aba0(&var_4c)
    004a0eef      edi = var_48
    004a0ef3      esi = var_4c
    004a0ef7      ecx = var_50
    004a0f0e  *fsbase = var_c
    004a0f18  return var_54

---------------------------------------------------------------------------------------------


int32_t sub_47ed10(int32_t* arg1, void* arg2)

    0047ed17  int32_t* fsbase
    0047ed17  int32_t eax = *fsbase
    0047ed1d  int32_t var_c = eax
    0047ed1e  *fsbase = &var_c
    0047ed29  int32_t* ebx = arg1
    0047ed32  int32_t ebp = 0
    0047ed34  if (ebx != 0)
    0047ed43      sub_496a30(ebx)
    0047ed48      void* edi_1 = arg2
    0047ed4c      *(ebx + 4) = 0
    0047ed4f      *ebx = 0x7e8174
    0047ed55      *(ebx + 8) = 0
    0047ed58      *(ebx + 0xc) = 0
    0047ed5e      *(ebx + 4) = *(edi_1 + 4)
    0047ed61      eax = *(edi_1 + 8)
    0047ed68      int32_t var_4
    0047ed68      var_4.b = 1
    0047ed66      if (0 s> eax)
    0047ed6f          eax = 0
    0047ed73      *(ebx + 8) = eax
    0047ed71      if (eax s> 0)
    0047ed8a          *(ebx + 0xc) = sub_42dc60(eax << 4)
    0047ed8d          eax = 0
    0047ed92          int32_t var_18_1 = 0
    0047ed8f          if (*(ebx + 4) s> 0)
    0047eda4              while (true)
    0047eda4                  void* esi_1 = *(ebx + 0xc)
    0047eda7                  int32_t eax_4 = eax << 4
    0047edaa                  int32_t* esi_2 = esi_1 + eax_4
    0047edb0                  var_4.b = 2
    0047edaa                  if (esi_1 != neg.d(eax_4))
    0047edc0                      void* edi_3 = *(edi_1 + 0xc) + eax_4
    0047edc2                      sub_496a30(esi_2)
    0047edc7                      *(esi_2 + 4) = 0
    0047edca                      *esi_2 = 0x7e805c
    0047edd0                      *(esi_2 + 8) = 0
    0047edd3                      *(esi_2 + 0xc) = 0
    0047edd9                      *(esi_2 + 4) = *(edi_3 + 4)
    0047eddc                      int32_t eax_5 = *(edi_3 + 8)
    0047ede3                      var_4.b = 3
    0047ede1                      if (0 s> eax_5)
    0047edea                          eax_5 = 0
    0047edee                      *(esi_2 + 8) = eax_5
    0047edec                      if (eax_5 s> 0)
    0047ee01                          bool cond:8_1 = *(esi_2 + 4) s<= 0
    0047ee05                          *(esi_2 + 0xc) = sub_42dc60(eax_5 << 4)
    0047ee08                          if (not(cond:8_1))
    0047ee0a                              int32_t edx_1 = 0
    0047ee10                              do
    0047ee10                                  void* ecx_6 = *(esi_2 + 0xc)
    0047ee13                                  int32_t* ecx_7 = ecx_6 + edx_1
    0047ee13                                  if (ecx_6 != neg.d(edx_1))
    0047ee17                                      int32_t* eax_8 = *(edi_3 + 0xc)
    0047ee1d                                      void* eax_9 = eax_8 + edx_1
    0047ee1f                                      *ecx_7 = *(eax_8 + edx_1)
    0047ee24                                      *(ecx_7 + 4) = *(eax_9 + 4)
    0047ee2a                                      *(ecx_7 + 8) = *(eax_9 + 8)
    0047ee30                                      ebx = arg1
    0047ee34                                      *(ecx_7 + 0xc) = *(eax_9 + 0xc)
    0047ee37                                  ebp = ebp + 1
    0047ee3a                                  edx_1 = edx_1 + 0x10
    0047ee3a                              while (ebp s< *(esi_2 + 4))
    0047ee42                          ebp = 0
    0047ee48                  eax = var_18_1 + 1
    0047ee4e                  var_4.b = 1
    0047ee53                  var_18_1 = eax
    0047ee57                  if (eax s>= *(ebx + 4))
    0047ee57                      break
    0047eda0                  edi_1 = arg2
    0047ee65  *fsbase = var_c
    0047ee6f  return eax

----------------------------------------------------------------------

int32_t* __stdcall sub_4ebd60(void* arg1 @ ecx, int32_t* arg2)

    004ebd6d  int32_t* fsbase
    004ebd6d  int32_t var_c = *fsbase
    004ebd6e  *fsbase = &var_c
    004ebd83  *arg2 = 0
    004ebd9a  int32_t* eax_1 = sub_4ee160(arg1 + 0x10, &arg_8)
    004ebda1  if (eax_1 != 0)
    004ebdaf      void* esi_1 = *(*eax_1 + 4)
    004ebdb1      void* ecx_2
    004ebdb1      if (esi_1 != 0)
    004ebdbb          *(esi_1 + 0x3c) = *data_8ba770
    004ebdbe          ecx_2 = *(esi_1 + 0x30)
    004ebdb1          if (ecx_2 == 0 && *(esi_1 + 0x28) != 0)
    004ebdca              if ((*(esi_1 + 0x38) & 0x9000) != 0)
    004ebdda                  sub_41a5e0(esi_1, data_8951a0)
    004ebddf              ecx_2 = *(esi_1 + 0x30)
    004ebdb1      if (esi_1 == 0 || ((esi_1 != 0 && ecx_2 == 0) && *(esi_1 + 0x28) == 0))
    004ebde4          ecx_2 = nullptr
    004ebe0f      *arg2
    004ebe14      *arg2 = *sub_520ed0(ecx_2, &arg_8, eax_1 + 4, 1)
    004ebe2b      int32_t var_4_1
    004ebe2b      var_4_1.b = 0
    004ebe2f      arg_8 = 0
    004ebe49  *fsbase = var_c
    004ebe53  return arg2

-------------------------------------------------------------------------------

int32_t* __stdcall sub_5a0f00(int32_t* arg1 @ ecx, void* arg2)

    005a0f0d  int32_t* fsbase
    005a0f0d  int32_t var_c = *fsbase
    005a0f0e  *fsbase = &var_c
    005a0f1d  void* ebx = nullptr
    005a0f1f  int32_t* eax_1
    005a0f1f  if (arg2 == 0)
    005a0f2e      eax_1 = nullptr
    005a0f29  else
    005a0f29      eax_1 = arg2 + 4
    005a0f32  *(arg1 + 4) = *eax_1
    005a0f38  *(arg1 + 8) = *(eax_1 + 4)
    005a0f3b  *arg1 = 0x7e5df0
    005a0f45  *(arg1 + 0xc) = *(arg2 + 0xc)
    005a0f48  *arg1 = 0x7f43f4
    005a0f51  *(arg1 + 0x10) = *(arg2 + 0x10)
    005a0f62  *(arg1 + 0x2c) = 0xf
    005a0f65  *(arg1 + 0x28) = 0
    005a0f6d  *(arg1 + 0x18) = 0
    005a0f70  sub_40d8d0(arg1 + 0x14, arg2 + 0x14, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    005a0f78  *(arg1 + 0x30) = *(arg2 + 0x30)
    005a0f7e  *(arg1 + 0x34) = *(arg2 + 0x34)
    005a0f8a  *(arg1 + 0x50) = 0xf
    005a0f8d  *(arg1 + 0x4c) = 0
    005a0f91  int32_t var_4
    005a0f91  var_4.b = 1
    005a0f96  *(arg1 + 0x3c) = 0
    005a0f99  sub_40d8d0(arg1 + 0x38, arg2 + 0x38, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    005a0fa1  *(arg1 + 0x54) = *(arg2 + 0x54)
    005a0fa7  *(arg1 + 0x58) = *(arg2 + 0x58)
    005a0fad  *(arg1 + 0x5c) = *(arg2 + 0x5c)
    005a0fb3  *(arg1 + 0x60) = *(arg2 + 0x60)
    005a0fb9  *(arg1 + 0x64) = *(arg2 + 0x64)
    005a0fbc  *(arg1 + 0x68) = 0
    005a0fc4  var_4.b = 2
    005a0fd6  *(arg1 + 0x68)
    005a0fdb  *(arg1 + 0x68) = *(arg2 + 0x68)
    005a0fef  *(arg1 + 0x6c) = *(arg2 + 0x6c)
    005a0ff2  void* eax_9 = arg2 + 0x70
    005a0ff7  var_4.b = 3
    005a0ff5  if (eax_9 != 0)
    005a0ffe      ebx = eax_9 + 4
    005a1005  sub_5a0440(arg1 + 0x74, ebx)
    005a100a  int32_t ecx_7 = var_c
    005a100f  *(arg1 + 0x70) = 0x7f4388
    005a101a  *fsbase = ecx_7
    005a1024  return arg1

-----------------------------------------------------------------------------

int32_t sub_55ce70()

    0055ce7d  int32_t* fsbase
    0055ce7d  int32_t var_c = *fsbase
    0055ce7e  *fsbase = &var_c
    0055ce8a  int32_t edi
    0055ce8a  int32_t var_5c = edi
    0055ce8f  int32_t* var_38
    0055ce8f  int32_t* var_60 = &var_38
    0055cea7  var_38 = nullptr
    0055ceaf  int32_t* esp_1 = &var_5c
    0055ceb5  if (CoCreateInstance(0x8272ac, 0, 1, 0x8271dc, var_60) == 0)
    0055cebd      var_60 = 0xc
    0055cec4      int32_t var_4c = 0
    0055cecd      void* esi_1 = sub_42dc60(0xc)
    0055ced3      if (esi_1 == 0)
    0055cefe          esi_1 = nullptr
    0055cedb      else
    0055cedb          var_60 = "ROOT\CIMV2"
    0055cee0          *(esi_1 + 4) = 0
    0055cee3          *(esi_1 + 8) = 1
    0055cee6          int32_t eax_3 = SysAllocString(0x7f0d44)  {"ROOT\CIMV2"}
    0055ceee          *esi_1 = eax_3
    0055ceec          if (eax_3 == 0)
    0055cef2              var_60 = __gfids_table[0x3aee689].rvAddr+2
    0055cef7              sub_78a130(0x8007000e)
    0055cf00      var_60 = 0
    0055cf04      if (esi_1 == 0)
    0055cf15          sub_78a130(0x8007000e)
    0055cf1a      int32_t ecx_2
    0055cf1a      if (esi_1 == 0)
    0055cf26          ecx_2 = 0
    0055cf22      else
    0055cf22          ecx_2 = *esi_1
    0055cf28      int32_t* eax_4 = var_38
    0055cf3e      int32_t eax_6 = *(*eax_4 + 0xc)(eax_4, ecx_2, 0, 0, 0, 0, 0, 0, &var_4c)
    0055cf3e      int32_t* esp_2 = &var_5c
    0055cf40      if (esi_1 != 0)
    0055cf4d          var_60 = esi_1 + 8
    0055cf4d          esp_2 = &var_60
    0055cf54          if (InterlockedDecrement(Addend: var_60) == 0)
    0055cf58              int32_t eax_8 = *esi_1
    0055cf5a              if (eax_8 != 0)
    0055cf5f                  SysFreeString(eax_8)
    0055cf65              int32_t eax_9 = *(esi_1 + 4)
    0055cf68              if (eax_9 != 0)
    0055cf72                  sub_42dca0(esi_1, eax_6, eax_9)
    0055cf7d              sub_42dca0(esi_1, eax_6, esi_1)
    0055cf7d              esp_2 = &var_60
    0055cf82      if (eax_6 == 0)
    0055cf8a          int32_t edx_2 = *(esp_2 + 0x14)
    0055cf8e          *(esp_2 - 4) = 0
    0055cf8f          *(esp_2 - 8) = 0
    0055cf95          *(esp_2 - 0xc) = 3
    0055cf96          *(esp_2 - 0x10) = 3
    0055cf97          *(esp_2 - 0x14) = 0
    0055cf98          *(esp_2 - 0x18) = 0
    0055cf99          *(esp_2 - 0x1c) = 0xa
    0055cf9b          *(esp_2 - 0x20) = edx_2
    0055cf9c          void* esp_11 = esp_2
    0055cfa2          if (CoSetProxyBlanket() == 0)
    0055cfaa              *(esp_11 - 4) = 0xc
    0055cfb1              *(esp_11 + 0x18) = 0
    0055cfb5              int32_t* eax_11
    0055cfb5              int32_t edx_3
    0055cfb5              eax_11, edx_3 = sub_42dc60()
    0055cfb5              void* esp_13 = esp_11
    0055cfbc              *(esp_13 + 0x30) = eax_11
    0055cfc2              *(esp_13 + 0x5c) = 2
    0055cfc0              int32_t* edi_2
    0055cfc0              if (eax_11 == 0)
    0055cfe6                  edi_2 = nullptr
    0055cfcc              else
    0055cfcc                  *(esp_13 - 4) = 0x7f0d24  {"SELECT * FROM Win32_BaseBoard"}
    0055cfd1                  *(eax_11 + 4) = 0
    0055cfd4                  *(eax_11 + 8) = 1
    0055cfdb                  esp_13 = esp_13
    0055cfe0                  *eax_11 = sub_789fa0(edx_3, eax_11, eax_6)
    0055cfe2                  edi_2 = eax_11
    0055cfea              *(esp_13 + 0x5c) = 0xffffffff
    0055cff2              *(esp_13 + 0x30) = edi_2
    0055cfe8              if (edi_2 == 0)
    0055cff8                  *(esp_13 - 4) = 0x8007000e
    0055cffd                  sub_78a130()
    0055cffd                  esp_13 = esp_13
    0055d002              *(esp_13 - 4) = 0xc
    0055d002              esp_13 = esp_13 - 4
    0055d009              *(esp_13 + 0x60) = 3
    0055d00d              int32_t* eax_13
    0055d00d              int32_t edx_4
    0055d00d              eax_13, edx_4 = sub_42dc60()
    0055d00d              void* esp_16 = esp_13 + 4
    0055d012              int32_t* esi_3 = eax_13
    0055d014              *(esp_16 + 0x24) = esi_3
    0055d01a              *(esp_16 + 0x5c) = 4
    0055d018              if (esi_3 == 0)
    0055d039                  esi_3 = nullptr
    0055d021              else
    0055d021                  *(esp_16 - 4) = 0x7f0d20
    0055d026                  *(esi_3 + 4) = 0
    0055d029                  *(esi_3 + 8) = 1
    0055d030                  esp_16 = esp_16
    0055d035                  *esi_3 = sub_789fa0(edx_4, esi_3, edi_2)
    0055d03d              *(esp_16 + 0x5c) = 3
    0055d041              *(esp_16 + 0x24) = esi_3
    0055d03b              if (esi_3 == 0)
    0055d047                  *(esp_16 - 4) = 0x8007000e
    0055d04c                  sub_78a130()
    0055d04c                  esp_16 = esp_16
    0055d053              *(esp_16 + 0x5c) = 5
    0055d051              int32_t edx_5
    0055d051              if (edi_2 == 0)
    0055d05e                  edx_5 = 0
    0055d05a              else
    0055d05a                  edx_5 = *edi_2
    0055d060              int32_t ecx_8
    0055d060              if (esi_3 == 0)
    0055d068                  ecx_8 = 0
    0055d064              else
    0055d064                  ecx_8 = *esi_3
    0055d06a              int32_t* eax_15 = *(esp_16 + 0x14)
    0055d06e              void* ebx_1 = *eax_15
    0055d074              *(esp_16 - 4) = esp_16 + 0x18
    0055d075              *(esp_16 - 8) = 0
    0055d077              *(esp_16 - 0xc) = 0x30
    0055d079              *(esp_16 - 0x10) = edx_5
    0055d07a              *(esp_16 - 0x14) = ecx_8
    0055d07b              *(esp_16 - 0x18) = eax_15
    0055d07c              *(ebx_1 + 0x50)()
    0055d07f              void* esp_25 = esp_16
    0055d083              *(esp_25 + 0x5c) = 3
    0055d081              if (esi_3 != 0)
    0055d08d                  *(esp_25 - 4) = esi_3 + 8
    0055d08d                  esp_25 = esp_25 - 4
    0055d094                  if (InterlockedDecrement() == 0)
    0055d098                      int32_t eax_18 = *esi_3
    0055d09a                      if (eax_18 != 0)
    0055d09e                          *(esp_25 - 4) = eax_18
    0055d09f                          SysFreeString()
    0055d09f                          esp_25 = esp_25
    0055d0a5                      int32_t eax_19 = *(esi_3 + 4)
    0055d0a8                      if (eax_19 != 0)
    0055d0ac                          *(esp_25 - 4) = eax_19
    0055d0b2                          sub_42dca0(esi_3, edi_2)
    0055d0b2                          esp_25 = esp_25
    0055d0b7                      *(esp_25 - 4) = esi_3
    0055d0b7                      esp_25 = esp_25 - 4
    0055d0bd                      sub_42dca0(esi_3, edi_2)
    0055d0bd                      esp_25 = esp_25 + 4
    0055d0c4              *(esp_25 + 0x5c) = 0xffffffff
    0055d0c2              if (edi_2 != 0)
    0055d0d1                  *(esp_25 - 4) = edi_2 + 8
    0055d0d1                  esp_25 = esp_25 - 4
    0055d0d8                  if (InterlockedDecrement() == 0)
    0055d0dc                      int32_t eax_21 = *edi_2
    0055d0de                      if (eax_21 != 0)
    0055d0e2                          *(esp_25 - 4) = eax_21
    0055d0e3                          SysFreeString()
    0055d0e3                          esp_25 = esp_25
    0055d0e9                      int32_t eax_22 = *(edi_2 + 4)
    0055d0ec                      if (eax_22 != 0)
    0055d0f0                          *(esp_25 - 4) = eax_22
    0055d0f6                          sub_42dca0(esi_3, edi_2)
    0055d0f6                          esp_25 = esp_25
    0055d0fb                      *(esp_25 - 4) = edi_2
    0055d0fb                      esp_25 = esp_25 - 4
    0055d101                      sub_42dca0(esi_3, edi_2)
    0055d101                      esp_25 = esp_25 + 4
    0055d106              int32_t* eax_23 = *(esp_25 + 0x18)
    0055d11a              *(esp_25 + 0x20) = 0
    0055d11e              *(esp_25 + 0x2c) = 0
    0055d118              if (eax_23 != 0)
    0055d128                  edi_2 = *(esp_25 + 0x10)
    0055d12c                  esp_25 = esp_25
    0055d130                  while (true)
    0055d130                      void* ecx_14 = *eax_23
    0055d136                      *(esp_25 - 4) = esp_25 + 0x2c
    0055d13b                      *(esp_25 - 8) = esp_25 + 0x20
    0055d13c                      *(esp_25 - 0xc) = 1
    0055d13e                      *(esp_25 - 0x10) = 0xffffffff
    0055d140                      *(esp_25 - 0x14) = eax_23
    0055d141                      *(ecx_14 + 0x10)()
    0055d144                      esp_25 = esp_25
    0055d1ad                      if (*(esp_25 + 0x2c) == 0)
    0055d1ad                          int32_t* eax_30 = *(esp_25 + 0x18)
    0055d1b3                          *(esp_25 + 0x10) = edi_2
    0055d1b1                          if (eax_30 != 0)
    0055d1bb                              int32_t edx_12 = *(*eax_30 + 8)
    0055d1be                              *(esp_25 - 4) = eax_30
    0055d1bf                              edx_12()
    0055d1bf                              esp_25 = esp_25
    0055d1b1                          break
    0055d151                      *(esp_25 - 4) = esp_25 + 0x34
    0055d152                      VariantInit()
    0055d154                      int32_t* eax_25 = *(esp_25 + 0x20)
    0055d15a                      int32_t edx_10 = *(*eax_25 + 0x10)
    0055d15d                      *(esp_25 - 4) = 0
    0055d15f                      *(esp_25 - 8) = 0
    0055d165                      *(esp_25 - 0xc) = esp_25 + 0x34
    0055d166                      *(esp_25 - 0x10) = 0
    0055d168                      *(esp_25 - 0x14) = 0x7f0d04  {"SerialNumber"}
    0055d16d                      *(esp_25 - 0x18) = eax_25
    0055d16e                      edx_10()
    0055d170                      char* edx_11 = *(esp_25 + 0x3c)
    0055d174                      char* eax_26 = edx_11
    0055d176                      void* esi_4 = eax_26 + 1
    0055d180                      char ecx_17
    0055d180                      do
    0055d180                          ecx_17 = *eax_26
    0055d182                          eax_26 = eax_26 + 1
    0055d182                      while (ecx_17 != 0)
    0055d18b                      *(esp_25 - 4) = eax_26 - esi_4
    0055d18c                      *(esp_25 - 8) = edx_11
    0055d18d                      *(esp_25 - 0xc) = edi_2
    0055d193                      edi_2 = sub_588cc0()
    0055d19c                      *(esp_25 - 4) = esp_25 + 0x34
    0055d19d                      VariantClear()
    0055d19d                      void* esp_43
    0055d19d                      esp_25 = esp_43
    0055d19f                      eax_23 = *(esp_25 + 0x18)
    0055d1a7                      if (eax_23 == 0)
    0055d1a7                          *(esp_25 + 0x10) = edi_2
    0055d1ab                          break
    0055d1c1                  int32_t* eax_31 = *(esp_25 + 0x20)
    0055d1c5                  if (eax_31 != 0)
    0055d1cb                      int32_t edx_13 = *(*eax_31 + 8)
    0055d1ce                      *(esp_25 - 4) = eax_31
    0055d1cf                      edx_13()
    0055d1cf                      esp_25 = esp_25
    0055d1d3              *(esp_25 - 4) = 0xc
    0055d1d3              esp_25 = esp_25 - 4
    0055d1da              *(esp_25 + 0x20) = 0
    0055d1de              int32_t* eax_32
    0055d1de              int32_t edx_14
    0055d1de              eax_32, edx_14 = sub_42dc60()
    0055d1de              void* esp_52 = esp_25 + 4
    0055d1e5              *(esp_52 + 0x2c) = eax_32
    0055d1eb              *(esp_52 + 0x5c) = 6
    0055d1e9              int32_t* edi_3
    0055d1e9              if (eax_32 == 0)
    0055d20f                  edi_3 = nullptr
    0055d1f5              else
    0055d1f5                  *(esp_52 - 4) = 0x7f0ce8  {"SELECT * FROM Win32_BIOS"}
    0055d1fa                  *(eax_32 + 4) = 0
    0055d1fd                  *(eax_32 + 8) = 1
    0055d204                  esp_52 = esp_52
    0055d209                  *eax_32 = sub_789fa0(edx_14, eax_32, edi_2)
    0055d20b                  edi_3 = eax_32
    0055d213              *(esp_52 + 0x5c) = 0xffffffff
    0055d21b              *(esp_52 + 0x2c) = edi_3
    0055d211              if (edi_3 == 0)
    0055d221                  *(esp_52 - 4) = 0x8007000e
    0055d226                  sub_78a130()
    0055d226                  esp_52 = esp_52
    0055d230              *(esp_52 - 4) = 0xc
    0055d237              *(esp_52 + 0x5c) = 7
    0055d23b              int32_t* eax_34
    0055d23b              int32_t edx_15
    0055d23b              eax_34, edx_15 = sub_42dc60()
    0055d23b              void* esp_56 = esp_52
    0055d240              int32_t* esi_6 = eax_34
    0055d242              *(esp_56 + 0x20) = esi_6
    0055d248              *(esp_56 + 0x5c) = 8
    0055d246              if (esi_6 == 0)
    0055d267                  esi_6 = nullptr
    0055d24f              else
    0055d24f                  *(esp_56 - 4) = 0x7f0d20
    0055d254                  *(esi_6 + 4) = 0
    0055d257                  *(esi_6 + 8) = 1
    0055d25e                  esp_56 = esp_56
    0055d263                  *esi_6 = sub_789fa0(edx_15, esi_6, edi_3)
    0055d26b              *(esp_56 + 0x5c) = 7
    0055d26f              *(esp_56 + 0x20) = esi_6
    0055d269              if (esi_6 == 0)
    0055d275                  *(esp_56 - 4) = 0x8007000e
    0055d27a                  sub_78a130()
    0055d27a                  esp_56 = esp_56
    0055d281              *(esp_56 + 0x5c) = 9
    0055d27f              int32_t edx_16
    0055d27f              if (edi_3 == 0)
    0055d28c                  edx_16 = 0
    0055d288              else
    0055d288                  edx_16 = *edi_3
    0055d28e              int32_t ecx_22
    0055d28e              if (esi_6 == 0)
    0055d296                  ecx_22 = 0
    0055d292              else
    0055d292                  ecx_22 = *esi_6
    0055d298              int32_t* eax_36 = *(esp_56 + 0x14)
    0055d29c              void* ebp_2 = *eax_36
    0055d2a2              *(esp_56 - 4) = esp_56 + 0x1c
    0055d2a5              *(esp_56 - 8) = 0
    0055d2a6              *(esp_56 - 0xc) = 0x30
    0055d2a8              *(esp_56 - 0x10) = edx_16
    0055d2a9              *(esp_56 - 0x14) = ecx_22
    0055d2aa              *(esp_56 - 0x18) = eax_36
    0055d2ab              *(ebp_2 + 0x50)()
    0055d2ae              esp_11 = esp_56
    0055d2b2              *(esp_11 + 0x5c) = 7
    0055d2b0              if (esi_6 != 0)
    0055d2bc                  *(esp_11 - 4) = esi_6 + 8
    0055d2bc                  esp_11 = esp_11 - 4
    0055d2c3                  if (InterlockedDecrement() == 0)
    0055d2c7                      int32_t eax_39 = *esi_6
    0055d2c9                      if (eax_39 != 0)
    0055d2cd                          *(esp_11 - 4) = eax_39
    0055d2ce                          SysFreeString()
    0055d2ce                          esp_11 = esp_11
    0055d2d4                      int32_t eax_40 = *(esi_6 + 4)
    0055d2d7                      if (eax_40 != 0)
    0055d2db                          *(esp_11 - 4) = eax_40
    0055d2e1                          sub_42dca0(esi_6, edi_3)
    0055d2e1                          esp_11 = esp_11
    0055d2e6                      *(esp_11 - 4) = esi_6
    0055d2e6                      esp_11 = esp_11 - 4
    0055d2ec                      sub_42dca0(esi_6, edi_3)
    0055d2ec                      esp_11 = esp_11 + 4
    0055d2f3              *(esp_11 + 0x5c) = 0xffffffff
    0055d2f1              if (edi_3 != 0)
    0055d300                  *(esp_11 - 4) = edi_3 + 8
    0055d300                  esp_11 = esp_11 - 4
    0055d307                  if (InterlockedDecrement() == 0)
    0055d30b                      int32_t eax_42 = *edi_3
    0055d30d                      if (eax_42 != 0)
    0055d311                          *(esp_11 - 4) = eax_42
    0055d312                          SysFreeString()
    0055d312                          esp_11 = esp_11
    0055d318                      int32_t eax_43 = *(edi_3 + 4)
    0055d31b                      if (eax_43 != 0)
    0055d31f                          *(esp_11 - 4) = eax_43
    0055d325                          sub_42dca0(esi_6, edi_3)
    0055d325                          esp_11 = esp_11
    0055d32a                      *(esp_11 - 4) = edi_3
    0055d32a                      esp_11 = esp_11 - 4
    0055d330                      sub_42dca0(esi_6, edi_3)
    0055d330                      esp_11 = esp_11 + 4
    0055d335              int32_t* eax_44 = *(esp_11 + 0x1c)
    0055d33b              *(esp_11 + 0x24) = 0
    0055d33f              *(esp_11 + 0x30) = 0
    0055d339              if (eax_44 != 0)
    0055d355                  int32_t ebx_3 = *(esp_11 + 0x10)
    0055d359                  esp_11 = esp_11
    0055d360                  while (true)
    0055d360                      void* ecx_28 = *eax_44
    0055d366                      *(esp_11 - 4) = esp_11 + 0x30
    0055d36b                      *(esp_11 - 8) = esp_11 + 0x24
    0055d36c                      *(esp_11 - 0xc) = 1
    0055d36e                      *(esp_11 - 0x10) = 0xffffffff
    0055d370                      *(esp_11 - 0x14) = eax_44
    0055d371                      *(ecx_28 + 0x10)()
    0055d374                      esp_11 = esp_11
    0055d3dd                      if (*(esp_11 + 0x30) == 0)
    0055d3dd                          int32_t* eax_51 = *(esp_11 + 0x1c)
    0055d3e3                          *(esp_11 + 0x10) = ebx_3
    0055d3e1                          if (eax_51 != 0)
    0055d3eb                              int32_t edx_23 = *(*eax_51 + 8)
    0055d3ee                              *(esp_11 - 4) = eax_51
    0055d3ef                              edx_23()
    0055d3ef                              esp_11 = esp_11
    0055d3e1                          break
    0055d381                      *(esp_11 - 4) = esp_11 + 0x44
    0055d382                      VariantInit()
    0055d384                      int32_t* eax_46 = *(esp_11 + 0x24)
    0055d38a                      int32_t edx_21 = *(*eax_46 + 0x10)
    0055d38d                      *(esp_11 - 4) = 0
    0055d38f                      *(esp_11 - 8) = 0
    0055d395                      *(esp_11 - 0xc) = esp_11 + 0x44
    0055d396                      *(esp_11 - 0x10) = 0
    0055d398                      *(esp_11 - 0x14) = 0x7f0d04  {"SerialNumber"}
    0055d39d                      *(esp_11 - 0x18) = eax_46
    0055d39e                      edx_21()
    0055d3a0                      char* edx_22 = *(esp_11 + 0x4c)
    0055d3a4                      char* eax_47 = edx_22
    0055d3a6                      void* esi_7 = eax_47 + 1
    0055d3b0                      char ecx_31
    0055d3b0                      do
    0055d3b0                          ecx_31 = *eax_47
    0055d3b2                          eax_47 = eax_47 + 1
    0055d3b2                      while (ecx_31 != 0)
    0055d3bb                      *(esp_11 - 4) = eax_47 - esi_7
    0055d3bc                      *(esp_11 - 8) = edx_22
    0055d3bd                      *(esp_11 - 0xc) = ebx_3
    0055d3c3                      ebx_3 = sub_588cc0()
    0055d3cc                      *(esp_11 - 4) = esp_11 + 0x44
    0055d3cd                      VariantClear()
    0055d3cd                      void* esp_82
    0055d3cd                      esp_11 = esp_82
    0055d3cf                      eax_44 = *(esp_11 + 0x1c)
    0055d3d7                      if (eax_44 == 0)
    0055d3d7                          *(esp_11 + 0x10) = ebx_3
    0055d3db                          break
    0055d3f1                  int32_t* eax_52 = *(esp_11 + 0x24)
    0055d3f5                  if (eax_52 != 0)
    0055d3fb                      int32_t edx_24 = *(*eax_52 + 8)
    0055d3fe                      *(esp_11 - 4) = eax_52
    0055d3ff                      edx_24()
    0055d3ff                      esp_11 = esp_11
    0055d401          int32_t* eax_53 = *(esp_11 + 0x14)
    0055d407          int32_t edx_25 = *(*eax_53 + 8)
    0055d40a          *(esp_11 - 4) = eax_53
    0055d40b          edx_25()
    0055d40b          esp_2 = esp_11
    0055d40d      int32_t* eax_54 = *(esp_2 + 0x28)
    0055d413      int32_t edx_26 = *(*eax_54 + 8)
    0055d416      *(esp_2 - 4) = eax_54
    0055d417      edx_26()
    0055d419      *(esp_2 - 4)
    0055d419      esp_1 = esp_2
    0055d41e  int32_t esi_8 = *(esp_1 + 0x60)
    0055d422  *(esp_1 - 4) = *(esp_1 + 0xc)
    0055d425  sub_4aa810(esi_8)
    0055d42e  *esp_1
    0055d431  *(esp_1 + 4)
    0055d432  *(esp_1 + 8)
    0055d433  *fsbase = *(esp_1 + 0x50)
    0055d43d  return esi_8

-----------------------------------------------------------------------

void* __fastcall sub_6bd960(int32_t* arg1, int32_t arg2 @ edi)

    006bd96d  int32_t* fsbase
    006bd96d  int32_t var_c = *fsbase
    006bd96e  *fsbase = &var_c
    006bd9a6  void var_60
    006bd9a6  if (sub_6bf1f0(*(arg1 + 8)) == 0)
    006bd9c5      void var_7c
    006bd9c5      sub_40d9b0(&var_7c, data_7e6844, 1)
    006bd9d6      int32_t var_4
    006bd9d6      var_4.b = 1
    006bd9f2      void var_98
    006bd9f2      sub_40d8d0(&var_98, &var_7c, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    006bda3e      int32_t var_4_1
    006bda3e      var_4_1.b = 6
    006bda59      var_4_1.b = 7
    006bda6a      void var_44
    006bda6a      void var_28
    006bda6a      void* eax_7 = sub_40eaa0(&var_44, sub_40eaa0(&var_28, *(arg1 + 0x38) + 0x7c, &var_98), *(*arg1 + 0x14)(1))
    006bda76      char* ecx_4 = *(eax_7 + 0x14)
    006bda79      var_4_1.b = 8
    006bda81      arg2 = arg2
    006bda72      void* eax_8
    006bda72      if (*(eax_7 + 0x18) u< 0x10)
    006bda89          eax_8 = eax_7 + 4
    006bda84      else
    006bda84          eax_8 = *(eax_7 + 4)
    006bda92      int32_t edx_3 = sub_40d9b0(&var_60, eax_8, ecx_4)
    006bda9e      var_4_1.b = 7
    006bda9b      int32_t var_2c
    006bda9b      if (var_2c u>= 0x10)
    006bdaa8          char var_40
    006bdaa8          void* edx_4 = var_40.d
    006bdab5          edx_3 = sub_4a99b0(edx_4, arg2, edx_4)
    006bdad0      var_4_1.b = 6
    006bdac1      int32_t var_10
    006bdac1      char var_24
    006bdac1      if (var_10 u>= 0x10)
    006bdaed          sub_4a99b0(edx_3, arg2, var_24.d)
    006bdb0e      var_4_1.b = 0
    006bdb43  sub_40d8d0(*(arg1 + 8) + 4, &var_60, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    006bdb78  *fsbase = var_c
    006bdb85  return 0xf

-------------------------------------------------------------

uint32_t __stdcall sub_5d50d0(void arg1 @ invalid, int32_t arg2 @ ecx, int32_t arg3 @ mxcsr, long double arg4 @ st0, int32_t* arg5)

    005d50d2  int32_t* fsbase
    005d50d2  uint32_t eax = *fsbase
    005d50dd  uint32_t var_c = eax
    005d50de  *fsbase = &var_c
    005d50eb  uint32_t esi = arg2
    005d50fd  if (*(esi + 0xd4) != 0 && *data_8ef31c != 0)
    005d5109      void* edi_1 = *(esi + 0xfc)
    005d510f      if (edi_1 != 0)
    005d511d          uint32_t var_9c
    005d511d          if (((*(edi_1 + 0x38) u>> 0xf).b & 1) == 0)
    005d5121              eax = *(edi_1 + 0x30)
    005d512c              *(edi_1 + 0x3c) = *data_8ba770
    005d5124              uint32_t edi_2
    005d5124              if (eax != 0)
    005d5131                  edi_2 = eax
    005d5135              else if (*(edi_1 + 0x28) == 0)
    005d513a                  edi_2 = 0
    005d513e              else
    005d513e                  if ((*(edi_1 + 0x38) & 0x9000) != 0)
    005d5147                      var_9c = 0x8951a0
    005d514e                      eax, arg2 = sub_41a5e0(edi_1, data_8951a0)
    005d5153                  edi_2 = *(edi_1 + 0x30)
    005d5158              eax.b = edi_2 != 0
    005d511d          if (((*(edi_1 + 0x38) u>> 0xf).b & 1) != 0 || (((*(edi_1 + 0x38) u>> 0xf).b & 1) == 0 && eax.b != 0))
    005d516a              eax = *(arg5 + 8)
    005d516d              uint32_t var_80_1 = eax
    005d5171              char var_4c
    005d5171              void* ecx_1
    005d5171              if (eax == 0)
    005d517c                  ecx_1 = *(esi + 0x20)
    005d5171                  if (ecx_1 != 0)
    005d518b                      var_9c = &var_4c
    005d518c                      int32_t* eax_3
    005d518c                      eax_3, arg2 = sub_562650(ecx_1, var_9c)
    005d5191                      eax = *eax_3
    005d5195                      var_80_1 = eax
    005d5171              if (eax != 0 || (eax == 0 && ecx_1 != 0))
    005d519f                  void* eax_4 = *(esi + 0xfc)
    005d51a5                  if (eax_4 != 0)
    005d51af                      *(eax_4 + 0x40) = *data_8ba774
    005d51b2                  void* edi_3 = *(esi + 0xfc)
    005d51b8                  void* var_84_1
    005d51b8                  void* eax_5
    005d51b8                  if (edi_3 != 0)
    005d51bc                      eax_5 = *(edi_3 + 0x30)
    005d51c7                      *(edi_3 + 0x3c) = *data_8ba770
    005d51b8                      if (eax_5 != 0)
    005d51cc                          var_84_1 = eax_5
    005d51b8                      if (eax_5 == 0 && *(edi_3 + 0x28) != 0)
    005d51d7                          if ((*(edi_3 + 0x38) & 0x9000) != 0)
    005d51e0                              var_9c = 0x8951a0
    005d51e7                              sub_41a5e0(edi_3, data_8951a0)
    005d51ef                          var_84_1 = *(edi_3 + 0x30)
    005d51b8                  if (edi_3 == 0 || ((edi_3 != 0 && eax_5 == 0) && *(edi_3 + 0x28) == 0))
    005d51f5                      var_84_1 = nullptr
    005d51f9                  uint32_t ebx_1 = *arg5
    005d51fc                  int32_t edi_4 = *(arg5 + 4)
    005d51ff                  arg2.b = *(arg5 + 0xc)
    005d5202                  var_9c = esi
    005d5204                  uint32_t var_7c_1 = ebx_1
    005d520c                  char var_6c_1 = arg2.b
    005d5218                  float var_1c
    005d5218                  if (sub_5adb30(ebx_1, var_9c) != 0)
    005d523b                      var_9c = &var_1c
    005d523e                      var_1c = 1.96181785e-44f
    005d522d                      *(*esi + 0xc)(var_9c)
    005d5252                  if (edi_4 != 0)
    005d5256                      var_9c = esi
    005d5258                      eax = sub_5adf80(ebx_1, var_9c)
    005d5252                  if (edi_4 == 0 || (edi_4 != 0 && eax.b != 0))
    005d5268                      void* eax_8 = *(esi + 0x20)
    005d526b                      float var_54
    005d526b                      int32_t var_4
    005d526b                      if (eax_8 != 0)
    005d526f                          void* ecx_4 = *(eax_8 + 0x5c)
    005d5272                          if (*(ecx_4 + 0x5c) != 0)
    005d5281                              var_9c = &var_54
    005d5284                              sub_47ab60(*(ecx_4 + 0x5c), var_9c)
    005d5289                              float edi_5 = var_54
    005d528f                              var_4.b = 1
    005d528d                              if (edi_5 != 0)
    005d529c                                  var_9c = 0
    005d52a3                                  int32_t* eax_11 = sub_4946d0(*(edi_5 i+ 0x5c), data_8c3ac8, 0)
    005d52a8                                  if (eax_11 != 0)
    005d52ae                                      sub_5bf9e0(eax_11)
    005d52b5                              var_4.b = 0
    005d52b3                              if (edi_5 != 0)
    005d52bf                                  var_9c = 0xffffffff
    005d52ce                      ebx_1.b = *(var_84_1 + 0x164)
    005d52d4                      int32_t* ebp_2 = nullptr
    005d52d6                      var_4c = ebx_1.b
    005d52da                      int32_t* var_78_1 = nullptr
    005d52e0                      var_4.b = 2
    005d52de                      float var_68
    005d52de                      float var_40
    005d52de                      if (ebx_1.b != 0)
    005d52ea                          void* ecx_9
    005d52ea                          void* edi_6
    005d52ea                          if (*(esi + 0x120) == 0)
    005d5341                              ecx_9 = *(*(esi + 0x20) + 0x5c)
    005d52f9                          else
    005d52f9                              var_9c = esi + 0x104
    005d52fe                              sub_4967a0(&var_40, var_9c)
    005d5307                              var_9c = &var_40
    005d5312                              edi_6 = *sub_5629b0(&var_68, var_9c)
    005d531d                              var_68 = 0f
    005d531b                              if (var_68 != 0)
    005d5323                                  var_9c = 0xffffffff
    005d52ea                              if (edi_6 == 0)
    005d5337                                  ebp_2 = nullptr
    005d5332                              else
    005d5332                                  ecx_9 = *(edi_6 + 0x5c)
    005d52ea                          if (*(esi + 0x120) == 0 || (*(esi + 0x120) != 0 && edi_6 != 0))
    005d5343                              var_9c = 0
    005d534f                              ebp_2 = sub_4946d0(ecx_9, data_8c3ac8, 0)
    005d5351                          var_78_1 = ebp_2
    005d5359                      var_9c = var_7c_1
    005d535a                      char eax_19 = sub_5adb10(var_9c)
    005d536f                      float var_64
    005d536f                      float var_60
    005d536f                      int32_t* var_5c
    005d536f                      void* var_58
    005d536f                      void var_28
    005d536f                      int32_t* ecx_10
    005d536f                      int16_t top
    005d536f                      if (*(esi + 0xe8) != 0 && eax_19 != 0)
    005d5362                          float var_34
    005d5362                          if (var_6c_1 == 0)
    005d5567                              var_54 = fconvert.s(fconvert.t(*(esi + 0xec)))
    005d5571                              long double x87_r6_29 = fconvert.t(var_54)
    005d557b                              var_54 = fconvert.s(fconvert.t(*(esi + 0xf0)) * x87_r6_29)
    005d5587                              var_58 = fconvert.s(fconvert.t(*(esi + 0xf4)) * x87_r6_29)
    005d5591                              var_5c = fconvert.s(x87_r6_29 * fconvert.t(*(esi + 0xf8)))
    005d5599                              var_34 = fconvert.s(fconvert.t(var_54))
    005d55a9                              top = 0
    005d55ad                              void* edi_9 = *(*(esi + 0x20) + 0x5c)
    005d55b0                              if ((*(edi_9 + 0x18) & 1) == 0)
    005d55ba                                  void* ecx_15 = *(edi_9 + 0x5c)
    005d55bd                                  long double x87_r7_85
    005d55bd                                  if (ecx_15 == 0)
    005d56b6                                      *(edi_9 + 0x38) = fconvert.s(fconvert.t(*(edi_9 + 0x1c)))
    005d56bc                                      *(edi_9 + 0x3c) = fconvert.s(fconvert.t(*(edi_9 + 0x20)))
    005d56c2                                      *(edi_9 + 0x40) = fconvert.s(fconvert.t(*(edi_9 + 0x24)))
    005d56c8                                      *(edi_9 + 0x44) = fconvert.s(fconvert.t(*(edi_9 + 0x28)))
    005d56ce                                      *(edi_9 + 0x48) = fconvert.s(fconvert.t(*(edi_9 + 0x2c)))
    005d56d4                                      *(edi_9 + 0x4c) = fconvert.s(fconvert.t(*(edi_9 + 0x30)))
    005d56d7                                      x87_r7_85 = fconvert.t(*(edi_9 + 0x34))
    005d55c5                                  else
    005d55c5                                      float* eax_24 = sub_4698a0(ecx_15)
    005d55cc                                      var_9c = eax_24
    005d55d6                                      float* eax_26 = sub_4aee20(&var_28, edi_9 + 0x2c, var_9c)
    005d55e3                                      var_64 = fconvert.s(fconvert.t(*(eax_24 + 0x10)) + fconvert.t(*eax_26))
    005d55ed                                      var_68 = fconvert.s(fconvert.t(*(eax_24 + 0x14)) + fconvert.t(*(eax_26 + 4)))
    005d55f7                                      float var_70_1 = fconvert.s(fconvert.t(*(eax_24 + 0x18)) + fconvert.t(*(eax_26 + 8)))
    005d560f                                      long double x87_r7_62 = (fconvert.t(*(eax_24 + 0xc)) * fconvert.t(*(edi_9 + 0x1c))) + (fconvert.t(*eax_24) * fconvert.t(*(edi_9 + 0x28))) + (fconvert.t(*(edi_9 + 0x24)) * fconvert.t(*(eax_24 + 4)))
    005d5619                                      var_54 = fconvert.s(x87_r7_62 - (fconvert.t(*(edi_9 + 0x20)) * fconvert.t(*(eax_24 + 8))))
    005d5631                                      long double x87_r7_67 = (fconvert.t(*(eax_24 + 0xc)) * fconvert.t(*(edi_9 + 0x20))) + (fconvert.t(*(edi_9 + 0x28)) * fconvert.t(*(eax_24 + 4))) + (fconvert.t(*(eax_24 + 8)) * fconvert.t(*(edi_9 + 0x1c)))
    005d563b                                      var_58 = fconvert.s(x87_r7_67 - (fconvert.t(*eax_24) * fconvert.t(*(edi_9 + 0x24))))
    005d5653                                      long double x87_r7_72 = (fconvert.t(*(edi_9 + 0x28)) * fconvert.t(*(eax_24 + 8))) + (fconvert.t(*(eax_24 + 0xc)) * fconvert.t(*(edi_9 + 0x24))) + (fconvert.t(*eax_24) * fconvert.t(*(edi_9 + 0x20)))
    005d565d                                      var_5c = fconvert.s(x87_r7_72 - (fconvert.t(*(eax_24 + 4)) * fconvert.t(*(edi_9 + 0x1c))))
    005d5675                                      long double x87_r7_77 = ((fconvert.t(*(edi_9 + 0x28)) * fconvert.t(*(eax_24 + 0xc))) - (fconvert.t(*eax_24) * fconvert.t(*(edi_9 + 0x1c)))) - (fconvert.t(*(eax_24 + 4)) * fconvert.t(*(edi_9 + 0x20)))
    005d567f                                      var_60 = fconvert.s(x87_r7_77 - (fconvert.t(*(edi_9 + 0x24)) * fconvert.t(*(eax_24 + 8))))
    005d5687                                      *(edi_9 + 0x38) = fconvert.s(fconvert.t(var_54))
    005d568e                                      *(edi_9 + 0x3c) = fconvert.s(fconvert.t(var_58))
    005d5695                                      *(edi_9 + 0x40) = fconvert.s(fconvert.t(var_5c))
    005d569c                                      *(edi_9 + 0x44) = fconvert.s(fconvert.t(var_60))
    005d56a3                                      *(edi_9 + 0x48) = fconvert.s(fconvert.t(var_64))
    005d56aa                                      *(edi_9 + 0x4c) = fconvert.s(fconvert.t(var_68))
    005d56ad                                      x87_r7_85 = fconvert.t(var_70_1)
    005d56da                                  *(edi_9 + 0x50) = fconvert.s(x87_r7_85)
    005d56da                                  top = 0
    005d56dd                                  *(edi_9 + 0x18) = *(edi_9 + 0x18) | 1
    005d56ed                              var_9c = &var_34
    005d56f6                              eax = sub_4dddf0(var_80_1, var_84_1 + 0x78, edi_9 + 0x38, var_9c)
    005d5382                          else
    005d5382                              uint32_t edi_7 = var_80_1
    005d5386                              ecx_10 = *(edi_7 + 0x20c)
    005d5362                              if (ecx_10 != 0)
    005d5399                                  var_9c = edi_7
    005d539b                                  eax = *(*ecx_10 + 4)(esi, var_9c)
    005d53a5                                  if (eax.b == 0 && ebx_1.b != 0)
    005d53b6                                      var_54 = fconvert.s(fconvert.t(*(esi + 0xec)))
    005d53ca                                      var_34 = fconvert.s(fconvert.t(*(esi + 0xf0)) * fconvert.t(var_54))
    005d53ce                                      *(esi + 0xf4)
    005d53da                                      *(esi + 0xf8)
    005d53e4                                      void* esi_1 = *(*(esi + 0x20) + 0x5c)
    005d53e7                                      if ((*(esi_1 + 0x18) & 1) == 0)
    005d53f1                                          void* ecx_12 = *(esi_1 + 0x5c)
    005d53f4                                          long double x87_r7_38
    005d53f4                                          if (ecx_12 == 0)
    005d54fb                                              *(esi_1 + 0x38) = fconvert.s(fconvert.t(*(esi_1 + 0x1c)))
    005d5501                                              *(esi_1 + 0x3c) = fconvert.s(fconvert.t(*(esi_1 + 0x20)))
    005d5507                                              *(esi_1 + 0x40) = fconvert.s(fconvert.t(*(esi_1 + 0x24)))
    005d550d                                              *(esi_1 + 0x44) = fconvert.s(fconvert.t(*(esi_1 + 0x28)))
    005d5513                                              *(esi_1 + 0x48) = fconvert.s(fconvert.t(*(esi_1 + 0x2c)))
    005d5519                                              *(esi_1 + 0x4c) = fconvert.s(fconvert.t(*(esi_1 + 0x30)))
    005d551c                                              x87_r7_38 = fconvert.t(*(esi_1 + 0x34))
    005d53fc                                          else
    005d53fc                                              void* eax_21 = sub_4698a0(ecx_12)
    005d5403                                              var_9c = eax_21
    005d540d                                              float* eax_22 = sub_4aee20(&var_28, esi_1 + 0x2c, var_9c)
    005d541a                                              var_40 = fconvert.s(fconvert.t(*(eax_21 + 0x10)) + fconvert.t(*eax_22))
    005d5424                                              float var_3c_1 = fconvert.s(fconvert.t(*(eax_21 + 0x14)) + fconvert.t(*(eax_22 + 4)))
    005d542e                                              float var_38_1 = fconvert.s(fconvert.t(*(eax_21 + 0x18)) + fconvert.t(*(eax_22 + 8)))
    005d5445                                              long double x87_r7_15 = (fconvert.t(*(eax_21 + 0xc)) * fconvert.t(*(esi_1 + 0x1c))) + (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*eax_21)) + (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(eax_21 + 4)))
    005d544f                                              var_1c = fconvert.s(x87_r7_15 - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(eax_21 + 8))))
    005d5467                                              long double x87_r7_20 = (fconvert.t(*(eax_21 + 4)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(eax_21 + 0xc)) * fconvert.t(*(esi_1 + 0x20))) + (fconvert.t(*(eax_21 + 8)) * fconvert.t(*(esi_1 + 0x1c)))
    005d5470                                              float var_18_2 = fconvert.s(x87_r7_20 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*eax_21)))
    005d548a                                              long double x87_r7_25 = (fconvert.t(*(eax_21 + 0xc)) * fconvert.t(*(esi_1 + 0x24))) + (fconvert.t(*(eax_21 + 8)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*eax_21))
    005d5494                                              float var_14_2 = fconvert.s(x87_r7_25 - (fconvert.t(*(eax_21 + 4)) * fconvert.t(*(esi_1 + 0x1c))))
    005d54ae                                              long double x87_r7_30 = ((fconvert.t(*(eax_21 + 0xc)) * fconvert.t(*(esi_1 + 0x28))) - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*eax_21))) - (fconvert.t(*(eax_21 + 4)) * fconvert.t(*(esi_1 + 0x20)))
    005d54b8                                              char var_10
    005d54b8                                              var_10.d = fconvert.s(x87_r7_30 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(eax_21 + 8))))
    005d54c3                                              *(esi_1 + 0x38) = fconvert.s(fconvert.t(var_1c))
    005d54cd                                              *(esi_1 + 0x3c) = fconvert.s(fconvert.t(var_18_2))
    005d54d7                                              *(esi_1 + 0x40) = fconvert.s(fconvert.t(var_14_2))
    005d54e1                                              *(esi_1 + 0x44) = fconvert.s(fconvert.t(var_10.d))
    005d54e8                                              *(esi_1 + 0x48) = fconvert.s(fconvert.t(var_40))
    005d54ef                                              *(esi_1 + 0x4c) = fconvert.s(fconvert.t(var_3c_1))
    005d54f2                                              x87_r7_38 = fconvert.t(var_38_1)
    005d551f                                          edi_7 = var_80_1
    005d5523                                          *(esi_1 + 0x50) = fconvert.s(x87_r7_38)
    005d5526                                          *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    005d5532                                      var_9c = &var_34
    005d553d                                      eax = sub_4dddf0(edi_7, var_84_1 + 0x78, esi_1 + 0x38, var_9c)
    005d554a                                      if (eax.b != 0 && ebp_2 != 0)
    005d5554                                          eax = sub_5bf9e0(ebp_2)
    005d5362                      if ((((*(esi + 0xe8) == 0 || (*(esi + 0xe8) != 0 && eax_19 == 0)) || (((*(esi + 0xe8) != 0 && eax_19 != 0) && var_6c_1 != 0) && ecx_10 == 0)) || ((((*(esi + 0xe8) != 0 && eax_19 != 0) && var_6c_1 != 0) && ecx_10 != 0) && eax.b != 0)) || (((*(esi + 0xe8) != 0 && eax_19 != 0) && var_6c_1 == 0) && eax.b != 0))
    005d5707                          if (*(esi + 0x20) == 0)
    005d5707                              goto label_5d5719
    005d570b                          sub_5cdd50(esi)
    005d5714                          sub_5c49e0(var_84_1)
    005d5719                          label_5d5719:
    005d5719                          char var_86_1 = 0
    005d571e                          int32_t var_50 = 0xffffffff
    005d5726                          char var_85_1 = 0
    005d5730                          uint32_t ebp_7
    005d5730                          if (sub_45f740() == 0)
    005d5882                              ebp_7 = var_7c_1
    005d5738                          else
    005d5738                              int32_t ebx_2 = esi + 0x44
    005d573b                              var_9c = 0
    005d574a                              char edx_10 = *(esi + 0xd5)
    005d5751                              int32_t* edi_11 = *sub_70f5f0(ebx_2, nullptr)
    005d5753                              void* ebp_4 = *(esi + 0x20)
    005d5756                              var_9c = *(esi + 0xd8)
    005d576d                              arg4 = sub_711690(edi_11, ebp_4, var_80_1, sub_5aa8d0(esi, &var_28), edx_10, var_9c)
    005d576d                              top = 0xffff
    005d5774                              *(*edi_11 + 4)()
    005d5781                              int32_t eax_34
    005d5781                              int32_t edx_12
    005d5781                              edx_12:eax_34 = sx.q(var_7c_1)
    005d5787                              char ebp_6 = var_7c_1.b & 0x1f
    005d5795                              int32_t edi_13 = (eax_34 + (edx_12 & 0x1f)) s>> 5
    005d5798                              if ((*((edi_13 << 2) + 0x8fa304) & (1 << ebp_6)) != 0)
    005d57a1                                  var_9c = 6
    005d57aa                                  int32_t* ecx_27 = *sub_70f5f0(ebx_2, 6)
    005d57ac                                  var_54 = ecx_27
    005d57b0                                  sub_731bd0(ecx_27)
    005d57bb                                  *(*var_54 + 4)()
    005d57d6                              if (*(var_84_1 + 0x166) != 0 && (*((edi_13 << 2) + 0x8fa2fc) & (1 << ebp_6)) != 0)
    005d57df                                  var_9c = 4
    005d57e8                                  int32_t* edi_14 = *sub_70f5f0(ebx_2, 4)
    005d57ea                                  *(esi + 0x20)
    005d57f0                                  var_9c = esi + 0x28
    005d57f4                                  sub_730410(edi_14, arg4)
    005d57f4                                  top = 0
    005d57fb                                  *(*edi_14 + 4)()
    005d5802                              var_9c = 7
    005d580b                              int32_t* edi_15 = *sub_70f5f0(ebx_2, 7)
    005d580f                              sub_731b70(edi_15)
    005d5816                              *(*edi_15 + 4)()
    005d581d                              if (*(esi + 0x178) != 0)
    005d5828                                  arg1 = sub_5c97d0(esi)
    005d582d                              ebp_7 = var_7c_1
    005d5831                              if (ebp_7 == 8)
    005d5836                                  if (*(esi + 0x88) == 0)
    005d5844                                      *(esi + 0x88) = sub_5a4ff0()
    005d584a                                  var_9c = 4
    005d5851                                  void* eax_45 = sub_5879f0(data_8f9ce0, 4)
    005d5858                                  *eax_45 = 2
    005d585e                                  *(eax_45 + 4) = esi
    005d5867                                  *(eax_45 + 0xc) = *(esi + 0x88)
    005d5875                                  var_9c = eax_45
    005d5876                                  sub_70d7a0(edi_4, var_9c)
    005d587b                                  var_85_1 = 1
    005d5886                          void* ebx_3 = var_84_1
    005d588a                          float eax_46 = *(ebx_3 + 0xc8)
    005d5890                          if (eax_46 u> 0)
    005d5898                              int32_t* ecx_41 = nullptr
    005d589a                              int32_t var_70_2 = 0
    005d589e                              var_68 = 0f
    005d58a2                              var_54 = eax_46
    005d58be                              while (true)
    005d58be                                  int32_t* edi_18 = *(ebx_3 + 0xd0) i+ var_68
    005d58c2                                  int32_t var_b4
    005d58c2                                  char eax_52
    005d58c2                                  if (*(esi + 0x20) != 0)
    005d58c8                                      int32_t eax_47 = *(edi_18 + 0x10)
    005d58d7                                      int32_t* eax_51 = *(((eax_47 + (eax_47 << 1)) << 5) + *(esi + 0x13c) + 0x5c)
    005d58da                                      if (eax_51 != 0)
    005d58de                                          ecx_41 = eax_51
    005d58e0                                          sub_5fc210(ecx_41)
    005d58c2                                      if (*(edi_18 + 8) != 0)
    005d58ef                                          eax_52 = sub_45f740()
    005d58e5                                      if (*(edi_18 + 8) == 0 || (*(edi_18 + 8) != 0 && eax_52 == 0))
    005d58c2                                          if (var_86_1 == 0)
    005d59d2                                              var_9c = var_80_1
    005d59d5                                              var_86_1 = 1
    005d59da                                              arg1, ecx_41 = sub_5c9110(arg1, esi, arg3, var_9c)
    005d59df                                          var_9c = ecx_41
    005d59e6                                          var_58 = &var_9c
    005d59ea                                          var_9c = 0
    005d59f0                                          var_9c = var_78_1
    005d5a0b                                          var_b4 = &var_40
    005d5a12                                          var_58 = &var_b4
    005d5a16                                          var_b4 = 0
    005d5a1d                                          var_b4 = var_80_1
    005d5a22                                          void var_48
    005d5a22                                          void var_44
    005d5a22                                          arg1, ecx_41 = sub_5d2a60(arg1, esi, arg3, arg4, edi_18, ebp_7, var_b4, (var_4c.d).b, &var_50, &var_40, &var_44, &var_48, var_9c)
    005d58c2                                  if (*(esi + 0x20) == 0 || ((*(esi + 0x20) != 0 && *(edi_18 + 8) != 0) && eax_52 != 0))
    005d58c2                                      if (*(ebx_3 + 0x164) != 0 || (*(ebx_3 + 0x164) == 0 && *(edi_18 + 0x78) == 0))
    005d59af                                          var_9c = var_6c_1.d
    005d59bd                                          var_b4 = ebp_7
    005d59c0                                          ecx_41 = sub_5cebe0(esi, arg4, var_b4, var_80_1, var_78_1, edi_18, *(esi + 0x40) + var_70_2, edi_4, var_9c.b)
    005d59c0                                          top = top + 1
    005d58c2                                      if (*(ebx_3 + 0x164) == 0 && *(edi_18 + 0x78) != 0)
    005d591a                                          int32_t* ebp_9 = *(esi + 0x40) + var_70_2
    005d5920                                          var_60 = 0f
    005d5924                                          var_64 = 0f
    005d5928                                          var_58 = nullptr
    005d592c                                          var_5c = nullptr
    005d5933                                          var_9c = *(esi + 0x20)
    005d593b                                          var_9c = sub_5d8540(edi_4)
    005d595d                                          var_b4 = edi_4
    005d5964                                          ecx_41 = sub_5cc790(esi, arg4, arg4, var_7c_1, var_80_1, edi_18, ebp_9, var_b4, &var_60, &var_64, &var_58, &var_5c, &var_4c)
    005d5964                                          top = top + 1
    005d5969                                          if (edi_4 != 0)
    005d5975                                              float edx_20 = var_60
    005d597b                                              *(edi_4 + 0xb8) = *(edi_4 + 0xb8) i+ var_64
    005d5981                                              *(edi_4 + 0xbc) = *(edi_4 + 0xbc) i+ edx_20
    005d5987                                              ecx_41 = var_5c
    005d598b                                              void* edx_21 = var_58
    005d598f                                              *(edi_4 + 0xc0) = *(edi_4 + 0xc0) + ecx_41
    005d5995                                              *(edi_4 + 0xc4) = *(edi_4 + 0xc4) + edx_21
    005d5a27                                  var_68 = var_68 i+ 0x158
    005d5a2f                                  var_70_2 = var_70_2 + 0x78
    005d5a34                                  var_54 = var_54 i- 1
    005d5a39                                  if (var_54 == 1)
    005d5a39                                      break
    005d58b0                                  ebx_3 = var_84_1
    005d58b4                                  ebp_7 = var_7c_1
    005d5a3f                          if (var_85_1 != 0)
    005d5a46                              var_9c = 4
    005d5a4d                              void* eax_59 = sub_5879f0(data_8f9ce0, 4)
    005d5a54                              *eax_59 = 3
    005d5a5a                              *(eax_59 + 4) = esi
    005d5a65                              *(eax_59 + 0xc) = *(esi + 0x88)
    005d5a71                              var_9c = eax_59
    005d5a72                              sub_70d7a0(edi_4, var_9c)
    005d5a77                          var_9c = 0
    005d5a79                          eax = sub_5116b0(0)
    005d5a8b  *fsbase = var_c
    005d5a99  return eax

-----------------------------------------------------


int32_t sub_744610(void* arg1)

    00744622  int32_t var_8
    00744622  int32_t eax = sub_597100(arg1, 1, &var_8)
    00744627  int32_t esi = var_8
    00744634  int32_t eax_1 = sub_5972f0(arg1, 2, 1)
    0074463c  if (eax_1 s< 0)
    00744640      eax_1 = eax_1 + esi + 1
    00744644  int32_t esi_1 = var_8
    0074464c  int32_t ebx
    0074464c  ebx.b = eax_1 s< 0
    00744652  int32_t ebx_2 = (ebx - 1) & eax_1
    00744658  int32_t eax_2 = sub_5972f0(arg1, 3, ebx_2)
    00744660  if (eax_2 s< 0)
    00744664      eax_2 = eax_2 + esi_1 + 1
    0074466c  int32_t ecx
    0074466c  ecx.b = eax_2 s< 0
    00744672  int32_t eax_3 = eax_2 & (ecx - 1)
    00744674  if (ebx_2 s<= 0)
    00744678      ebx_2 = 1
    0074467d  int32_t ecx_2 = var_8
    00744681  if (eax_3 u> ecx_2)
    00744685      eax_3 = ecx_2
    00744693  if (ebx_2 s> eax_3)
    00744693      return 0
    00744698  int32_t esi_4 = (eax_3 - ebx_2) + 1
    0074469e  if (esi_4 + ebx_2 s<= eax_3)
    007446a8      sub_596770(arg1, "string slice too long")
    007446b8  sub_596800(arg1, esi_4, 0x816ce8)  {"string slice too long"}
    007446c2  if (esi_4 s> 0)
    007446ca      void* ebx_3 = ebx_2 + eax + 0xffffffff
    007446ce      int32_t edi_1 = 0
    007446d6      do
    007446d6          sub_5959d0(arg1, zx.d(*(ebx_3 + edi_1)))
    007446db          edi_1 = edi_1 + 1
    007446db      while (edi_1 s< esi_4)
    007446ee  return esi_4


-----------------------------------------------------------------------------

void* __stdcall sub_4ab350(void* arg1 @ ecx, void* arg2)

    004ab35d  int32_t* fsbase
    004ab35d  int32_t var_c = *fsbase
    004ab35e  *fsbase = &var_c
    004ab37b  char var_4c = 0x2e
    004ab380  void* eax_1
    004ab380  char edx
    004ab380  eax_1, edx = sub_40a360(arg1, &var_4c, __gfids_table[0xbae7688].rvAddr+3, 1)
    004ab385  void* esi_3
    004ab385  if (eax_1 == 0xffffffff)
    004ab4a8      esi_3 = arg2
    004ab4af      *(esi_3 + 0x18) = 0xf
    004ab4b6      *(esi_3 + 0x14) = 0
    004ab4c0      *(esi_3 + 4) = 0
    004ab4c4      sub_40d8d0(esi_3, data_8951a0, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004ab390  else
    004ab390      void* edi_1 = eax_1 + 1
    004ab393      if (edi_1 u> *(arg1 + 0x14))
    004ab398          sub_761e75()
    004ab39d      void* esi_1
    004ab39d      if (*(arg1 + 0x18) u< 0x10)
    004ab3a8          esi_1 = arg1 + 4
    004ab3a3      else
    004ab3a3          esi_1 = *(arg1 + 4)
    004ab3ab      void* ecx = esi_1 + edi_1
    004ab3ae      char var_40
    004ab3ae      int32_t var_2c
    004ab3ae      char var_24
    004ab3ae      int32_t var_10
    004ab3ae      void* eax_4
    004ab3ae      int32_t ebx_1
    004ab3ae      if (ecx == 0)
    004ab3f5          var_2c = 0xf
    004ab3fd          var_40 = 0
    004ab402          void var_44
    004ab402          eax_4 = &var_44
    004ab40e          ebx_1 = 4
    004ab3b7      else
    004ab3b7          void* eax_2 = ecx
    004ab3b9          var_10 = 0xf
    004ab3c1          var_24 = 0
    004ab3c6          void* esi_2 = eax_2 + 1
    004ab3d0          do
    004ab3d0              edx = *eax_2
    004ab3d2              eax_2 = eax_2 + 1
    004ab3d2          while (edx != 0)
    004ab3e1          void var_28
    004ab3e1          sub_40d9b0(&var_28, ecx, eax_2 - esi_2)
    004ab3e6          eax_4 = &var_28
    004ab3ee          ebx_1 = 2
    004ab413      esi_3 = arg2
    004ab41a      *(esi_3 + 0x18) = 0xf
    004ab41d      *(esi_3 + 0x14) = 0
    004ab427      *(esi_3 + 4) = 0
    004ab42b      int32_t edx_1 = sub_40d8d0(esi_3, eax_4, nullptr, __gfids_table[0xbae7688].rvAddr+3)
    004ab430      if ((ebx_1.b & 4) != 0)
    004ab441          ebx_1 = ebx_1 & 0xfffffffb
    004ab444          if (var_2c u>= 0x10)
    004ab45a              sub_4a99b0(edx_1, 0xf, var_40.d)
    004ab470      int32_t var_4_2
    004ab470      var_4_2.b = 4
    004ab481      if ((ebx_1.b & 2) != 0 && var_10 u>= 0x10)
    004ab481          void* edx_2 = var_24.d
    004ab48e          int32_t edi
    004ab48e          sub_4a99b0(edx_2, edi, edx_2)
    004ab49b          *fsbase = var_c
    004ab4a5          return esi_3
    004ab4d1  *fsbase = var_c
    004ab4db  return esi_3


--------------------------------------------------------------------------------------------


void* __fastcall sub_61b720(void* arg1, void arg2 @ invalid, int32_t arg3 @ mxcsr, long double arg4 @ st0)

    0061b72d  int32_t* fsbase
    0061b72d  int32_t var_c = *fsbase
    0061b72e  *fsbase = &var_c
    0061b73e  void* ecx = *(arg1 + 0x58)
    0061b74b  long double x87_r7_1 = float.t(0)
    0061b74d  long double temp1 = fconvert.t(fconvert.s(fconvert.t(*(*(ecx + 0x60) + 0x20))))
    0061b74d  x87_r7_1 - temp1
    0061b751  void* eax_1
    0061b751  eax_1.w = (x87_r7_1 < temp1 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r7_1, temp1) ? 1 : 0 << 0xa) | ((x87_r7_1 == temp1 ? 1 : 0 << 0xe) | 0)))
    0061b753  if ((eax_1:1.b & 1) != 0)
    0061b75d      int32_t* esi_1 = *(ecx + 0x5c)
    0061b763      if (esi_1 != 0)
    0061b76a          sub_4d3a40(esi_1, 1)
    0061b791      void* var_48
    0061b791      sub_46fec0(*(*(arg1 + 0x58) + 0x60), &var_48)
    0061b796      int32_t* ebp_1 = nullptr
    0061b798      int32_t* var_80 = nullptr
    0061b7a5      int32_t var_4
    0061b7a5      var_4.b = 2
    0061b79f      int32_t* var_138
    0061b79f      float var_11c
    0061b79f      if (*(arg1 + 0xa0) != 0)
    0061b7af          int32_t* eax_4 = *(arg1 + 0xa8)
    0061b7b7          if (eax_4 == 0)
    0061b7b7              goto label_61b82d
    0061b7bb          if (*eax_4 == 0)
    0061b7bb              goto label_61b82d
    0061b7c8          sub_4967a0(&var_11c, arg1 + 0x8c)
    0061b7cd          int32_t* eax_5 = *(arg1 + 0xa8)
    0061b7d3          void* eax_6
    0061b7d3          if (eax_5 == 0)
    0061b7db              eax_6 = nullptr
    0061b7d7          else
    0061b7d7              eax_6 = *eax_5
    0061b7f6          var_4.b = 3
    0061b7fe          sub_4777a0(&var_80, sub_563680(eax_6, &var_138, &var_11c))
    0061b803          int32_t* eax_8 = var_138
    0061b809          var_4.b = 2
    0061b811          var_138 = nullptr
    0061b807          if (eax_8 != 0)
    0061b81a              sub_4d3a40(eax_8, 0xffffffff)
    0061b822          ebp_1 = var_80
    0061b82b          if (ebp_1 == 0)
    0061b82b              goto label_61b82d
    0061b82d      else
    0061b82d          label_61b82d:
    0061b82d          int32_t* eax_9 = *(arg1 + 0xa8)
    0061b837          if (eax_9 != 0 && *eax_9 != 0)
    0061b83b              int32_t* eax_10
    0061b83b              if (eax_9 == 0)
    0061b843                  eax_10 = nullptr
    0061b83f              else
    0061b83f                  eax_10 = *eax_9
    0061b845              eax_10 = eax_10 + 0x5c
    0061b850              sub_4777a0(&var_80, eax_10)
    0061b855              ebp_1 = var_80
    0061b863      bool var_105_1 = true
    0061b85c      if (*(arg1 + 0xdd) != 0)
    0061b871          var_105_1 = *(arg1 + 0xde) == 0
    0061b876      long double x87_r7_2 = float.t(0)
    0061b878      int32_t* eax_11 = *(arg1 + 0xa8)
    0061b880      float var_d0 = fconvert.s(x87_r7_2)
    0061b884      float var_cc_1 = fconvert.s(x87_r7_2)
    0061b88b      float var_c8_1 = fconvert.s(x87_r7_2)
    0061b898      float var_13c
    0061b898      float var_12c
    0061b898      float var_b8
    0061b898      float var_6c
    0061b898      if (eax_11 != 0 && *eax_11 != 0)
    0061b8a0          int32_t eax_12
    0061b8a0          if (eax_11 == 0)
    0061b8a8              eax_12 = 0
    0061b8a4          else
    0061b8a4              eax_12 = *eax_11
    0061b8b3          void* eax_13 = sub_4999d0(*(eax_12 + 0x5c), data_8c3ac8, 0)
    0061b8b8          if (eax_13 != 0)
    0061b8c0              sub_5edf30(eax_13, 1)
    0061b8c5          int32_t* eax_14 = *(arg1 + 0xa8)
    0061b8cb          void* eax_15
    0061b8cb          if (eax_14 == 0)
    0061b8d3              eax_15 = nullptr
    0061b8cf          else
    0061b8cf              eax_15 = *eax_14
    0061b8de          float eax_16
    0061b8de          int32_t ecx_9
    0061b8de          eax_16, ecx_9 = sub_5f0330(*(eax_15 + 0x5c), data_8c3ac8, 0)
    0061b8e3          var_11c = eax_16
    0061b8e9          var_4.b = 4
    0061b8e7          if (eax_16 != 0)
    0061b8fb              arg4 = sub_719ef0(eax_16, fconvert.s(float.t(0)))
    0061b900          if ((*(ebp_1 + 0x18) & 1) == 0)
    0061b90a              void* ecx_11 = *(ebp_1 + 0x5c)
    0061b90d              long double x87_r7_36
    0061b90d              if (ecx_11 == 0)
    0061ba05                  *(ebp_1 + 0x38) = fconvert.s(fconvert.t(*(ebp_1 + 0x1c)))
    0061ba0b                  *(ebp_1 + 0x3c) = fconvert.s(fconvert.t(*(ebp_1 + 0x20)))
    0061ba11                  *(ebp_1 + 0x40) = fconvert.s(fconvert.t(*(ebp_1 + 0x24)))
    0061ba17                  *(ebp_1 + 0x44) = fconvert.s(fconvert.t(*(ebp_1 + 0x28)))
    0061ba1d                  *(ebp_1 + 0x48) = fconvert.s(fconvert.t(*(ebp_1 + 0x2c)))
    0061ba23                  *(ebp_1 + 0x4c) = fconvert.s(fconvert.t(*(ebp_1 + 0x30)))
    0061ba26                  x87_r7_36 = fconvert.t(*(ebp_1 + 0x34))
    0061b915              else
    0061b915                  void* eax_17 = sub_4698a0(ecx_11)
    0061b929                  float* eax_19 = sub_4aee20(&var_b8, ebp_1 + 0x2c, eax_17)
    0061b936                  float var_f0_1 = fconvert.s(fconvert.t(*(eax_17 + 0x10)) + fconvert.t(*eax_19))
    0061b940                  var_12c = fconvert.s(fconvert.t(*(eax_17 + 0x14)) + fconvert.t(*(eax_19 + 4)))
    0061b94a                  var_13c = fconvert.s(fconvert.t(*(eax_17 + 0x18)) + fconvert.t(*(eax_19 + 8)))
    0061b961                  long double x87_r7_13 = (fconvert.t(*eax_17) * fconvert.t(*(ebp_1 + 0x28))) + (fconvert.t(*(eax_17 + 0xc)) * fconvert.t(*(ebp_1 + 0x1c))) + (fconvert.t(*(ebp_1 + 0x24)) * fconvert.t(*(eax_17 + 4)))
    0061b983                  long double x87_r7_18 = (fconvert.t(*(ebp_1 + 0x28)) * fconvert.t(*(eax_17 + 4))) + (fconvert.t(*(ebp_1 + 0x20)) * fconvert.t(*(eax_17 + 0xc))) + (fconvert.t(*(eax_17 + 8)) * fconvert.t(*(ebp_1 + 0x1c)))
    0061b98c                  var_138 = fconvert.s(x87_r7_18 - (fconvert.t(*eax_17) * fconvert.t(*(ebp_1 + 0x24))))
    0061b9a3                  long double x87_r7_23 = (fconvert.t(*(eax_17 + 8)) * fconvert.t(*(ebp_1 + 0x28))) + (fconvert.t(*(eax_17 + 0xc)) * fconvert.t(*(ebp_1 + 0x24))) + (fconvert.t(*(ebp_1 + 0x20)) * fconvert.t(*eax_17))
    0061b9ad                  float var_10c_1 = fconvert.s(x87_r7_23 - (fconvert.t(*(ebp_1 + 0x1c)) * fconvert.t(*(eax_17 + 4))))
    0061b9c4                  long double x87_r7_28 = ((fconvert.t(*(ebp_1 + 0x28)) * fconvert.t(*(eax_17 + 0xc))) - (fconvert.t(*eax_17) * fconvert.t(*(ebp_1 + 0x1c)))) - (fconvert.t(*(ebp_1 + 0x20)) * fconvert.t(*(eax_17 + 4)))
    0061b9ce                  float var_f8_1 = fconvert.s(x87_r7_28 - (fconvert.t(*(eax_17 + 8)) * fconvert.t(*(ebp_1 + 0x24))))
    0061b9d6                  *(ebp_1 + 0x38) = fconvert.s(fconvert.t(fconvert.s(x87_r7_13 - (fconvert.t(*(ebp_1 + 0x20)) * fconvert.t(*(eax_17 + 8))))))
    0061b9dd                  *(ebp_1 + 0x3c) = fconvert.s(fconvert.t(var_138))
    0061b9e4                  *(ebp_1 + 0x40) = fconvert.s(fconvert.t(var_10c_1))
    0061b9eb                  *(ebp_1 + 0x44) = fconvert.s(fconvert.t(var_f8_1))
    0061b9f2                  *(ebp_1 + 0x48) = fconvert.s(fconvert.t(var_f0_1))
    0061b9f9                  *(ebp_1 + 0x4c) = fconvert.s(fconvert.t(var_12c))
    0061b9fc                  x87_r7_36 = fconvert.t(var_13c)
    0061ba29              *(ebp_1 + 0x50) = fconvert.s(x87_r7_36)
    0061ba2c              *(ebp_1 + 0x18) = *(ebp_1 + 0x18) | 1
    0061ba43          float* eax_20 = sub_4aee20(&var_6c, arg1 + 0xac, ebp_1 + 0x38)
    0061ba50          var_4.b = 2
    0061ba58          var_13c = fconvert.s(fconvert.t(*(ebp_1 + 0x48)) + fconvert.t(*eax_20))
    0061ba62          var_12c = fconvert.s(fconvert.t(*(ebp_1 + 0x4c)) + fconvert.t(*(eax_20 + 4)))
    0061ba76          var_d0 = fconvert.s(fconvert.t(var_13c))
    0061ba7e          var_cc_1 = fconvert.s(fconvert.t(var_12c))
    0061ba89          var_c8_1 = fconvert.s(fconvert.t(fconvert.s(fconvert.t(*(ebp_1 + 0x50)) + fconvert.t(*(eax_20 + 8)))))
    0061baa4      float var_1c
    0061baa4      sub_4df4a0(var_48, &var_1c)
    0061baa9      long double x87_r7_52 = float.t(0)
    0061baab      int16_t eax_21
    0061baab      eax_21.b = *(arg1 + 0xde)
    0061bab8      long double x87_r6_25 = fconvert.t(var_1c)
    0061babf      char var_10d_1 = eax_21.b
    0061bac3      long double x87_r5_1 = fconvert.t(*(arg1 + 0x100))
    0061bac9      x87_r5_1 - x87_r6_25
    0061bacd      long double x87_r4_2
    0061bacd      long double x87_r4_3
    0061bacd      long double x87_r5_3
    0061bacd      long double x87_r5_4
    0061bacd      if (((x87_r5_1 < x87_r6_25 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r5_1, x87_r6_25) ? 1 : 0 << 0xa) | ((x87_r5_1 == x87_r6_25 ? 1 : 0 << 0xe) | 0x3000))):1.b & 0x41) != 0)
    0061bad8          long double x87_r4_1 = float.t(1)
    0061badc          x87_r5_3 = x87_r4_1 - fconvert.t(*(arg1 + 0x100))
    0061bade          x87_r4_2 = x87_r6_25
    0061bade          x87_r6_25 = x87_r4_1
    0061bae0          x87_r4_2 - x87_r5_3
    0061bacd          if (((x87_r4_2 < x87_r5_3 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r4_2, x87_r5_3) ? 1 : 0 << 0xa) | ((x87_r4_2 == x87_r5_3 ? 1 : 0 << 0xe) | 0x3000))):1.b & 0x41) != 0)
    0061bae9              float var_18
    0061bae9              x87_r5_4 = fconvert.t(var_18)
    0061baf0              x87_r4_3 = fconvert.t(*(arg1 + 0x104))
    0061baf6              x87_r4_3 - x87_r5_4
    0061bacd              if (((x87_r4_3 < x87_r5_4 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r4_3, x87_r5_4) ? 1 : 0 << 0xa) | ((x87_r4_3 == x87_r5_4 ? 1 : 0 << 0xe) | 0x2800))):1.b & 0x41) != 0)
    0061bb05                  long double x87_r6_26 = x87_r6_25 - fconvert.t(*(arg1 + 0x104))
    0061bb07                  x87_r5_4 - x87_r6_26
    0061bb0e                  if (((x87_r5_4 < x87_r6_26 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r5_4, x87_r6_26) ? 1 : 0 << 0xa) | ((x87_r5_4 == x87_r6_26 ? 1 : 0 << 0xe) | 0x3800))):1.b & 0x41) == 0)
    0061bb0e                      goto label_61bb16
    0061bacd      if ((((x87_r5_1 < x87_r6_25 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r5_1, x87_r6_25) ? 1 : 0 << 0xa) | ((x87_r5_1 == x87_r6_25 ? 1 : 0 << 0xe) | 0x3000))):1.b & 0x41) == 0 || (((x87_r5_1 < x87_r6_25 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r5_1, x87_r6_25) ? 1 : 0 << 0xa) | ((x87_r5_1 == x87_r6_25 ? 1 : 0 << 0xe) | 0x3000))):1.b & 0x41) != 0 && ((x87_r4_2 < x87_r5_3 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r4_2, x87_r5_3) ? 1 : 0 << 0xa) | ((x87_r4_2 == x87_r5_3 ? 1 : 0 << 0xe) | 0x3000))):1.b & 0x41) == 0)) || ((((x87_r5_1 < x87_r6_25 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r5_1, x87_r6_25) ? 1 : 0 << 0xa) | ((x87_r5_1 == x87_r6_25 ? 1 : 0 << 0xe) | 0x3000))):1.b & 0x41) != 0 && ((x87_r4_2 < x87_r5_3 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r4_2, x87_r5_3) ? 1 : 0 << 0xa) | ((x87_r4_2 == x87_r5_3 ? 1 : 0 << 0xe) | 0x3000))):1.b & 0x41) != 0) && ((x87_r4_3 < x87_r5_4 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r4_3, x87_r5_4) ? 1 : 0 << 0xa) | ((x87_r4_3 == x87_r5_4 ? 1 : 0 << 0xe) | 0x2800))):1.b & 0x41) == 0))
    0061bb14          x87_r7_52 = x87_r6_25
    0061bb16          label_61bb16:
    0061bb16          var_10d_1 = 1
    0061bb1e      eax_1 = *(arg1 + 0x5c) + 0xffffffff
    0061bb21      switch (eax_1)
    0061bb39          case nullptr
    0061bb39              eax_1 = sub_4e3190(*(arg1 + 0xbc))
    0061bb4b          case 1, 2, 6, 7
    0061bb4b              eax_1 = sub_4e3150(*(arg1 + 0xbc))
    0061bbb4          case 3, 5
    0061bbb4              sub_4e3150(*(arg1 + 0xbc))
    0061bbc0              arg4 = sub_61a610(arg1, &var_d0)
    0061bbc5              var_13c = fconvert.s(arg4)
    0061bbc9              void* ecx_19 = *(arg1 + 0xbc)
    0061bbcf              long double x87_r7_57 = fconvert.t(var_13c)
    0061bbd4              *(arg1 + 0xf0) = fconvert.s(x87_r7_57)
    0061bbdd              eax_1 = sub_4e38e0(ecx_19, fconvert.s(x87_r7_57))
    0061bb55          case 4
    0061bb55              eax_1 = *(arg1 + 0xec)
    0061bb5b              if (eax_1 != 0)
    0061bb6e                  var_13c = fconvert.s(fconvert.t(*(eax_1 + 0x18)))
    0061bb77                  var_12c = fconvert.s(x87_r7_52)
    0061bb82                  arg4 = sub_463ba0(arg1 + 0xf0, &var_12c, &var_13c)
    0061bb87                  *(arg1 + 0xf0) = fconvert.s(arg4)
    0061bb92                  sub_4e3150(*(arg1 + 0xbc))
    0061bba3                  sub_4e38e0(*(arg1 + 0xbc), fconvert.s(fconvert.t(*(arg1 + 0xf0))))
    0061bc0e                  label_61bc0e:
    0061bc0e                  float var_f0_2 = fconvert.s(fconvert.t(*(*(arg1 + 0xb8) + 0xac)))
    0061bc0c                  float var_134
    0061bc0c                  int32_t eax_24
    0061bc0c                  if (*(arg1 + 0xfc) != 0)
    0061bc18                      float edi_4 = *(arg1 + 0xbc)
    0061bc1e                      if (edi_4 != 0)
    0061bc22                          *(edi_4 i+ 0x38) = *(edi_4 i+ 0x38) + 1
    0061bc26                      int32_t* ecx_20 = *(arg1 + 0xfc)
    0061bc2c                      var_11c = edi_4
    0061bc39                      var_4.b = 5
    0061bc36                      long double x87_r7_59
    0061bc36                      if (((*(edi_4 i+ 0x28) u>> 0x1a).b & 1) == 0)
    0061bc43                          x87_r7_59 = fconvert.t(var_f0_2)
    0061bc4c                      else
    0061bc4c                          long double x87_r7_60 = float.t(0)
    0061bc53                          var_138 = fconvert.s(x87_r7_60)
    0061bc57                          var_134 = fconvert.s(x87_r7_60)
    0061bc69                          float var_10c_2 = fconvert.s(fconvert.t(*(edi_4 i+ 0x1c)))
    0061bc74                          var_13c = fconvert.s(fconvert.t(*(edi_4 i+ 0x18)))
    0061bc50                          *(*ecx_20 + 0x14)(&var_138, &var_134, fconvert.s(fconvert.t(var_13c)), fconvert.s(fconvert.t(var_10c_2)))
    0061bc97                          var_13c = fconvert.s(fconvert.t(var_10c_2) * fconvert.t(var_134))
    0061bc9b                          long double x87_r7_67 = fconvert.t(var_13c)
    0061bc9f                          long double temp3_1 = fconvert.t(0.99999898672103882)
    0061bc9f                          x87_r7_67 - temp3_1
    0061bca5                          eax_24.w = (x87_r7_67 < temp3_1 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r7_67, temp3_1) ? 1 : 0 << 0xa) | ((x87_r7_67 == temp3_1 ? 1 : 0 << 0xe) | 0x3800)))
    0061bca7                          long double x87_r7_68
    0061bca7                          if ((eax_24:1.b & 0x41) != 0)
    0061bcb8                              long double x87_r5_5 = fconvert.t(var_f0_2)
    0061bcc6                              var_13c = fconvert.s(x87_r7_67 * (fconvert.t(var_138) - x87_r5_5))
    0061bcca                              x87_r7_68 = x87_r5_5 + fconvert.t(var_13c)
    0061bcae                          else
    0061bcae                              x87_r7_68 = fconvert.t(var_138)
    0061bcce                          var_13c = fconvert.s(x87_r7_68)
    0061bcd2                          x87_r7_59 = fconvert.t(var_13c)
    0061bcd6                      *(edi_4 i+ 0x38) = *(edi_4 i+ 0x38) + 0xffffffff
    0061bcda                      var_138 = fconvert.s(x87_r7_59)
    0061bce2                      var_4.b = 2
    0061bcf0                  long double x87_r7_72 = fconvert.t(*(arg1 + 0x64))
    0061bcf3                  long double x87_r6_32 = fconvert.t(*(arg1 + 0x60))
    0061bcf6                  long double x87_r5_7 = fconvert.t(*(arg1 + 0x68))
    0061bd09                  var_13c = fconvert.s((x87_r7_72 * x87_r7_72) + (x87_r6_32 * x87_r6_32) + (x87_r5_7 * x87_r5_7))
    0061bd0d                  long double x87_r7_76 = fconvert.t(var_13c)
    0061bd11                  long double temp2_1 = fconvert.t(9.9999997473787516e-05)
    0061bd11                  x87_r7_76 - temp2_1
    0061bd17                  eax_24.w = (x87_r7_76 < temp2_1 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r7_76, temp2_1) ? 1 : 0 << 0xa) | ((x87_r7_76 == temp2_1 ? 1 : 0 << 0xe) | 0)))
    0061bd19                  float var_124
    0061bd19                  float var_104
    0061bd19                  float var_100_1
    0061bd19                  long double x87_r7_79
    0061bd19                  if ((eax_24:1.b & 0x41) == 0)
    0061bd21                      var_104 = fconvert.s(fconvert.t(*(arg1 + 0x60)))
    0061bd28                      var_100_1 = fconvert.s(fconvert.t(*(arg1 + 0x64)))
    0061bd2c                      x87_r7_79 = fconvert.t(*(arg1 + 0x68))
    0061bd34                  else
    0061bd34                      if ((*(esi_1 + 0x18) & 1) == 0)
    0061bd3e                          void* ebp_2 = *(esi_1 + 0x5c)
    0061bd41                          long double x87_r7_112
    0061bd41                          if (ebp_2 == 0)
    0061be42                              *(esi_1 + 0x38) = fconvert.s(fconvert.t(*(esi_1 + 0x1c)))
    0061be48                              *(esi_1 + 0x3c) = fconvert.s(fconvert.t(*(esi_1 + 0x20)))
    0061be4e                              *(esi_1 + 0x40) = fconvert.s(fconvert.t(*(esi_1 + 0x24)))
    0061be54                              *(esi_1 + 0x44) = fconvert.s(fconvert.t(*(esi_1 + 0x28)))
    0061be5a                              *(esi_1 + 0x48) = fconvert.s(fconvert.t(*(esi_1 + 0x2c)))
    0061be60                              *(esi_1 + 0x4c) = fconvert.s(fconvert.t(*(esi_1 + 0x30)))
    0061be63                              x87_r7_112 = fconvert.t(*(esi_1 + 0x34))
    0061bd49                          else
    0061bd49                              if ((*(ebp_2 + 0x18) & 1) == 0)
    0061bd51                                  sub_475660(ebp_2)
    0061bd66                              float* eax_27 = sub_4aee20(&var_b8, esi_1 + 0x2c, ebp_2 + 0x38)
    0061bd73                              float var_10c_3 = fconvert.s(fconvert.t(*eax_27) + fconvert.t(*(ebp_2 + 0x48)))
    0061bd7d                              float var_f8_2 = fconvert.s(fconvert.t(*(ebp_2 + 0x4c)) + fconvert.t(*(eax_27 + 4)))
    0061bd87                              var_124 = fconvert.s(fconvert.t(*(ebp_2 + 0x50)) + fconvert.t(*(eax_27 + 8)))
    0061bd9e                              long double x87_r7_89 = (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(ebp_2 + 0x38))) + (fconvert.t(*(ebp_2 + 0x44)) * fconvert.t(*(esi_1 + 0x1c))) + (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(ebp_2 + 0x3c)))
    0061bda8                              var_13c = fconvert.s(x87_r7_89 - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(ebp_2 + 0x40))))
    0061bdc0                              long double x87_r7_94 = (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(ebp_2 + 0x44))) + (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(ebp_2 + 0x3c))) + (fconvert.t(*(ebp_2 + 0x40)) * fconvert.t(*(esi_1 + 0x1c)))
    0061bdc9                              var_12c = fconvert.s(x87_r7_94 - (fconvert.t(*(ebp_2 + 0x38)) * fconvert.t(*(esi_1 + 0x24))))
    0061bde0                              long double x87_r7_99 = (fconvert.t(*(ebp_2 + 0x44)) * fconvert.t(*(esi_1 + 0x24))) + (fconvert.t(*(ebp_2 + 0x40)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(ebp_2 + 0x38)))
    0061bdea                              float var_128_3 = fconvert.s(x87_r7_99 - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(ebp_2 + 0x3c))))
    0061be01                              long double x87_r7_104 = ((fconvert.t(*(ebp_2 + 0x44)) * fconvert.t(*(esi_1 + 0x28))) - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(ebp_2 + 0x38)))) - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(ebp_2 + 0x3c)))
    0061be0b                              var_138 = fconvert.s(x87_r7_104 - (fconvert.t(*(ebp_2 + 0x40)) * fconvert.t(*(esi_1 + 0x24))))
    0061be13                              *(esi_1 + 0x38) = fconvert.s(fconvert.t(var_13c))
    0061be1a                              *(esi_1 + 0x3c) = fconvert.s(fconvert.t(var_12c))
    0061be21                              *(esi_1 + 0x40) = fconvert.s(fconvert.t(var_128_3))
    0061be28                              *(esi_1 + 0x44) = fconvert.s(fconvert.t(var_138))
    0061be2f                              *(esi_1 + 0x48) = fconvert.s(fconvert.t(var_10c_3))
    0061be36                              *(esi_1 + 0x4c) = fconvert.s(fconvert.t(var_f8_2))
    0061be39                              x87_r7_112 = fconvert.t(var_124)
    0061be66                          *(esi_1 + 0x50) = fconvert.s(x87_r7_112)
    0061be69                          *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    0061be72                      var_104 = fconvert.s(fconvert.t(*(esi_1 + 0x48)))
    0061be79                      var_100_1 = fconvert.s(fconvert.t(*(esi_1 + 0x4c)))
    0061be7d                      x87_r7_79 = fconvert.t(*(esi_1 + 0x50))
    0061be83                  float var_fc_1 = fconvert.s(x87_r7_79)
    0061be87                  int32_t eax_29 = *(arg1 + 0x5c) + 0xfffffffd
    0061be8a                  float var_b4
    0061be8a                  float var_b0
    0061be8a                  float var_ac
    0061be8a                  float var_9c
    0061be8a                  float var_7c
    0061be8a                  float var_68
    0061be8a                  float var_60
    0061be8a                  float var_5c
    0061be8a                  float var_58
    0061be8a                  float var_54
    0061be8a                  if (eax_29 u<= 5)
    0061be93                      switch (eax_29)
    0061bf0d                          case 0
    0061bf0d                              void*** ebp_3 = arg1 + 0xa8
    0061bf1a                              if (sub_513670(ebp_3) != 0)
    0061bf29                                  void* ecx_29 = arg1 + 0x114
    0061bf22                                  long double x87_r7_174
    0061bf22                                  if (*(arg1 + 0x138) == 0)
    0061c111                                      arg2 = sub_4b16a0(arg2, ecx_29, arg3, &var_b8)
    0061c11d                                      void** ebp_7 = *ebp_3
    0061c120                                      var_11c = fconvert.s(fconvert.t(var_b8))
    0061c12d                                      float var_118_2 = fconvert.s(fconvert.t(var_b4))
    0061c138                                      float var_114_2 = fconvert.s(fconvert.t(var_b0))
    0061c124                                      void* ebp_8
    0061c124                                      if (ebp_7 == 0)
    0061c143                                          ebp_8 = nullptr
    0061c13e                                      else
    0061c13e                                          ebp_8 = *ebp_7
    0061c145                                      void* edi_9 = *(ebp_8 + 0x5c)
    0061c148                                      if ((*(edi_9 + 0x18) & 1) == 0)
    0061c152                                          void* ebp_9 = *(edi_9 + 0x5c)
    0061c155                                          long double x87_r7_210
    0061c155                                          if (ebp_9 == 0)
    0061c25a                                              *(edi_9 + 0x38) = fconvert.s(fconvert.t(*(edi_9 + 0x1c)))
    0061c260                                              *(edi_9 + 0x3c) = fconvert.s(fconvert.t(*(edi_9 + 0x20)))
    0061c266                                              *(edi_9 + 0x40) = fconvert.s(fconvert.t(*(edi_9 + 0x24)))
    0061c26c                                              *(edi_9 + 0x44) = fconvert.s(fconvert.t(*(edi_9 + 0x28)))
    0061c272                                              *(edi_9 + 0x48) = fconvert.s(fconvert.t(*(edi_9 + 0x2c)))
    0061c278                                              *(edi_9 + 0x4c) = fconvert.s(fconvert.t(*(edi_9 + 0x30)))
    0061c27b                                              x87_r7_210 = fconvert.t(*(edi_9 + 0x34))
    0061c15d                                          else
    0061c15d                                              if ((*(ebp_9 + 0x18) & 1) == 0)
    0061c165                                                  sub_475660(ebp_9)
    0061c17a                                              float* eax_36 = sub_4aee20(&var_ac, edi_9 + 0x2c, ebp_9 + 0x38)
    0061c187                                              var_138 = fconvert.s(fconvert.t(*eax_36) + fconvert.t(*(ebp_9 + 0x48)))
    0061c191                                              float var_10c_5 = fconvert.s(fconvert.t(*(ebp_9 + 0x4c)) + fconvert.t(*(eax_36 + 4)))
    0061c19b                                              float var_f8_4 = fconvert.s(fconvert.t(*(ebp_9 + 0x50)) + fconvert.t(*(eax_36 + 8)))
    0061c1b3                                              long double x87_r7_187 = (fconvert.t(*(edi_9 + 0x28)) * fconvert.t(*(ebp_9 + 0x38))) + (fconvert.t(*(edi_9 + 0x1c)) * fconvert.t(*(ebp_9 + 0x44))) + (fconvert.t(*(edi_9 + 0x24)) * fconvert.t(*(ebp_9 + 0x3c)))
    0061c1bd                                              var_134 = fconvert.s(x87_r7_187 - (fconvert.t(*(edi_9 + 0x20)) * fconvert.t(*(ebp_9 + 0x40))))
    0061c1d5                                              long double x87_r7_192 = (fconvert.t(*(edi_9 + 0x28)) * fconvert.t(*(ebp_9 + 0x3c))) + (fconvert.t(*(edi_9 + 0x20)) * fconvert.t(*(ebp_9 + 0x44))) + (fconvert.t(*(ebp_9 + 0x40)) * fconvert.t(*(edi_9 + 0x1c)))
    0061c1df                                              var_13c = fconvert.s(x87_r7_192 - (fconvert.t(*(ebp_9 + 0x38)) * fconvert.t(*(edi_9 + 0x24))))
    0061c1f7                                              long double x87_r7_197 = (fconvert.t(*(ebp_9 + 0x40)) * fconvert.t(*(edi_9 + 0x28))) + (fconvert.t(*(ebp_9 + 0x44)) * fconvert.t(*(edi_9 + 0x24))) + (fconvert.t(*(edi_9 + 0x20)) * fconvert.t(*(ebp_9 + 0x38)))
    0061c201                                              var_12c = fconvert.s(x87_r7_197 - (fconvert.t(*(edi_9 + 0x1c)) * fconvert.t(*(ebp_9 + 0x3c))))
    0061c219                                              long double x87_r7_202 = ((fconvert.t(*(edi_9 + 0x28)) * fconvert.t(*(ebp_9 + 0x44))) - (fconvert.t(*(edi_9 + 0x1c)) * fconvert.t(*(ebp_9 + 0x38)))) - (fconvert.t(*(edi_9 + 0x20)) * fconvert.t(*(ebp_9 + 0x3c)))
    0061c223                                              float var_128_6 = fconvert.s(x87_r7_202 - (fconvert.t(*(ebp_9 + 0x40)) * fconvert.t(*(edi_9 + 0x24))))
    0061c22b                                              *(edi_9 + 0x38) = fconvert.s(fconvert.t(var_134))
    0061c232                                              *(edi_9 + 0x3c) = fconvert.s(fconvert.t(var_13c))
    0061c239                                              *(edi_9 + 0x40) = fconvert.s(fconvert.t(var_12c))
    0061c240                                              *(edi_9 + 0x44) = fconvert.s(fconvert.t(var_128_6))
    0061c247                                              *(edi_9 + 0x48) = fconvert.s(fconvert.t(var_138))
    0061c24e                                              *(edi_9 + 0x4c) = fconvert.s(fconvert.t(var_10c_5))
    0061c251                                              x87_r7_210 = fconvert.t(var_f8_4)
    0061c27e                                          *(edi_9 + 0x50) = fconvert.s(x87_r7_210)
    0061c281                                          *(edi_9 + 0x18) = *(edi_9 + 0x18) | 1
    0061c28c                                      var_134 = fconvert.s(fconvert.t(var_11c) + fconvert.t(*(edi_9 + 0x48)))
    0061c297                                      var_13c = fconvert.s(fconvert.t(*(edi_9 + 0x4c)) + fconvert.t(var_118_2))
    0061c29e                                      x87_r7_174 = fconvert.t(*(edi_9 + 0x50)) + fconvert.t(var_114_2)
    0061bf3d                                  else
    0061bf3d                                      arg2 = sub_4b16a0(arg2, ecx_29, arg3, &var_6c)
    0061bf4f                                      void** ebp_4 = *ebp_3
    0061bf54                                      var_13c = fconvert.s(fconvert.t(var_6c) + fconvert.t(*(arg1 + 0xac)))
    0061bf65                                      var_12c = fconvert.s(fconvert.t(*(arg1 + 0xb0)) + fconvert.t(var_68))
    0061bf7e                                      var_11c = fconvert.s(fconvert.t(var_13c))
    0061bf69                                      *(arg1 + 0xb4)
    0061bf52                                      void* ebp_5
    0061bf52                                      if (ebp_4 == 0)
    0061bf99                                          ebp_5 = nullptr
    0061bf94                                      else
    0061bf94                                          ebp_5 = *ebp_4
    0061bf9b                                      void* edi_7 = *(ebp_5 + 0x5c)
    0061bf9e                                      if ((*(edi_7 + 0x18) & 1) == 0)
    0061bfa8                                          void* ecx_30 = *(edi_7 + 0x5c)
    0061bfab                                          long double x87_r7_162
    0061bfab                                          if (ecx_30 == 0)
    0061c0a7                                              *(edi_7 + 0x38) = fconvert.s(fconvert.t(*(edi_7 + 0x1c)))
    0061c0ad                                              *(edi_7 + 0x3c) = fconvert.s(fconvert.t(*(edi_7 + 0x20)))
    0061c0b3                                              *(edi_7 + 0x40) = fconvert.s(fconvert.t(*(edi_7 + 0x24)))
    0061c0b9                                              *(edi_7 + 0x44) = fconvert.s(fconvert.t(*(edi_7 + 0x28)))
    0061c0bf                                              *(edi_7 + 0x48) = fconvert.s(fconvert.t(*(edi_7 + 0x2c)))
    0061c0c5                                              *(edi_7 + 0x4c) = fconvert.s(fconvert.t(*(edi_7 + 0x30)))
    0061c0c8                                              x87_r7_162 = fconvert.t(*(edi_7 + 0x34))
    0061bfb3                                          else
    0061bfb3                                              void* eax_32 = sub_4698a0(ecx_30)
    0061bfc7                                              float* eax_33 = sub_4aee20(&var_7c, edi_7 + 0x2c, eax_32)
    0061bfd4                                              float var_10c_4 = fconvert.s(fconvert.t(*(eax_32 + 0x10)) + fconvert.t(*eax_33))
    0061bfde                                              float var_f8_3 = fconvert.s(fconvert.t(*(eax_32 + 0x14)) + fconvert.t(*(eax_33 + 4)))
    0061bfe8                                              var_134 = fconvert.s(fconvert.t(*(eax_32 + 0x18)) + fconvert.t(*(eax_33 + 8)))
    0061c000                                              long double x87_r7_139 = (fconvert.t(*(eax_32 + 0xc)) * fconvert.t(*(edi_7 + 0x1c))) + (fconvert.t(*eax_32) * fconvert.t(*(edi_7 + 0x28))) + (fconvert.t(*(edi_7 + 0x24)) * fconvert.t(*(eax_32 + 4)))
    0061c00a                                              var_13c = fconvert.s(x87_r7_139 - (fconvert.t(*(edi_7 + 0x20)) * fconvert.t(*(eax_32 + 8))))
    0061c022                                              long double x87_r7_144 = (fconvert.t(*(eax_32 + 4)) * fconvert.t(*(edi_7 + 0x28))) + (fconvert.t(*(eax_32 + 0xc)) * fconvert.t(*(edi_7 + 0x20))) + (fconvert.t(*(edi_7 + 0x1c)) * fconvert.t(*(eax_32 + 8)))
    0061c02c                                              var_12c = fconvert.s(x87_r7_144 - (fconvert.t(*(edi_7 + 0x24)) * fconvert.t(*eax_32)))
    0061c044                                              long double x87_r7_149 = (fconvert.t(*(eax_32 + 0xc)) * fconvert.t(*(edi_7 + 0x24))) + (fconvert.t(*(eax_32 + 8)) * fconvert.t(*(edi_7 + 0x28))) + (fconvert.t(*(edi_7 + 0x20)) * fconvert.t(*eax_32))
    0061c04e                                              float var_128_5 = fconvert.s(x87_r7_149 - (fconvert.t(*(eax_32 + 4)) * fconvert.t(*(edi_7 + 0x1c))))
    0061c066                                              long double x87_r7_154 = ((fconvert.t(*(eax_32 + 0xc)) * fconvert.t(*(edi_7 + 0x28))) - (fconvert.t(*(edi_7 + 0x1c)) * fconvert.t(*eax_32))) - (fconvert.t(*(eax_32 + 4)) * fconvert.t(*(edi_7 + 0x20)))
    0061c070                                              var_138 = fconvert.s(x87_r7_154 - (fconvert.t(*(edi_7 + 0x24)) * fconvert.t(*(eax_32 + 8))))
    0061c078                                              *(edi_7 + 0x38) = fconvert.s(fconvert.t(var_13c))
    0061c07f                                              *(edi_7 + 0x3c) = fconvert.s(fconvert.t(var_12c))
    0061c086                                              *(edi_7 + 0x40) = fconvert.s(fconvert.t(var_128_5))
    0061c08d                                              *(edi_7 + 0x44) = fconvert.s(fconvert.t(var_138))
    0061c094                                              *(edi_7 + 0x48) = fconvert.s(fconvert.t(var_10c_4))
    0061c09b                                              *(edi_7 + 0x4c) = fconvert.s(fconvert.t(var_f8_3))
    0061c09e                                              x87_r7_162 = fconvert.t(var_134)
    0061c0cb                                          *(edi_7 + 0x50) = fconvert.s(x87_r7_162)
    0061c0ce                                          *(edi_7 + 0x18) = *(edi_7 + 0x18) | 1
    0061c0e3                                      float* eax_34 = sub_4aee20(&var_ac, &var_11c, edi_7 + 0x38)
    0061c0f0                                      var_134 = fconvert.s(fconvert.t(*(edi_7 + 0x48)) + fconvert.t(*eax_34))
    0061c0fa                                      var_13c = fconvert.s(fconvert.t(*(edi_7 + 0x4c)) + fconvert.t(*(eax_34 + 4)))
    0061c101                                      x87_r7_174 = fconvert.t(*(edi_7 + 0x50)) + fconvert.t(*(eax_34 + 8))
    0061c2a2                                  var_124 = fconvert.s(x87_r7_174)
    0061c2aa                                  var_104 = fconvert.s(fconvert.t(var_134))
    0061c2b2                                  var_100_1 = fconvert.s(fconvert.t(var_13c))
    0061c2ba                                  var_fc_1 = fconvert.s(fconvert.t(var_124))
    0061c353                          case 1, 3
    0061c353                              if (*(arg1 + 0xec) != 0 && sub_513670(arg1 + 0xa8) != 0)
    0061c381                                  var_134 = fconvert.s(fconvert.t(*(*(arg1 + 0xbc) + 0x18)))
    0061c388                                  long double x87_r7_233 = float.t(0)
    0061c38e                                  var_9c = fconvert.s(x87_r7_233)
    0061c3a9                                  var_11c = fconvert.s(x87_r7_233)
    0061c3af                                  *(**(arg1 + 0xf4) + 0x14)(&var_9c, &var_11c, fconvert.s(fconvert.t(var_134)), fconvert.s(float.t(1)))
    0061c3cf                                  var_104 = fconvert.s(fconvert.t(var_9c))
    0061c3da                                  var_100_1 = fconvert.s(fconvert.t(fconvert.s(x87_r7_233)))
    0061c3e5                                  var_fc_1 = fconvert.s(fconvert.t(fconvert.s(x87_r7_233)))
    0061c2c3                          case 2
    0061c2c3                              if (*(arg1 + 0xec) != 0)
    0061c2cf                                  int32_t* ecx_33 = *(arg1 + 0xf4)
    0061c2d5                                  if (ecx_33 != 0)
    0061c2e9                                      var_134 = fconvert.s(fconvert.t(*(*(arg1 + 0xbc) + 0x18)))
    0061c2f1                                      long double x87_r7_226 = float.t(0)
    0061c2f7                                      var_60 = fconvert.s(x87_r7_226)
    0061c2fe                                      var_5c = fconvert.s(x87_r7_226)
    0061c305                                      var_58 = fconvert.s(x87_r7_226)
    0061c30e                                      var_11c = fconvert.s(x87_r7_226)
    0061c314                                      *(*ecx_33 + 0x14)(&var_60, &var_11c, fconvert.s(fconvert.t(var_134)), fconvert.s(float.t(1)))
    0061c334                                      var_104 = fconvert.s(fconvert.t(var_60))
    0061c33f                                      var_100_1 = fconvert.s(fconvert.t(var_5c))
    0061c34a                                      var_fc_1 = fconvert.s(fconvert.t(var_58))
    0061bea7                          case 4
    0061bea7                              void* edi_6 = *sub_5630e0(*(arg1 + 0x58), &var_124)
    0061beab                              var_4.b = 6
    0061bea9                              int32_t ecx_25
    0061bea9                              if (edi_6 != 0)
    0061bebb                                  *(edi_6 + 0x3c) = *data_8ba770
    0061bebe                                  ecx_25 = *(edi_6 + 0x30)
    0061bea9                                  if (ecx_25 == 0 && *(edi_6 + 0x28) != ecx_25)
    0061beca                                      if ((*(edi_6 + 0x38) & 0x9000) != 0)
    0061beda                                          sub_41a5e0(edi_6, data_8951a0)
    0061bedf                                      ecx_25 = *(edi_6 + 0x30)
    0061bea9                              if (edi_6 == 0 || ((edi_6 != 0 && ecx_25 == 0) && *(edi_6 + 0x28) == ecx_25))
    0061bee4                                  ecx_25 = 0
    0061bef2                              sub_47ff50(ecx_25, data_8bdf58, &var_104, 1)
    0061befb                              var_4.b = 2
    0061bf03                              sub_495d10(&var_124)
    0061c3fc                          case 5
    0061c3fc                              sub_4967a0(&var_54, arg1 + 0x13c)
    0061c40e                              sub_5629b0(&var_138, &var_54)
    0061c416                              int32_t* ecx_38 = var_138
    0061c41c                              var_4.b = 7
    0061c41a                              if (ecx_38 != 0)
    0061c42a                                  void* eax_42 = sub_562240(ecx_38)
    0061c431                                  var_11c = fconvert.s(fconvert.t(*eax_42))
    0061c44b                                  float var_10c_6 = fconvert.s(fconvert.t(var_11c) - fconvert.t(var_d0))
    0061c45a                                  float var_f8_5 = fconvert.s(fconvert.t(fconvert.s(fconvert.t(*(eax_42 + 4)))) - fconvert.t(var_cc_1))
    0061c469                                  float var_128_7 = fconvert.s(fconvert.t(fconvert.s(fconvert.t(*(eax_42 + 8)))) - fconvert.t(var_c8_1))
    0061c46d                                  long double x87_r7_248 = fconvert.t(var_10c_6)
    0061c471                                  var_11c = fconvert.s(x87_r7_248)
    0061c475                                  long double x87_r6_108 = fconvert.t(var_f8_5)
    0061c479                                  float var_118_6 = fconvert.s(x87_r6_108)
    0061c47d                                  long double x87_r5_9 = fconvert.t(var_128_7)
    0061c481                                  float var_114_4 = fconvert.s(x87_r5_9)
    0061c48b                                  var_13c = fconvert.s(fconvert.t(*(arg1 + 0x158)))
    0061c49f                                  var_134 = fconvert.s((x87_r7_248 * x87_r7_248) + (x87_r6_108 * x87_r6_108) + (x87_r5_9 * x87_r5_9))
    0061c4a3                                  long double x87_r7_252 = fconvert.t(var_134)
    0061c4a7                                  sub_764280(x87_r7_252)
    0061c4ac                                  var_134 = fconvert.s(x87_r7_252)
    0061c4b4                                  var_134 = fconvert.s(fconvert.t(var_134))
    0061c4b8                                  long double x87_r7_254 = fconvert.t(9.99999968e-21f)
    0061c4be                                  long double x87_r6_112 = fconvert.t(var_134)
    0061c4c2                                  x87_r6_112 - x87_r7_254
    0061c4c4                                  (x87_r6_112 < x87_r7_254 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r6_112, x87_r7_254) ? 1 : 0 << 0xa) | ((x87_r6_112 == x87_r7_254 ? 1 : 0 << 0xe) | 0x3000))):1.b & 5
    0061c4c8                                  bool p_1 = unimplemented  {test ah, 0x5}
    0061c4cb                                  if (p_1)
    0061c4d1                                      var_134 = fconvert.s(fconvert.t(var_13c) / x87_r7_254)
    0061c4d9                                      long double x87_r6_113 = fconvert.t(var_134)
    0061c4e3                                      var_11c = fconvert.s(fconvert.t(var_10c_6) * x87_r6_113)
    0061c4ed                                      var_118_6 = fconvert.s(fconvert.t(var_f8_5) * x87_r6_113)
    0061c4f5                                      var_114_4 = fconvert.s(x87_r6_113 * fconvert.t(var_128_7))
    0061c509                                  var_134 = fconvert.s(fconvert.t(var_d0) + fconvert.t(var_11c))
    0061c518                                  var_13c = fconvert.s(fconvert.t(var_118_6) + fconvert.t(var_cc_1))
    0061c527                                  var_12c = fconvert.s(fconvert.t(var_114_4) + fconvert.t(var_c8_1))
    0061c52f                                  var_104 = fconvert.s(fconvert.t(var_134))
    0061c537                                  var_100_1 = fconvert.s(fconvert.t(var_13c))
    0061c53f                                  var_fc_1 = fconvert.s(fconvert.t(var_12c))
    0061c545                              var_4.b = 2
    0061c54d                              var_138 = nullptr
    0061c567                  var_134 = fconvert.s(fconvert.t(*(*(*(arg1 + 0x58) + 0x60) + 0x20)))
    0061c575                  var_134 = fconvert.s(fconvert.t(var_134) * fconvert.t(*data_8bacec))
    0061c587                  long double x87_r7_274 = float.t(0)
    0061c589                  long double x87_r6_117 = fconvert.t(fconvert.s(fconvert.t(*(arg1 + 0x108)) * fconvert.t(var_134)))
    0061c58d                  x87_r6_117 - x87_r7_274
    0061c58f                  void* eax_45
    0061c58f                  eax_45.w = (x87_r6_117 < x87_r7_274 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r6_117, x87_r7_274) ? 1 : 0 << 0xa) | ((x87_r6_117 == x87_r7_274 ? 1 : 0 << 0xe) | 0x3000)))
    0061c593                  eax_45:1.b & 0x41
    0061c593                  bool p_2 = unimplemented  {test ah, 0x41}
    0061c596                  if (not(p_2))
    0061c598                      var_105_1 = false
    0061c59d                  long double x87_r6_118 = float.t(1)
    0061c59f                  x87_r6_118 - x87_r7_274
    0061c5a1                  eax_45.w = (x87_r6_118 < x87_r7_274 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r6_118, x87_r7_274) ? 1 : 0 << 0xa) | ((x87_r6_118 == x87_r7_274 ? 1 : 0 << 0xe) | 0x3000)))
    0061c5a3                  eax_45:1.b & 5
    0061c5a3                  bool p_3 = unimplemented  {test ah, 0x5}
    0061c5a6                  long double x87_r7_275
    0061c5a6                  if (p_3)
    0061c5b4                      x87_r7_275 = x87_r6_118
    0061c5ae                  else
    0061c5ae                      x87_r7_275 = fconvert.t(fconvert.s(x87_r7_274))
    0061c5bb                  char var_10d_2 = 1
    0061c5b6                  if (var_105_1 != 0)
    0061c5c6                      long double x87_r6_119 = fconvert.t(var_104)
    0061c5ca                      var_60 = fconvert.s(x87_r6_119)
    0061c5d1                      long double x87_r5_12 = fconvert.t(var_100_1)
    0061c5d5                      var_5c = fconvert.s(x87_r5_12)
    0061c5dc                      long double x87_r4_11 = fconvert.t(var_fc_1)
    0061c5e0                      var_58 = fconvert.s(x87_r4_11)
    0061c5ea                      var_9c = fconvert.s(fconvert.t(*(esi_1 + 0x2c)))
    0061c605                      long double x87_r3_5 = fconvert.t(var_9c)
    0061c612                      var_134 = fconvert.s(x87_r6_119 - x87_r3_5)
    0061c616                      long double x87_r3_7 = fconvert.t(fconvert.s(fconvert.t(*(esi_1 + 0x30))))
    0061c623                      var_124 = fconvert.s(x87_r5_12 - x87_r3_7)
    0061c627                      long double x87_r3_9 = fconvert.t(fconvert.s(fconvert.t(*(esi_1 + 0x34))))
    0061c634                      var_13c = fconvert.s(x87_r4_11 - x87_r3_9)
    0061c63e                      var_134 = fconvert.s(x87_r7_275 * fconvert.t(var_134))
    0061c648                      var_124 = fconvert.s(x87_r7_275 * fconvert.t(var_124))
    0061c654                      var_13c = fconvert.s(x87_r7_275 * fconvert.t(var_13c))
    0061c660                      var_134 = fconvert.s(x87_r3_5 + fconvert.t(var_134))
    0061c668                      var_124 = fconvert.s(x87_r3_7 + fconvert.t(var_124))
    0061c670                      var_13c = fconvert.s(x87_r3_9 + fconvert.t(var_13c))
    0061c674                      long double x87_r7_279 = fconvert.t(var_134)
    0061c678                      var_104 = fconvert.s(x87_r7_279)
    0061c67c                      long double x87_r6_125 = fconvert.t(var_124)
    0061c680                      var_100_1 = fconvert.s(x87_r6_125)
    0061c684                      long double x87_r5_16 = fconvert.t(var_13c)
    0061c688                      var_fc_1 = fconvert.s(x87_r5_16)
    0061c697                      var_124 = fconvert.s(fconvert.t(var_60) - x87_r7_279)
    0061c6a2                      var_134 = fconvert.s(fconvert.t(var_5c) - x87_r6_125)
    0061c6ad                      var_13c = fconvert.s(fconvert.t(var_58) - x87_r5_16)
    0061c6b1                      long double x87_r7_283 = fconvert.t(var_134)
    0061c6b5                      long double x87_r6_127 = fconvert.t(var_124)
    0061c6b9                      long double x87_r5_18 = fconvert.t(var_13c)
    0061c6c3                      var_134 = fconvert.s(x87_r6_127 * x87_r6_127)
    0061c6d1                      var_134 = fconvert.s(x87_r7_283 * x87_r7_283)
    0061c6dd                      var_134 = fconvert.s(x87_r5_18 * x87_r5_18)
    0061c6e5                      var_134 = fconvert.s(fconvert.t(var_134) + fconvert.t(var_134) + fconvert.t(var_134))
    0061c6e9                      long double x87_r7_288 = fconvert.t(var_134)
    0061c6ed                      sub_764280(x87_r7_288)
    0061c6f2                      var_134 = fconvert.s(x87_r7_288)
    0061c6fa                      var_134 = fconvert.s(fconvert.t(var_134))
    0061c6fe                      long double x87_r7_290 = fconvert.t(var_134)
    0061c702                      long double x87_r6_131 = fconvert.t(*(arg1 + 0x10c))
    0061c708                      x87_r6_131 - x87_r7_290
    0061c70c                      if (((x87_r6_131 < x87_r7_290 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((is_unordered.t(x87_r6_131, x87_r7_290) ? 1 : 0 << 0xa) | ((x87_r6_131 == x87_r7_290 ? 1 : 0 << 0xe) | 0))):1.b & 0x41) != 0)
    0061c718                          var_10d_2 = 0
    0061c711                      else
    0061c711                          var_10d_2 = 1
    0061c721                  void* eax_47 = *(arg1 + 0xc0)
    0061c72b                  *(eax_47 + 0x18) = fconvert.s(fconvert.t(var_104))
    0061c732                  *(eax_47 + 0x1c) = fconvert.s(fconvert.t(var_100_1))
    0061c739                  *(eax_47 + 0x20) = fconvert.s(fconvert.t(var_fc_1))
    0061c73c                  if ((*(esi_1 + 0x18) & 1) == 0)
    0061c746                      void* edi_10 = *(esi_1 + 0x5c)
    0061c749                      long double x87_r7_326
    0061c749                      if (edi_10 == 0)
    0061c84a                          *(esi_1 + 0x38) = fconvert.s(fconvert.t(*(esi_1 + 0x1c)))
    0061c850                          *(esi_1 + 0x3c) = fconvert.s(fconvert.t(*(esi_1 + 0x20)))
    0061c856                          *(esi_1 + 0x40) = fconvert.s(fconvert.t(*(esi_1 + 0x24)))
    0061c85c                          *(esi_1 + 0x44) = fconvert.s(fconvert.t(*(esi_1 + 0x28)))
    0061c862                          *(esi_1 + 0x48) = fconvert.s(fconvert.t(*(esi_1 + 0x2c)))
    0061c868                          *(esi_1 + 0x4c) = fconvert.s(fconvert.t(*(esi_1 + 0x30)))
    0061c86b                          x87_r7_326 = fconvert.t(*(esi_1 + 0x34))
    0061c751                      else
    0061c751                          if ((*(edi_10 + 0x18) & 1) == 0)
    0061c759                              sub_475660(edi_10)
    0061c76e                          float* eax_48 = sub_4aee20(&var_ac, esi_1 + 0x2c, edi_10 + 0x38)
    0061c77b                          float var_128_8 = fconvert.s(fconvert.t(*(edi_10 + 0x48)) + fconvert.t(*eax_48))
    0061c785                          var_138 = fconvert.s(fconvert.t(*(edi_10 + 0x4c)) + fconvert.t(*(eax_48 + 4)))
    0061c78f                          float var_10c_7 = fconvert.s(fconvert.t(*(edi_10 + 0x50)) + fconvert.t(*(eax_48 + 8)))
    0061c7a6                          long double x87_r7_303 = (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_10 + 0x38))) + (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_10 + 0x44))) + (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_10 + 0x3c)))
    0061c7b0                          var_134 = fconvert.s(x87_r7_303 - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_10 + 0x40))))
    0061c7c8                          long double x87_r7_308 = (fconvert.t(*(edi_10 + 0x44)) * fconvert.t(*(esi_1 + 0x20))) + (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_10 + 0x3c))) + (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_10 + 0x40)))
    0061c7d1                          var_124 = fconvert.s(x87_r7_308 - (fconvert.t(*(edi_10 + 0x38)) * fconvert.t(*(esi_1 + 0x24))))
    0061c7e8                          long double x87_r7_313 = (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_10 + 0x40))) + (fconvert.t(*(edi_10 + 0x44)) * fconvert.t(*(esi_1 + 0x24))) + (fconvert.t(*(edi_10 + 0x38)) * fconvert.t(*(esi_1 + 0x20)))
    0061c7f2                          var_13c = fconvert.s(x87_r7_313 - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_10 + 0x3c))))
    0061c809                          long double x87_r7_318 = ((fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_10 + 0x44))) - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_10 + 0x38)))) - (fconvert.t(*(edi_10 + 0x3c)) * fconvert.t(*(esi_1 + 0x20)))
    0061c813                          var_12c = fconvert.s(x87_r7_318 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_10 + 0x40))))
    0061c81b                          *(esi_1 + 0x38) = fconvert.s(fconvert.t(var_134))
    0061c822                          *(esi_1 + 0x3c) = fconvert.s(fconvert.t(var_124))
    0061c829                          *(esi_1 + 0x40) = fconvert.s(fconvert.t(var_13c))
    0061c830                          *(esi_1 + 0x44) = fconvert.s(fconvert.t(var_12c))
    0061c837                          *(esi_1 + 0x48) = fconvert.s(fconvert.t(var_128_8))
    0061c83e                          *(esi_1 + 0x4c) = fconvert.s(fconvert.t(var_138))
    0061c841                          x87_r7_326 = fconvert.t(var_10c_7)
    0061c86e                      *(esi_1 + 0x50) = fconvert.s(x87_r7_326)
    0061c871                      *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    0061c875                  void* ebp_11 = esi_1 + 0x38
    0061c886                  sub_4aee20(&var_b8, 1.26109687e-38f, ebp_11)
    0061c88e                  int32_t* ecx_41
    0061c88e                  if ((*(esi_1 + 0x18) & 1) == 0)
    0061c898                      void* edi_12 = *(esi_1 + 0x5c)
    0061c89b                      long double x87_r7_365
    0061c89b                      if (edi_12 == 0)
    0061c99c                          *ebp_11 = fconvert.s(fconvert.t(*(esi_1 + 0x1c)))
    0061c9a2                          *(ebp_11 + 4) = fconvert.s(fconvert.t(*(esi_1 + 0x20)))
    0061c9a8                          *(ebp_11 + 8) = fconvert.s(fconvert.t(*(esi_1 + 0x24)))
    0061c9ae                          *(ebp_11 + 0xc) = fconvert.s(fconvert.t(*(esi_1 + 0x28)))
    0061c9b4                          *(ebp_11 + 0x10) = fconvert.s(fconvert.t(*(esi_1 + 0x2c)))
    0061c9ba                          *(ebp_11 + 0x14) = fconvert.s(fconvert.t(*(esi_1 + 0x30)))
    0061c9bd                          x87_r7_365 = fconvert.t(*(esi_1 + 0x34))
    0061c8a3                      else
    0061c8a3                          if ((*(edi_12 + 0x18) & 1) == 0)
    0061c8ab                              sub_475660(edi_12)
    0061c8c0                          float* eax_49
    0061c8c0                          eax_49, ecx_41 = sub_4aee20(&var_7c, esi_1 + 0x2c, edi_12 + 0x38)
    0061c8cd                          float var_128_9 = fconvert.s(fconvert.t(*(edi_12 + 0x48)) + fconvert.t(*eax_49))
    0061c8d7                          var_138 = fconvert.s(fconvert.t(*(edi_12 + 0x4c)) + fconvert.t(*(eax_49 + 4)))
    0061c8e1                          float var_10c_8 = fconvert.s(fconvert.t(*(edi_12 + 0x50)) + fconvert.t(*(eax_49 + 8)))
    0061c8f8                          long double x87_r7_342 = (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_12 + 0x44))) + (fconvert.t(*(edi_12 + 0x38)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_12 + 0x3c)))
    0061c902                          var_134 = fconvert.s(x87_r7_342 - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_12 + 0x40))))
    0061c91a                          long double x87_r7_347 = (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_12 + 0x3c))) + (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_12 + 0x44))) + (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_12 + 0x40)))
    0061c923                          var_124 = fconvert.s(x87_r7_347 - (fconvert.t(*(edi_12 + 0x38)) * fconvert.t(*(esi_1 + 0x24))))
    0061c93a                          long double x87_r7_352 = (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_12 + 0x44))) + (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_12 + 0x40))) + (fconvert.t(*(edi_12 + 0x38)) * fconvert.t(*(esi_1 + 0x20)))
    0061c944                          var_13c = fconvert.s(x87_r7_352 - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_12 + 0x3c))))
    0061c95b                          long double x87_r7_357 = ((fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_12 + 0x44))) - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_12 + 0x38)))) - (fconvert.t(*(edi_12 + 0x3c)) * fconvert.t(*(esi_1 + 0x20)))
    0061c965                          var_12c = fconvert.s(x87_r7_357 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_12 + 0x40))))
    0061c96d                          *ebp_11 = fconvert.s(fconvert.t(var_134))
    0061c974                          *(ebp_11 + 4) = fconvert.s(fconvert.t(var_124))
    0061c97b                          *(ebp_11 + 8) = fconvert.s(fconvert.t(var_13c))
    0061c982                          *(ebp_11 + 0xc) = fconvert.s(fconvert.t(var_12c))
    0061c989                          *(ebp_11 + 0x10) = fconvert.s(fconvert.t(var_128_9))
    0061c990                          *(ebp_11 + 0x14) = fconvert.s(fconvert.t(var_138))
    0061c993                          x87_r7_365 = fconvert.t(var_10c_8)
    0061c9c0                      *(ebp_11 + 0x18) = fconvert.s(x87_r7_365)
    0061c9c3                      *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    0061c9d4                  int32_t eax_51 = *(arg1 + 0x5c) + 0xfffffffe
    0061c9da                  var_134 = fconvert.s(fconvert.t(var_b8) + fconvert.t(*(esi_1 + 0x48)))
    0061c9e8                  var_124 = fconvert.s(fconvert.t(*(esi_1 + 0x4c)) + fconvert.t(var_b4))
    0061c9f6                  var_13c = fconvert.s(fconvert.t(*(esi_1 + 0x50)) + fconvert.t(var_b0))
    0061c9fe                  float var_c4 = fconvert.s(fconvert.t(var_134))
    0061ca1b                  long double x87_r7_381 = float.t(0)
    0061ca1d                  float var_90 = fconvert.s(x87_r7_381)
    0061ca32                  long double x87_r6_180 = float.t(1)
    0061c9d7                  if (eax_51 == 0)
    0061cb44                      sub_4e3150(*(arg1 + 0xbc))
    0061c9d7                  float var_64
    0061c9d7                  char eax_54
    0061c9d7                  int16_t top_1
    0061c9d7                  if (eax_51 == 1)
    0061cb75                      int32_t* edi_15 = arg1 + 0xa8
    0061cb7f                      top_1 = 0
    0061cb81                      eax_54 = sub_513670(edi_15)
    0061ca41                      if (eax_54 != 0)
    0061cb8e                          long double x87_r7_448
    0061cb8e                          if (*(arg1 + 0x138) == 0)
    0061cd8b                              arg2 = sub_4b16a0(arg2, arg1 + 0x114, arg3, &var_60)
    0061cd97                              var_9c = fconvert.s(fconvert.t(var_60))
    0061cda7                              float var_98_3 = fconvert.s(fconvert.t(var_5c))
    0061cdb5                              float var_94_3 = fconvert.s(fconvert.t(var_58))
    0061cdc1                              void* edi_18 = *(sub_5186b0(edi_15) + 0x5c)
    0061cdc7                              if ((*(edi_18 + 0x18) & 1) == 0)
    0061cdd1                                  void* ebp_13 = *(edi_18 + 0x5c)
    0061cdd4                                  if (ebp_13 == 0)
    0061cee0                                      sub_474580(edi_18 + 0x38, edi_18 + 0x1c)
    0061cddc                                  else
    0061cddc                                      if ((*(ebp_13 + 0x18) & 1) == 0)
    0061cde4                                          sub_475660(ebp_13)
    0061cdf9                                      float* eax_63
    0061cdf9                                      eax_63, ecx_41 = sub_4aee20(&var_7c, edi_18 + 0x2c, ebp_13 + 0x38)
    0061ce06                                      float var_128_11 = fconvert.s(fconvert.t(*(ebp_13 + 0x48)) + fconvert.t(*eax_63))
    0061ce10                                      var_138 = fconvert.s(fconvert.t(*(ebp_13 + 0x4c)) + fconvert.t(*(eax_63 + 4)))
    0061ce1a                                      float var_10c_10 = fconvert.s(fconvert.t(*(ebp_13 + 0x50)) + fconvert.t(*(eax_63 + 8)))
    0061ce32                                      long double x87_r7_461 = (fconvert.t(*(edi_18 + 0x28)) * fconvert.t(*(ebp_13 + 0x38))) + (fconvert.t(*(edi_18 + 0x1c)) * fconvert.t(*(ebp_13 + 0x44))) + (fconvert.t(*(edi_18 + 0x24)) * fconvert.t(*(ebp_13 + 0x3c)))
    0061ce3c                                      var_11c = fconvert.s(x87_r7_461 - (fconvert.t(*(edi_18 + 0x20)) * fconvert.t(*(ebp_13 + 0x40))))
    0061ce54                                      long double x87_r7_466 = (fconvert.t(*(edi_18 + 0x28)) * fconvert.t(*(ebp_13 + 0x3c))) + (fconvert.t(*(edi_18 + 0x20)) * fconvert.t(*(ebp_13 + 0x44))) + (fconvert.t(*(ebp_13 + 0x40)) * fconvert.t(*(edi_18 + 0x1c)))
    0061ce5e                                      var_124 = fconvert.s(x87_r7_466 - (fconvert.t(*(ebp_13 + 0x38)) * fconvert.t(*(edi_18 + 0x24))))
    0061ce76                                      long double x87_r7_471 = (fconvert.t(*(ebp_13 + 0x40)) * fconvert.t(*(edi_18 + 0x28))) + (fconvert.t(*(ebp_13 + 0x44)) * fconvert.t(*(edi_18 + 0x24))) + (fconvert.t(*(edi_18 + 0x20)) * fconvert.t(*(ebp_13 + 0x38)))
    0061ce80                                      var_13c = fconvert.s(x87_r7_471 - (fconvert.t(*(edi_18 + 0x1c)) * fconvert.t(*(ebp_13 + 0x3c))))
    0061ce98                                      long double x87_r7_476 = ((fconvert.t(*(edi_18 + 0x28)) * fconvert.t(*(ebp_13 + 0x44))) - (fconvert.t(*(edi_18 + 0x1c)) * fconvert.t(*(ebp_13 + 0x38)))) - (fconvert.t(*(edi_18 + 0x20)) * fconvert.t(*(ebp_13 + 0x3c)))
    0061cea2                                      var_12c = fconvert.s(x87_r7_476 - (fconvert.t(*(ebp_13 + 0x40)) * fconvert.t(*(edi_18 + 0x24))))
    0061ceaa                                      *(edi_18 + 0x38) = fconvert.s(fconvert.t(var_11c))
    0061ceb1                                      *(edi_18 + 0x3c) = fconvert.s(fconvert.t(var_124))
    0061ceb8                                      *(edi_18 + 0x40) = fconvert.s(fconvert.t(var_13c))
    0061cebf                                      *(edi_18 + 0x44) = fconvert.s(fconvert.t(var_12c))
    0061cec6                                      *(edi_18 + 0x48) = fconvert.s(fconvert.t(var_128_11))
    0061cecd                                      *(edi_18 + 0x4c) = fconvert.s(fconvert.t(var_138))
    0061ced4                                      *(edi_18 + 0x50) = fconvert.s(fconvert.t(var_10c_10))
    0061cee5                                  *(edi_18 + 0x18) = *(edi_18 + 0x18) | 1
    0061cef3                              var_11c = fconvert.s(fconvert.t(*(edi_18 + 0x48)) + fconvert.t(var_9c))
    0061cf01                              var_124 = fconvert.s(fconvert.t(*(edi_18 + 0x4c)) + fconvert.t(var_98_3))
    0061cf08                              x87_r7_448 = fconvert.t(*(edi_18 + 0x50)) + fconvert.t(var_94_3)
    0061cba9                          else
    0061cba9                              arg2 = sub_4b16a0(arg2, arg1 + 0x114, arg3, &var_b8)
    0061cbbd                              var_124 = fconvert.s(fconvert.t(var_b8) + fconvert.t(*(arg1 + 0xac)))
    0061cbce                              var_13c = fconvert.s(fconvert.t(*(arg1 + 0xb0)) + fconvert.t(var_b4))
    0061cbdf                              var_12c = fconvert.s(fconvert.t(*(arg1 + 0xb4)) + fconvert.t(var_b0))
    0061cbe7                              var_6c = fconvert.s(fconvert.t(var_124))
    0061cbf2                              var_68 = fconvert.s(fconvert.t(var_13c))
    0061cbfd                              var_64 = fconvert.s(fconvert.t(var_12c))
    0061cc09                              void* edi_16 = *(sub_5186b0(edi_15) + 0x5c)
    0061cc0f                              if ((*(edi_16 + 0x18) & 1) == 0)
    0061cc19                                  void* ecx_52 = *(edi_16 + 0x5c)
    0061cc1c                                  long double x87_r7_436
    0061cc1c                                  if (ecx_52 == 0)
    0061cd18                                      *(edi_16 + 0x38) = fconvert.s(fconvert.t(*(edi_16 + 0x1c)))
    0061cd1e                                      *(edi_16 + 0x3c) = fconvert.s(fconvert.t(*(edi_16 + 0x20)))
    0061cd24                                      *(edi_16 + 0x40) = fconvert.s(fconvert.t(*(edi_16 + 0x24)))
    0061cd2a                                      *(edi_16 + 0x44) = fconvert.s(fconvert.t(*(edi_16 + 0x28)))
    0061cd30                                      *(edi_16 + 0x48) = fconvert.s(fconvert.t(*(edi_16 + 0x2c)))
    0061cd36                                      *(edi_16 + 0x4c) = fconvert.s(fconvert.t(*(edi_16 + 0x30)))
    0061cd39                                      x87_r7_436 = fconvert.t(*(edi_16 + 0x34))
    0061cc24                                  else
    0061cc24                                      void* eax_57 = sub_4698a0(ecx_52)
    0061cc38                                      float* eax_59 = sub_4aee20(&var_7c, edi_16 + 0x2c, eax_57)
    0061cc45                                      var_138 = fconvert.s(fconvert.t(*(eax_57 + 0x10)) + fconvert.t(*eax_59))
    0061cc4f                                      float var_10c_9 = fconvert.s(fconvert.t(*(eax_57 + 0x14)) + fconvert.t(*(eax_59 + 4)))
    0061cc59                                      var_11c = fconvert.s(fconvert.t(*(eax_57 + 0x18)) + fconvert.t(*(eax_59 + 8)))
    0061cc71                                      long double x87_r7_413 = (fconvert.t(*(edi_16 + 0x1c)) * fconvert.t(*(eax_57 + 0xc))) + (fconvert.t(*eax_57) * fconvert.t(*(edi_16 + 0x28))) + (fconvert.t(*(edi_16 + 0x24)) * fconvert.t(*(eax_57 + 4)))
    0061cc7b                                      var_124 = fconvert.s(x87_r7_413 - (fconvert.t(*(edi_16 + 0x20)) * fconvert.t(*(eax_57 + 8))))
    0061cc93                                      long double x87_r7_418 = (fconvert.t(*(edi_16 + 0x20)) * fconvert.t(*(eax_57 + 0xc))) + (fconvert.t(*(eax_57 + 4)) * fconvert.t(*(edi_16 + 0x28))) + (fconvert.t(*(edi_16 + 0x1c)) * fconvert.t(*(eax_57 + 8)))
    0061cc9d                                      var_13c = fconvert.s(x87_r7_418 - (fconvert.t(*(edi_16 + 0x24)) * fconvert.t(*eax_57)))
    0061ccb5                                      long double x87_r7_423 = (fconvert.t(*(edi_16 + 0x24)) * fconvert.t(*(eax_57 + 0xc))) + (fconvert.t(*(eax_57 + 8)) * fconvert.t(*(edi_16 + 0x28))) + (fconvert.t(*eax_57) * fconvert.t(*(edi_16 + 0x20)))
    0061ccbf                                      var_12c = fconvert.s(x87_r7_423 - (fconvert.t(*(eax_57 + 4)) * fconvert.t(*(edi_16 + 0x1c))))
    0061ccd7                                      long double x87_r7_428 = ((fconvert.t(*(edi_16 + 0x28)) * fconvert.t(*(eax_57 + 0xc))) - (fconvert.t(*(edi_16 + 0x1c)) * fconvert.t(*eax_57))) - (fconvert.t(*(eax_57 + 4)) * fconvert.t(*(edi_16 + 0x20)))
    0061cce1                                      float var_128_10 = fconvert.s(x87_r7_428 - (fconvert.t(*(edi_16 + 0x24)) * fconvert.t(*(eax_57 + 8))))
    0061cce9                                      *(edi_16 + 0x38) = fconvert.s(fconvert.t(var_124))
    0061ccf0                                      *(edi_16 + 0x3c) = fconvert.s(fconvert.t(var_13c))
    0061ccf7                                      *(edi_16 + 0x40) = fconvert.s(fconvert.t(var_12c))
    0061ccfe                                      *(edi_16 + 0x44) = fconvert.s(fconvert.t(var_128_10))
    0061cd05                                      *(edi_16 + 0x48) = fconvert.s(fconvert.t(var_138))
    0061cd0c                                      *(edi_16 + 0x4c) = fconvert.s(fconvert.t(var_10c_9))
    0061cd0f                                      x87_r7_436 = fconvert.t(var_11c)
    0061cd3c                                  *(edi_16 + 0x50) = fconvert.s(x87_r7_436)
    0061cd3f                                  *(edi_16 + 0x18) = *(edi_16 + 0x18) | 1
    0061cd57                              float* eax_60
    0061cd57                              eax_60, ecx_41 = sub_4aee20(&var_9c, &var_6c, edi_16 + 0x38)
    0061cd64                              var_11c = fconvert.s(fconvert.t(*(edi_16 + 0x48)) + fconvert.t(*eax_60))
    0061cd6e                              var_124 = fconvert.s(fconvert.t(*(edi_16 + 0x4c)) + fconvert.t(*(eax_60 + 4)))
    0061cd75                              x87_r7_448 = fconvert.t(*(edi_16 + 0x50)) + fconvert.t(*(eax_60 + 8))
    0061cf0f                          var_134 = fconvert.s(x87_r7_448)
    0061cf17                          var_104 = fconvert.s(fconvert.t(var_11c))
    0061cf1f                          var_100_1 = fconvert.s(fconvert.t(var_124))
    0061cf27                          var_fc_1 = fconvert.s(fconvert.t(var_134))
    0061ca41                  if (((eax_51 == 0 || eax_51 == 4) || eax_51 == 6) || (eax_51 == 1 && eax_54 != 0))
    0061cb4d                      var_c4 = fconvert.s(fconvert.t(var_d0))
    0061cb69                      top_1 = 0
    0061ca41                  float var_38
    0061ca41                  if (eax_51 == 3 && *(arg1 + 0xec) != 0)
    0061cf3d                      ecx_41 = *(arg1 + 0xf8)
    0061ca41                      if (ecx_41 != 0)
    0061cf53                          var_7c = fconvert.s(x87_r7_381)
    0061cf83                          var_11c = fconvert.s(fconvert.t(*(*(arg1 + 0xbc) + 0x18)))
    0061cf89                          var_38 = fconvert.s(x87_r7_381)
    0061cfaa                          var_124 = fconvert.s(x87_r7_381)
    0061cfa7                          *(*ecx_41 + 0x14)(&var_38, &var_124, fconvert.s(fconvert.t(var_11c)), fconvert.s(x87_r6_180))
    0061cfcb                          var_7c = fconvert.s(fconvert.t(var_38))
    0061d011                          float* eax_65
    0061d011                          eax_65, ecx_41 = sub_4aee20(&var_54, 1.26109687e-38f, &var_7c)
    0061d01f                          var_11c = fconvert.s(fconvert.t(var_104) + fconvert.t(*eax_65))
    0061d02a                          var_124 = fconvert.s(fconvert.t(*(eax_65 + 4)) + fconvert.t(var_100_1))
    0061d035                          var_134 = fconvert.s(fconvert.t(*(eax_65 + 8)) + fconvert.t(var_fc_1))
    0061d03d                          var_c4 = fconvert.s(fconvert.t(var_11c))
    0061d053                          top_1 = 0
    0061c9d7                  if (((eax_51 u> 6 || (eax_51 == 3 && *(arg1 + 0xec) == 0)) || (eax_51 == 2 && *(arg1 + 0xec) == 0)) || ((eax_51 == 3 && *(arg1 + 0xec) != 0) && ecx_41 == 0))
    0061d173                      top_1 = 0
    0061ca41                  float var_ec
    0061ca41                  void var_44
    0061ca41                  if (eax_51 == 2 && *(arg1 + 0xec) != 0)
    0061d07a                      var_7c = fconvert.s(x87_r7_381)
    0061d0aa                      var_11c = fconvert.s(fconvert.t(*(*(arg1 + 0xbc) + 0x18)))
    0061d0b0                      var_ec = fconvert.s(x87_r7_381)
    0061d0c5                      var_124 = fconvert.s(x87_r7_381)
    0061d0c2                      *(**(arg1 + 0xf8) + 0x14)(&var_ec, &var_124, fconvert.s(fconvert.t(var_11c)), fconvert.s(x87_r6_180))
    0061d0e0                      var_90 = fconvert.s(fconvert.t(var_ec))
    0061d11d                      float* eax_67
    0061d11d                      eax_67, ecx_41 = sub_4aee20(&var_44, 1.26109687e-38f, &var_7c)
    0061d12b                      var_11c = fconvert.s(fconvert.t(var_104) + fconvert.t(*eax_67))
    0061d136                      var_124 = fconvert.s(fconvert.t(*(eax_67 + 4)) + fconvert.t(var_100_1))
    0061d141                      var_134 = fconvert.s(fconvert.t(*(eax_67 + 8)) + fconvert.t(var_fc_1))
    0061d149                      var_c4 = fconvert.s(fconvert.t(var_11c))
    0061d15f                      top_1 = 0
    0061c9d7                  if (eax_51 == 5)
    0061ca4d                      var_7c = fconvert.s(x87_r7_381)
    0061ca73                      void* edi_14 = *sub_5630e0(*(arg1 + 0x58), &var_134)
    0061ca77                      var_4.b = 8
    0061ca75                      int32_t ecx_46
    0061ca75                      if (edi_14 != 0)
    0061ca87                          *(edi_14 + 0x3c) = *data_8ba770
    0061ca8a                          ecx_46 = *(edi_14 + 0x30)
    0061ca75                          if (ecx_46 == 0 && *(edi_14 + 0x28) != ecx_46)
    0061ca96                              if ((*(edi_14 + 0x38) & 0x9000) != 0)
    0061caa6                                  sub_41a5e0(edi_14, data_8951a0)
    0061caab                              ecx_46 = *(edi_14 + 0x30)
    0061ca75                      if (edi_14 == 0 || ((edi_14 != 0 && ecx_46 == 0) && *(edi_14 + 0x28) == ecx_46))
    0061cab0                          ecx_46 = 0
    0061cac1                      sub_4800a0(ecx_46, data_8bdae0, &var_7c, 1)
    0061caca                      var_4.b = 2
    0061cad2                      sub_495d10(&var_134)
    0061caec                      float* eax_53
    0061caec                      eax_53, ecx_41 = sub_4aee20(&var_ac, 1.26109687e-38f, &var_7c)
    0061cafa                      var_124 = fconvert.s(fconvert.t(var_104) + fconvert.t(*eax_53))
    0061cb05                      var_13c = fconvert.s(fconvert.t(*(eax_53 + 4)) + fconvert.t(var_100_1))
    0061cb10                      var_134 = fconvert.s(fconvert.t(*(eax_53 + 8)) + fconvert.t(var_fc_1))
    0061cb18                      var_c4 = fconvert.s(fconvert.t(var_124))
    0061cb2e                      top_1 = 0
    0061d175                  if (*(arg1 + 0x5c) != 4)
    0061d17f                      if ((*(esi_1 + 0x18) & 1) == 0)
    0061d189                          void* edi_19 = *(esi_1 + 0x5c)
    0061d18c                          float* var_150_46
    0061d18c                          if (edi_19 == 0)
    0061d29c                              var_150_46 = esi_1 + 0x1c
    0061d194                          else
    0061d194                              if ((*(edi_19 + 0x18) & 1) == 0)
    0061d19c                                  sub_475660(edi_19)
    0061d1b1                              float* eax_68 = sub_4aee20(&var_44, esi_1 + 0x2c, edi_19 + 0x38)
    0061d1c2                              var_150_46 = &var_ec
    0061d1c3                              var_12c = fconvert.s(fconvert.t(*(edi_19 + 0x48)) + fconvert.t(*eax_68))
    0061d1d7                              var_138 = fconvert.s(fconvert.t(*(edi_19 + 0x50)) + fconvert.t(*(eax_68 + 8)))
    0061d1ee                              long double x87_r7_536 = (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_19 + 0x38))) + (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_19 + 0x44))) + (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_19 + 0x3c)))
    0061d1f8                              var_11c = fconvert.s(x87_r7_536 - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_19 + 0x40))))
    0061d210                              long double x87_r7_541 = (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_19 + 0x3c))) + (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_19 + 0x44))) + (fconvert.t(*(edi_19 + 0x40)) * fconvert.t(*(esi_1 + 0x1c)))
    0061d219                              var_134 = fconvert.s(x87_r7_541 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_19 + 0x38))))
    0061d230                              long double x87_r7_546 = (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_19 + 0x44))) + (fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_19 + 0x40))) + (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_19 + 0x38)))
    0061d23a                              var_124 = fconvert.s(x87_r7_546 - (fconvert.t(*(edi_19 + 0x3c)) * fconvert.t(*(esi_1 + 0x1c))))
    0061d251                              long double x87_r7_551 = ((fconvert.t(*(esi_1 + 0x28)) * fconvert.t(*(edi_19 + 0x44))) - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_19 + 0x38)))) - (fconvert.t(*(edi_19 + 0x3c)) * fconvert.t(*(esi_1 + 0x20)))
    0061d25b                              var_13c = fconvert.s(x87_r7_551 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_19 + 0x40))))
    0061d263                              var_ec = fconvert.s(fconvert.t(var_11c))
    0061d1c7                              fconvert.t(*(edi_19 + 0x4c)) + fconvert.t(*(eax_68 + 4))
    0061d2a0                          sub_474580(esi_1 + 0x38, var_150_46)
    0061d2a5                          *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    0061d2b0                      var_54 = fconvert.s(fconvert.t(*(esi_1 + 0x48)))
    0061d2ba                      float var_50_1 = fconvert.s(fconvert.t(*(esi_1 + 0x4c)))
    0061d2c4                      float var_4c_1 = fconvert.s(fconvert.t(*(esi_1 + 0x50)))
    0061d2a9                      if ((*(esi_1 + 0x18) & 1) == 0)
    0061d2d1                          void* edi_21 = *(esi_1 + 0x5c)
    0061d2d4                          float* var_150_48
    0061d2d4                          if (edi_21 == 0)
    0061d3e4                              var_150_48 = esi_1 + 0x1c
    0061d2dc                          else
    0061d2dc                              if ((*(edi_21 + 0x18) & 1) == 0)
    0061d2e4                                  sub_475660(edi_21)
    0061d2f9                              float* eax_70 = sub_4aee20(&var_44, esi_1 + 0x2c, edi_21 + 0x38)
    0061d30a                              var_150_48 = &var_ec
    0061d30b                              var_12c = fconvert.s(fconvert.t(*(edi_21 + 0x48)) + fconvert.t(*eax_70))
    0061d31f                              var_138 = fconvert.s(fconvert.t(*(edi_21 + 0x50)) + fconvert.t(*(eax_70 + 8)))
    0061d336                              long double x87_r7_572 = (fconvert.t(*(edi_21 + 0x38)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(edi_21 + 0x44)) * fconvert.t(*(esi_1 + 0x1c))) + (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_21 + 0x3c)))
    0061d340                              var_11c = fconvert.s(x87_r7_572 - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_21 + 0x40))))
    0061d358                              long double x87_r7_577 = (fconvert.t(*(edi_21 + 0x3c)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(edi_21 + 0x44)) * fconvert.t(*(esi_1 + 0x20))) + (fconvert.t(*(edi_21 + 0x40)) * fconvert.t(*(esi_1 + 0x1c)))
    0061d361                              var_134 = fconvert.s(x87_r7_577 - (fconvert.t(*(edi_21 + 0x38)) * fconvert.t(*(esi_1 + 0x24))))
    0061d378                              long double x87_r7_582 = (fconvert.t(*(edi_21 + 0x44)) * fconvert.t(*(esi_1 + 0x24))) + (fconvert.t(*(edi_21 + 0x40)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(edi_21 + 0x38)) * fconvert.t(*(esi_1 + 0x20)))
    0061d382                              var_124 = fconvert.s(x87_r7_582 - (fconvert.t(*(edi_21 + 0x3c)) * fconvert.t(*(esi_1 + 0x1c))))
    0061d399                              long double x87_r7_587 = ((fconvert.t(*(edi_21 + 0x44)) * fconvert.t(*(esi_1 + 0x28))) - (fconvert.t(*(edi_21 + 0x38)) * fconvert.t(*(esi_1 + 0x1c)))) - (fconvert.t(*(edi_21 + 0x3c)) * fconvert.t(*(esi_1 + 0x20)))
    0061d3a3                              var_13c = fconvert.s(x87_r7_587 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_21 + 0x40))))
    0061d3ab                              var_ec = fconvert.s(fconvert.t(var_11c))
    0061d30f                              fconvert.t(*(edi_21 + 0x4c)) + fconvert.t(*(eax_70 + 4))
    0061d3e8                          sub_474580(esi_1 + 0x38, var_150_48)
    0061d3ed                          *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    0061d3f4                      void* edi_23 = *(esi_1 + 0x5c)
    0061d3f9                      var_ac = fconvert.s(fconvert.t(*(esi_1 + 0x38)))
    0061d403                      float var_a8_1 = fconvert.s(fconvert.t(*(esi_1 + 0x3c)))
    0061d40d                      float var_a4_1 = fconvert.s(fconvert.t(*(esi_1 + 0x40)))
    0061d417                      float var_a0_1 = fconvert.s(fconvert.t(*(esi_1 + 0x44)))
    0061d3f7                      if (edi_23 == 0)
    0061d64b                          *(esi_1 + 0x2c) = fconvert.s(fconvert.t(var_104))
    0061d652                          *(esi_1 + 0x30) = fconvert.s(fconvert.t(var_100_1))
    0061d659                          *(esi_1 + 0x34) = fconvert.s(fconvert.t(var_fc_1))
    0061d65c                          int32_t eax_77 = *(esi_1 + 0x18)
    0061d65f                          if ((eax_77.b & 1) != 0)
    0061d663                              int32_t* ecx_68 = *(esi_1 + 0x6c)
    0061d66b                              *(esi_1 + 0x18) = eax_77 & 0xfffffffe
    0061d669                              if (ecx_68 != 0)
    0061d675                                  int32_t* edi_26
    0061d675                                  do
    0061d675                                      edi_26 = *(ecx_68 + 8)
    0061d672                                      *(*ecx_68 + 4)()
    0061d67c                                      ecx_68 = edi_26
    0061d67c                                  while (edi_26 != 0)
    0061d680                              void* edi_27 = *(esi_1 + 0x60)
    0061d683                              if (edi_27 != 0)
    0061d689                                  do
    0061d689                                      sub_4699e0(edi_27)
    0061d68e                                      edi_27 = *(edi_27 + 0x68)
    0061d68e                                  while (edi_27 != 0)
    0061d424                      else
    0061d424                          if ((*(edi_23 + 0x18) & 1) == 0)
    0061d42e                              void* ecx_62 = *(edi_23 + 0x5c)
    0061d431                              float* var_150_50
    0061d431                              if (ecx_62 == 0)
    0061d53c                                  var_150_50 = edi_23 + 0x1c
    0061d439                              else
    0061d439                                  void* eax_72 = sub_4698a0(ecx_62)
    0061d44d                                  float* eax_73 = sub_4aee20(&var_44, edi_23 + 0x2c, eax_72)
    0061d45a                                  var_12c = fconvert.s(fconvert.t(*(eax_72 + 0x10)) + fconvert.t(*eax_73))
    0061d472                                  var_138 = fconvert.s(fconvert.t(*(eax_72 + 0x18)) + fconvert.t(*(eax_73 + 8)))
    0061d48a                                  long double x87_r7_609 = (fconvert.t(*eax_72) * fconvert.t(*(edi_23 + 0x28))) + (fconvert.t(*(edi_23 + 0x1c)) * fconvert.t(*(eax_72 + 0xc))) + (fconvert.t(*(edi_23 + 0x24)) * fconvert.t(*(eax_72 + 4)))
    0061d494                                  var_11c = fconvert.s(x87_r7_609 - (fconvert.t(*(edi_23 + 0x20)) * fconvert.t(*(eax_72 + 8))))
    0061d4ac                                  long double x87_r7_614 = (fconvert.t(*(edi_23 + 0x28)) * fconvert.t(*(eax_72 + 4))) + (fconvert.t(*(edi_23 + 0x20)) * fconvert.t(*(eax_72 + 0xc))) + (fconvert.t(*(eax_72 + 8)) * fconvert.t(*(edi_23 + 0x1c)))
    0061d4b6                                  var_134 = fconvert.s(x87_r7_614 - (fconvert.t(*eax_72) * fconvert.t(*(edi_23 + 0x24))))
    0061d4ce                                  long double x87_r7_619 = (fconvert.t(*(edi_23 + 0x24)) * fconvert.t(*(eax_72 + 0xc))) + (fconvert.t(*(edi_23 + 0x28)) * fconvert.t(*(eax_72 + 8))) + (fconvert.t(*eax_72) * fconvert.t(*(edi_23 + 0x20)))
    0061d4d8                                  var_124 = fconvert.s(x87_r7_619 - (fconvert.t(*(eax_72 + 4)) * fconvert.t(*(edi_23 + 0x1c))))
    0061d4f0                                  long double x87_r7_624 = ((fconvert.t(*(edi_23 + 0x28)) * fconvert.t(*(eax_72 + 0xc))) - (fconvert.t(*eax_72) * fconvert.t(*(edi_23 + 0x1c)))) - (fconvert.t(*(eax_72 + 4)) * fconvert.t(*(edi_23 + 0x20)))
    0061d4fa                                  var_13c = fconvert.s(x87_r7_624 - (fconvert.t(*(edi_23 + 0x24)) * fconvert.t(*(eax_72 + 8))))
    0061d502                                  var_ec = fconvert.s(fconvert.t(var_11c))
    0061d45e                                  fconvert.t(*(eax_72 + 0x14)) + fconvert.t(*(eax_73 + 4))
    0061d536                                  var_150_50 = &var_ec
    0061d540                              sub_474580(edi_23 + 0x38, var_150_50)
    0061d545                              *(edi_23 + 0x18) = *(edi_23 + 0x18) | 1
    0061d55d                          var_11c = fconvert.s(fconvert.t(var_104) - fconvert.t(*(edi_23 + 0x48)))
    0061d570                          var_134 = fconvert.s(fconvert.t(var_100_1) - fconvert.t(*(edi_23 + 0x4c)))
    0061d57b                          var_124 = fconvert.s(fconvert.t(var_fc_1) - fconvert.t(*(edi_23 + 0x50)))
    0061d583                          var_b8 = fconvert.s(fconvert.t(var_11c))
    0061d5a5                          var_11c = fconvert.s(fneg(fconvert.t(*(edi_23 + 0x38))))
    0061d5ae                          var_134 = fconvert.s(fneg(fconvert.t(*(edi_23 + 0x3c))))
    0061d5b7                          var_124 = fconvert.s(fneg(fconvert.t(*(edi_23 + 0x40))))
    0061d5be                          var_13c = fconvert.s(fconvert.t(*(edi_23 + 0x44)))
    0061d5c6                          var_ec = fconvert.s(fconvert.t(var_11c))
    0061d5e2                          sub_4aee20(&var_6c, &var_b8, &var_ec)
    0061d5f1                          *(esi_1 + 0x2c) = fconvert.s(fconvert.t(var_6c))
    0061d5fb                          *(esi_1 + 0x30) = fconvert.s(fconvert.t(var_68))
    0061d605                          *(esi_1 + 0x34) = fconvert.s(fconvert.t(var_64))
    0061d608                          int32_t eax_74 = *(esi_1 + 0x18)
    0061d60b                          if ((eax_74.b & 1) != 0)
    0061d613                              int32_t* ecx_66 = *(esi_1 + 0x6c)
    0061d61b                              *(esi_1 + 0x18) = eax_74 & 0xfffffffe
    0061d619                              if (ecx_66 != 0)
    0061d625                                  int32_t* edi_24
    0061d625                                  do
    0061d625                                      edi_24 = *(ecx_66 + 8)
    0061d622                                      *(*ecx_66 + 4)()
    0061d62c                                      ecx_66 = edi_24
    0061d62c                                  while (edi_24 != 0)
    0061d630                              void* edi_25 = *(esi_1 + 0x60)
    0061d633                              if (edi_25 != 0)
    0061d639                                  do
    0061d639                                      sub_4699e0(edi_25)
    0061d63e                                      edi_25 = *(edi_25 + 0x68)
    0061d63e                                  while (edi_25 != 0)
    0061d69f                      int80_t x87_r1
    0061d69f                      arg2, ecx_41 = sub_4d4340(arg2, esi_1, arg3, x87_r1, &var_c4)
    0061d6a4                      if ((*(esi_1 + 0x18) & 1) == 0)
    0061d6ae                          void* edi_28 = *(esi_1 + 0x5c)
    0061d6b1                          float* var_150_54
    0061d6b1                          if (edi_28 == 0)
    0061d7c1                              var_150_54 = esi_1 + 0x1c
    0061d6b9                          else
    0061d6b9                              if ((*(edi_28 + 0x18) & 1) == 0)
    0061d6c1                                  sub_475660(edi_28)
    0061d6d6                              float* eax_80 = sub_4aee20(&var_44, esi_1 + 0x2c, edi_28 + 0x38)
    0061d6e7                              var_150_54 = &var_ec
    0061d6e8                              var_12c = fconvert.s(fconvert.t(*(edi_28 + 0x48)) + fconvert.t(*eax_80))
    0061d6fc                              var_138 = fconvert.s(fconvert.t(*(edi_28 + 0x50)) + fconvert.t(*(eax_80 + 8)))
    0061d713                              long double x87_r1_10 = (fconvert.t(*(edi_28 + 0x44)) * fconvert.t(*(esi_1 + 0x1c))) + (fconvert.t(*(edi_28 + 0x38)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_28 + 0x3c)))
    0061d71d                              var_11c = fconvert.s(x87_r1_10 - (fconvert.t(*(esi_1 + 0x20)) * fconvert.t(*(edi_28 + 0x40))))
    0061d735                              long double x87_r1_15 = (fconvert.t(*(edi_28 + 0x3c)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(edi_28 + 0x44)) * fconvert.t(*(esi_1 + 0x20))) + (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_28 + 0x40)))
    0061d73e                              var_134 = fconvert.s(x87_r1_15 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_28 + 0x38))))
    0061d755                              long double x87_r1_20 = (fconvert.t(*(edi_28 + 0x44)) * fconvert.t(*(esi_1 + 0x24))) + (fconvert.t(*(edi_28 + 0x40)) * fconvert.t(*(esi_1 + 0x28))) + (fconvert.t(*(edi_28 + 0x38)) * fconvert.t(*(esi_1 + 0x20)))
    0061d75f                              var_124 = fconvert.s(x87_r1_20 - (fconvert.t(*(edi_28 + 0x3c)) * fconvert.t(*(esi_1 + 0x1c))))
    0061d776                              long double x87_r1_25 = ((fconvert.t(*(edi_28 + 0x44)) * fconvert.t(*(esi_1 + 0x28))) - (fconvert.t(*(esi_1 + 0x1c)) * fconvert.t(*(edi_28 + 0x38)))) - (fconvert.t(*(edi_28 + 0x3c)) * fconvert.t(*(esi_1 + 0x20)))
    0061d780                              var_13c = fconvert.s(x87_r1_25 - (fconvert.t(*(esi_1 + 0x24)) * fconvert.t(*(edi_28 + 0x40))))
    0061d788                              var_ec = fconvert.s(fconvert.t(var_11c))
    0061d6ec                              fconvert.t(*(edi_28 + 0x4c)) + fconvert.t(*(eax_80 + 4))
    0061d7c5                          sub_474580(esi_1 + 0x38, var_150_54)
    0061d7ca                          *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    0061d7d1                      var_90 = fconvert.s(fconvert.t(*(esi_1 + 0x38)))
    0061d7d8                      *(esi_1 + 0x3c)
    0061d7e2                      *(esi_1 + 0x40)
    0061d7ec                      *(esi_1 + 0x44)
    0061d7f6                      void* edi_30 = *(esi_1 + 0x5c)
    0061d7f9                      if (edi_30 == 0)
    0061da68                          *(esi_1 + 0x1c) = fconvert.s(fconvert.t(var_ac))
    0061da72                          *(esi_1 + 0x20) = fconvert.s(fconvert.t(var_a8_1))
    0061da7c                          *(esi_1 + 0x24) = fconvert.s(fconvert.t(var_a4_1))
    0061da86                          *(esi_1 + 0x28) = fconvert.s(fconvert.t(var_a0_1))
    0061da89                          int32_t eax_87 = *(esi_1 + 0x18)
    0061da8c                          if ((eax_87.b & 1) != 0)
    0061da90                              ecx_41 = *(esi_1 + 0x6c)
    0061da98                              *(esi_1 + 0x18) = eax_87 & 0xfffffffe
    0061da96                              if (ecx_41 != 0)
    0061da9d                                  ecx_41 = ecx_41
    0061daa5                                  int32_t* edi_33
    0061daa5                                  do
    0061daa5                                      edi_33 = *(ecx_41 + 8)
    0061daa2                                      *(*ecx_41 + 4)()
    0061daac                                      ecx_41 = edi_33
    0061daac                                  while (edi_33 != 0)
    0061dab0                              void* edi_34 = *(esi_1 + 0x60)
    0061dab3                              if (edi_34 != 0)
    0061dab9                                  do
    0061dab9                                      sub_4699e0(edi_34)
    0061dabe                                      edi_34 = *(edi_34 + 0x68)
    0061dabe                                  while (edi_34 != 0)
    0061d801                      else
    0061d801                          if ((*(edi_30 + 0x18) & 1) == 0)
    0061d80b                              void* ebp_16 = *(edi_30 + 0x5c)
    0061d80e                              float* var_150_56
    0061d80e                              if (ebp_16 == 0)
    0061d922                                  var_150_56 = edi_30 + 0x1c
    0061d816                              else
    0061d816                                  if ((*(ebp_16 + 0x18) & 1) == 0)
    0061d81e                                      sub_475660(ebp_16)
    0061d833                                  float* eax_82 = sub_4aee20(&var_44, edi_30 + 0x2c, ebp_16 + 0x38)
    0061d844                                  var_150_56 = &var_ec
    0061d845                                  var_12c = fconvert.s(fconvert.t(*(ebp_16 + 0x48)) + fconvert.t(*eax_82))
    0061d859                                  var_138 = fconvert.s(fconvert.t(*(ebp_16 + 0x50)) + fconvert.t(*(eax_82 + 8)))
    0061d871                                  long double x87_r1_47 = (fconvert.t(*(edi_30 + 0x1c)) * fconvert.t(*(ebp_16 + 0x44))) + (fconvert.t(*(edi_30 + 0x28)) * fconvert.t(*(ebp_16 + 0x38))) + (fconvert.t(*(edi_30 + 0x24)) * fconvert.t(*(ebp_16 + 0x3c)))
    0061d87b                                  var_11c = fconvert.s(x87_r1_47 - (fconvert.t(*(edi_30 + 0x20)) * fconvert.t(*(ebp_16 + 0x40))))
    0061d893                                  long double x87_r1_52 = (fconvert.t(*(edi_30 + 0x28)) * fconvert.t(*(ebp_16 + 0x3c))) + (fconvert.t(*(edi_30 + 0x20)) * fconvert.t(*(ebp_16 + 0x44))) + (fconvert.t(*(ebp_16 + 0x40)) * fconvert.t(*(edi_30 + 0x1c)))
    0061d89d                                  var_134 = fconvert.s(x87_r1_52 - (fconvert.t(*(ebp_16 + 0x38)) * fconvert.t(*(edi_30 + 0x24))))
    0061d8b5                                  long double x87_r1_57 = (fconvert.t(*(ebp_16 + 0x40)) * fconvert.t(*(edi_30 + 0x28))) + (fconvert.t(*(ebp_16 + 0x44)) * fconvert.t(*(edi_30 + 0x24))) + (fconvert.t(*(edi_30 + 0x20)) * fconvert.t(*(ebp_16 + 0x38)))
    0061d8bf                                  var_124 = fconvert.s(x87_r1_57 - (fconvert.t(*(edi_30 + 0x1c)) * fconvert.t(*(ebp_16 + 0x3c))))
    0061d8d7                                  long double x87_r1_62 = ((fconvert.t(*(edi_30 + 0x28)) * fconvert.t(*(ebp_16 + 0x44))) - (fconvert.t(*(edi_30 + 0x1c)) * fconvert.t(*(ebp_16 + 0x38)))) - (fconvert.t(*(edi_30 + 0x20)) * fconvert.t(*(ebp_16 + 0x3c)))
    0061d8e1                                  var_13c = fconvert.s(x87_r1_62 - (fconvert.t(*(ebp_16 + 0x40)) * fconvert.t(*(edi_30 + 0x24))))
    0061d8e9                                  var_ec = fconvert.s(fconvert.t(var_11c))
    0061d849                                  fconvert.t(*(ebp_16 + 0x4c)) + fconvert.t(*(eax_82 + 4))
    0061d926                              sub_474580(edi_30 + 0x38, var_150_56)
    0061d92b                              *(edi_30 + 0x18) = *(edi_30 + 0x18) | 1
    0061d934                          var_134 = fconvert.s(fneg(fconvert.t(*(edi_30 + 0x38))))
    0061d93d                          float var_10c_11 = fconvert.s(fneg(fconvert.t(*(edi_30 + 0x3c))))
    0061d946                          var_138 = fconvert.s(fneg(fconvert.t(*(edi_30 + 0x40))))
    0061d94d                          var_11c = fconvert.s(fconvert.t(*(edi_30 + 0x44)))
    0061d951                          long double x87_r1_78 = fconvert.t(var_ac)
    0061d95a                          long double x87_r7_659 = fconvert.t(var_11c)
    0061d962                          long double x87_r6_309 = fconvert.t(var_a0_1)
    0061d96b                          long double x87_r4_19 = fconvert.t(var_134)
    0061d977                          long double x87_r4_21 = fconvert.t(var_a4_1)
    0061d995                          var_11c = fconvert.s(((x87_r6_309 * x87_r4_19) + (x87_r1_78 * x87_r7_659) + (x87_r4_21 * fconvert.t(var_10c_11))) - (fconvert.t(var_a8_1) * fconvert.t(var_138)))
    0061d9b8                          var_134 = fconvert.s(((x87_r6_309 * fconvert.t(var_10c_11)) + (fconvert.t(var_a8_1) * x87_r7_659) + (x87_r1_78 * fconvert.t(var_138))) - (x87_r4_21 * x87_r4_19))
    0061d9db                          var_124 = fconvert.s(((x87_r6_309 * fconvert.t(var_138)) + (x87_r4_21 * x87_r7_659) + (fconvert.t(var_a8_1) * x87_r4_19)) - (x87_r1_78 * fconvert.t(var_10c_11)))
    0061d9fe                          var_13c = fconvert.s((((x87_r7_659 * x87_r6_309) - (x87_r4_19 * x87_r1_78)) - (fconvert.t(var_a8_1) * fconvert.t(var_10c_11))) - (x87_r4_21 * fconvert.t(var_138)))
    0061da06                          *(esi_1 + 0x1c) = fconvert.s(fconvert.t(var_11c))
    0061da0d                          *(esi_1 + 0x20) = fconvert.s(fconvert.t(var_134))
    0061da14                          *(esi_1 + 0x24) = fconvert.s(fconvert.t(var_124))
    0061da1b                          *(esi_1 + 0x28) = fconvert.s(fconvert.t(var_13c))
    0061da1e                          int32_t eax_84 = *(esi_1 + 0x18)
    0061da21                          if ((eax_84.b & 1) != 0)
    0061da29                              ecx_41 = *(esi_1 + 0x6c)
    0061da31                              *(esi_1 + 0x18) = eax_84 & 0xfffffffe
    0061da2f                              if (ecx_41 != 0)
    0061da3b                                  int32_t* edi_31
    0061da3b                                  do
    0061da3b                                      edi_31 = *(ecx_41 + 8)
    0061da38                                      *(*ecx_41 + 4)()
    0061da42                                      ecx_41 = edi_31
    0061da42                                  while (edi_31 != 0)
    0061da46                              void* edi_32 = *(esi_1 + 0x60)
    0061da49                              if (edi_32 != 0)
    0061da53                                  do
    0061da53                                      sub_4699e0(edi_32)
    0061da58                                      edi_32 = *(edi_32 + 0x68)
    0061da58                                  while (edi_32 != 0)
    0061dac5                      void* edi_35 = *(esi_1 + 0x5c)
    0061dac8                      if (edi_35 == 0)
    0061dd07                          *(esi_1 + 0x2c) = fconvert.s(fconvert.t(var_54))
    0061dd11                          *(esi_1 + 0x30) = fconvert.s(fconvert.t(var_50_1))
    0061dd1b                          *(esi_1 + 0x34) = fconvert.s(fconvert.t(var_4c_1))
    0061dd1b                          top_1 = 2
    0061dd1e                          int32_t eax_95 = *(esi_1 + 0x18)
    0061dd21                          if ((eax_95.b & 1) != 0)
    0061dd25                              ecx_41 = *(esi_1 + 0x6c)
    0061dd2d                              *(esi_1 + 0x18) = eax_95 & 0xfffffffe
    0061dd2b                              if (ecx_41 != 0)
    0061dd37                                  int32_t* edi_38
    0061dd37                                  do
    0061dd37                                      edi_38 = *(ecx_41 + 8)
    0061dd34                                      *(*ecx_41 + 4)()
    0061dd3e                                      ecx_41 = edi_38
    0061dd3e                                  while (edi_38 != 0)
    0061dd42                              void* edi_39 = *(esi_1 + 0x60)
    0061dd45                              if (edi_39 != 0)
    0061dd52                                  do
    0061dd52                                      sub_4699e0(edi_39)
    0061dd57                                      edi_39 = *(edi_39 + 0x68)
    0061dd57                                  while (edi_39 != 0)
    0061dad0                      else
    0061dad0                          if ((*(edi_35 + 0x18) & 1) == 0)
    0061dada                              void* ecx_77 = *(edi_35 + 0x5c)
    0061dadd                              float* var_150_58
    0061dadd                              if (ecx_77 == 0)
    0061dbe8                                  var_150_58 = edi_35 + 0x1c
    0061dae5                              else
    0061dae5                                  void* eax_90 = sub_4698a0(ecx_77)
    0061daf9                                  float* eax_91 = sub_4aee20(&var_44, edi_35 + 0x2c, eax_90)
    0061db06                                  var_12c = fconvert.s(fconvert.t(*(eax_90 + 0x10)) + fconvert.t(*eax_91))
    0061db1e                                  var_138 = fconvert.s(fconvert.t(*(eax_90 + 0x18)) + fconvert.t(*(eax_91 + 8)))
    0061db36                                  long double x87_r1_99 = (fconvert.t(*eax_90) * fconvert.t(*(edi_35 + 0x28))) + (fconvert.t(*(edi_35 + 0x1c)) * fconvert.t(*(eax_90 + 0xc))) + (fconvert.t(*(edi_35 + 0x24)) * fconvert.t(*(eax_90 + 4)))
    0061db40                                  var_11c = fconvert.s(x87_r1_99 - (fconvert.t(*(edi_35 + 0x20)) * fconvert.t(*(eax_90 + 8))))
    0061db58                                  long double x87_r1_104 = (fconvert.t(*(edi_35 + 0x28)) * fconvert.t(*(eax_90 + 4))) + (fconvert.t(*(edi_35 + 0x20)) * fconvert.t(*(eax_90 + 0xc))) + (fconvert.t(*(eax_90 + 8)) * fconvert.t(*(edi_35 + 0x1c)))
    0061db62                                  var_134 = fconvert.s(x87_r1_104 - (fconvert.t(*eax_90) * fconvert.t(*(edi_35 + 0x24))))
    0061db7a                                  long double x87_r1_109 = (fconvert.t(*(eax_90 + 8)) * fconvert.t(*(edi_35 + 0x28))) + (fconvert.t(*(eax_90 + 0xc)) * fconvert.t(*(edi_35 + 0x24))) + (fconvert.t(*(edi_35 + 0x20)) * fconvert.t(*eax_90))
    0061db84                                  var_124 = fconvert.s(x87_r1_109 - (fconvert.t(*(edi_35 + 0x1c)) * fconvert.t(*(eax_90 + 4))))
    0061db9c                                  long double x87_r1_114 = ((fconvert.t(*(edi_35 + 0x28)) * fconvert.t(*(eax_90 + 0xc))) - (fconvert.t(*(edi_35 + 0x1c)) * fconvert.t(*eax_90))) - (fconvert.t(*(edi_35 + 0x20)) * fconvert.t(*(eax_90 + 4)))
    0061dba6                                  var_13c = fconvert.s(x87_r1_114 - (fconvert.t(*(eax_90 + 8)) * fconvert.t(*(edi_35 + 0x24))))
    0061dbae                                  var_ec = fconvert.s(fconvert.t(var_11c))
    0061db0a                                  fconvert.t(*(eax_90 + 0x14)) + fconvert.t(*(eax_91 + 4))
    0061dbe2                                  var_150_58 = &var_ec
    0061dbec                              sub_474580(edi_35 + 0x38, var_150_58)
    0061dbf1                              *(edi_35 + 0x18) = *(edi_35 + 0x18) | 1
    0061dc0c                          var_11c = fconvert.s(fconvert.t(var_54) - fconvert.t(*(edi_35 + 0x48)))
    0061dc22                          var_134 = fconvert.s(fconvert.t(var_50_1) - fconvert.t(*(edi_35 + 0x4c)))
    0061dc30                          var_124 = fconvert.s(fconvert.t(var_4c_1) - fconvert.t(*(edi_35 + 0x50)))
    0061dc38                          var_b8 = fconvert.s(fconvert.t(var_11c))
    0061dc5a                          var_11c = fconvert.s(fneg(fconvert.t(*(edi_35 + 0x38))))
    0061dc63                          var_134 = fconvert.s(fneg(fconvert.t(*(edi_35 + 0x3c))))
    0061dc6c                          var_124 = fconvert.s(fneg(fconvert.t(*(edi_35 + 0x40))))
    0061dc73                          var_13c = fconvert.s(fconvert.t(*(edi_35 + 0x44)))
    0061dc7b                          var_ec = fconvert.s(fconvert.t(var_11c))
    0061dc97                          sub_4aee20(&var_6c, &var_b8, &var_ec)
    0061dca6                          *(esi_1 + 0x2c) = fconvert.s(fconvert.t(var_6c))
    0061dcb0                          *(esi_1 + 0x30) = fconvert.s(fconvert.t(var_68))
    0061dcba                          *(esi_1 + 0x34) = fconvert.s(fconvert.t(var_64))
    0061dcba                          top_1 = 2
    0061dcbd                          int32_t eax_92 = *(esi_1 + 0x18)
    0061dcc0                          if ((eax_92.b & 1) != 0)
    0061dcc8                              ecx_41 = *(esi_1 + 0x6c)
    0061dcd0                              *(esi_1 + 0x18) = eax_92 & 0xfffffffe
    0061dcce                              if (ecx_41 != 0)
    0061dcda                                  int32_t* edi_36
    0061dcda                                  do
    0061dcda                                      edi_36 = *(ecx_41 + 8)
    0061dcd7                                      *(*ecx_41 + 4)()
    0061dce1                                      ecx_41 = edi_36
    0061dce1                                  while (edi_36 != 0)
    0061dce5                              void* edi_37 = *(esi_1 + 0x60)
    0061dce8                              if (edi_37 != 0)
    0061dcf2                                  do
    0061dcf2                                      sub_4699e0(edi_37)
    0061dcf7                                      edi_37 = *(edi_37 + 0x68)
    0061dcf7                                  while (edi_37 != 0)
    0061dd63                  char var_f1_1 = 1
    0061dd5e                  if (var_105_1 != 0)
    0061dd72                      unimplemented  {fld dword [esp+0xbc]}
    0061dd79                      var_ec = fconvert.s(unimplemented  {fstp dword [esp+0x60]})
    0061dd79                      unimplemented  {fstp dword [esp+0x60]}
    0061dd7d                      unimplemented  {fld dword [esp+0xc0]}
    0061dd84                      unimplemented  {fstp dword [esp+0x64]}
    0061dd84                      unimplemented  {fstp dword [esp+0x64]}
    0061dd88                      unimplemented  {fld dword [esp+0xc4]}
    0061dd8f                      unimplemented  {fstp dword [esp+0x68]}
    0061dd8f                      unimplemented  {fstp dword [esp+0x68]}
    0061dd93                      unimplemented  {fld dword [esp+0xc8]}
    0061dd9a                      unimplemented  {fstp dword [esp+0x6c]}
    0061dd9a                      unimplemented  {fstp dword [esp+0x6c]}
    0061dd9a                      int16_t top_9 = top_1
    0061dd6e                      if ((*(esi_1 + 0x18) & 1) == 0)
    0061dda4                          void* edi_40 = *(esi_1 + 0x5c)
    0061dda7                          float* var_150_61
    0061dda7                          if (edi_40 == 0)
    0061decf                              var_150_61 = esi_1 + 0x1c
    0061ddaf                          else
    0061ddaf                              if ((*(edi_40 + 0x18) & 1) == 0)
    0061ddb7                                  sub_475660(edi_40)
    0061ddcc                              sub_4aee20(&var_44, esi_1 + 0x2c, edi_40 + 0x38)
    0061ddd1                              unimplemented  {fld dword [edi+0x10]}
    0061ddd4                              unimplemented  {fadd dword [eax]}
    0061ddd9                              var_12c = fconvert.s(unimplemented  {fstp dword [esp+0x20]})
    0061ddd9                              unimplemented  {fstp dword [esp+0x20]}
    0061dddd                              unimplemented  {fld dword [edi+0x14]}
    0061dde0                              unimplemented  {fadd dword [eax+0x4]}
    0061dde3                              unimplemented  {fstp dword [esp+0x24]}
    0061dde3                              unimplemented  {fstp dword [esp+0x24]}
    0061dde7                              unimplemented  {fld dword [edi+0x18]}
    0061ddea                              unimplemented  {fadd dword [eax+0x8]}
    0061ddf4                              var_150_61 = &var_38
    0061ddf5                              var_138 = fconvert.s(unimplemented  {fstp dword [esp+0x18]})
    0061ddf5                              unimplemented  {fstp dword [esp+0x18]}
    0061ddf9                              unimplemented  {fld dword [esi+0x28]}
    0061ddfc                              unimplemented  {fmul dword [edi]}
    0061ddfe                              unimplemented  {fld dword [esi+0x1c]}
    0061de01                              unimplemented  {fmul dword [edi+0xc]}
    0061de04                              unimplemented  {faddp st1}
    0061de04                              unimplemented  {faddp st1}
    0061de06                              unimplemented  {fld dword [esi+0x24]}
    0061de09                              unimplemented  {fmul dword [edi+0x4]}
    0061de0c                              unimplemented  {faddp st1}
    0061de0c                              unimplemented  {faddp st1}
    0061de0e                              unimplemented  {fld dword [esi+0x20]}
    0061de11                              unimplemented  {fmul dword [edi+0x8]}
    0061de14                              unimplemented  {fsubp st1}
    0061de14                              unimplemented  {fsubp st1}
    0061de16                              var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x34]})
    0061de16                              unimplemented  {fstp dword [esp+0x34]}
    0061de1a                              unimplemented  {fld dword [esi+0x20]}
    0061de1d                              unimplemented  {fmul dword [edi+0xc]}
    0061de20                              unimplemented  {fld dword [edi+0x4]}
    0061de23                              unimplemented  {fmul dword [esi+0x28]}
    0061de26                              unimplemented  {faddp st1}
    0061de26                              unimplemented  {faddp st1}
    0061de28                              unimplemented  {fld dword [edi+0x8]}
    0061de2b                              unimplemented  {fmul dword [esi+0x1c]}
    0061de2e                              unimplemented  {faddp st1}
    0061de2e                              unimplemented  {faddp st1}
    0061de30                              unimplemented  {fld dword [esi+0x24]}
    0061de33                              unimplemented  {fmul dword [edi]}
    0061de35                              unimplemented  {fsubp st1}
    0061de35                              unimplemented  {fsubp st1}
    0061de37                              var_134 = fconvert.s(unimplemented  {fstp dword [esp+0x1c]})
    0061de37                              unimplemented  {fstp dword [esp+0x1c]}
    0061de3b                              unimplemented  {fld dword [esi+0x24]}
    0061de3e                              unimplemented  {fmul dword [edi+0xc]}
    0061de41                              unimplemented  {fld dword [edi+0x8]}
    0061de44                              unimplemented  {fmul dword [esi+0x28]}
    0061de47                              unimplemented  {faddp st1}
    0061de47                              unimplemented  {faddp st1}
    0061de49                              unimplemented  {fld dword [esi+0x20]}
    0061de4c                              unimplemented  {fmul dword [edi]}
    0061de4e                              unimplemented  {faddp st1}
    0061de4e                              unimplemented  {faddp st1}
    0061de50                              unimplemented  {fld dword [edi+0x4]}
    0061de53                              unimplemented  {fmul dword [esi+0x1c]}
    0061de56                              unimplemented  {fsubp st1}
    0061de56                              unimplemented  {fsubp st1}
    0061de58                              var_124 = fconvert.s(unimplemented  {fstp dword [esp+0x2c]})
    0061de58                              unimplemented  {fstp dword [esp+0x2c]}
    0061de5c                              unimplemented  {fld dword [esi+0x28]}
    0061de5f                              unimplemented  {fmul dword [edi+0xc]}
    0061de62                              unimplemented  {fld dword [esi+0x1c]}
    0061de65                              unimplemented  {fmul dword [edi]}
    0061de67                              unimplemented  {fsubp st1}
    0061de67                              unimplemented  {fsubp st1}
    0061de69                              unimplemented  {fld dword [edi+0x4]}
    0061de6c                              unimplemented  {fmul dword [esi+0x20]}
    0061de6f                              unimplemented  {fsubp st1}
    0061de6f                              unimplemented  {fsubp st1}
    0061de71                              unimplemented  {fld dword [esi+0x24]}
    0061de74                              unimplemented  {fmul dword [edi+0x8]}
    0061de77                              unimplemented  {fsubp st1}
    0061de77                              unimplemented  {fsubp st1}
    0061de79                              var_13c = fconvert.s(unimplemented  {fstp dword [esp+0x14]})
    0061de79                              unimplemented  {fstp dword [esp+0x14]}
    0061de7d                              unimplemented  {fld dword [esp+0x34]}
    0061de81                              var_38 = fconvert.s(unimplemented  {fstp dword [esp+0x118]})
    0061de81                              unimplemented  {fstp dword [esp+0x118]}
    0061de88                              unimplemented  {fld dword [esp+0x1c]}
    0061de8c                              unimplemented  {fstp dword [esp+0x11c]}
    0061de8c                              unimplemented  {fstp dword [esp+0x11c]}
    0061de93                              unimplemented  {fld dword [esp+0x2c]}
    0061de97                              unimplemented  {fstp dword [esp+0x120]}
    0061de97                              unimplemented  {fstp dword [esp+0x120]}
    0061de9e                              unimplemented  {fld dword [esp+0x14]}
    0061dea2                              unimplemented  {fstp dword [esp+0x124]}
    0061dea2                              unimplemented  {fstp dword [esp+0x124]}
    0061dea9                              unimplemented  {fld dword [esp+0x24]}
    0061dead                              unimplemented  {fstp dword [esp+0x128]}
    0061dead                              unimplemented  {fstp dword [esp+0x128]}
    0061deb4                              unimplemented  {fld dword [esp+0x28]}
    0061deb8                              unimplemented  {fstp dword [esp+0x12c]}
    0061deb8                              unimplemented  {fstp dword [esp+0x12c]}
    0061debf                              unimplemented  {fld dword [esp+0x18]}
    0061dec3                              unimplemented  {fstp dword [esp+0x130]}
    0061dec3                              unimplemented  {fstp dword [esp+0x130]}
    0061dec3                              int16_t top_57
    0061dec3                              top_9 = top_57
    0061ded3                          sub_474580(esi_1 + 0x38, var_150_61)
    0061ded8                          *(esi_1 + 0x18) = *(esi_1 + 0x18) | 1
    0061dedc                      top_9 = top_9 - 1
    0061dedc                      unimplemented  {fld dword [esi+0x38]}
    0061dee6                      var_ac = fconvert.s(unimplemented  {fstp dword [esp+0xa0]})
    0061dee6                      unimplemented  {fstp dword [esp+0xa0]}
    0061deee                      unimplemented  {fld dword [esi+0x3c]}
    0061def2                      unimplemented  {fstp dword [esp+0xac]}
    0061def2                      unimplemented  {fstp dword [esp+0xac]}
    0061df00                      unimplemented  {fld dword [esi+0x40]}
    0061df05                      unimplemented  {fstp dword [esp+0xb0]}
    0061df05                      unimplemented  {fstp dword [esp+0xb0]}
    0061df0c                      unimplemented  {fld dword [esi+0x44]}
    0061df0f                      unimplemented  {fstp dword [esp+0xb4]}
    0061df0f                      unimplemented  {fstp dword [esp+0xb4]}
    0061df16                      unimplemented  {fld dword [esp+0x5c]}
    0061df1a                      float var_154_35 = fconvert.s(unimplemented  {fstp dword [esp]})
    0061df1a                      unimplemented  {fstp dword [esp]}
    0061df1e                      int32_t ecx_87
    0061df1e                      int32_t edx_22
    0061df1e                      ecx_87, edx_22 = sub_4aef90(&var_90, var_154_35, &var_ac)
    0061df23                      unimplemented  {fld dword [esp+0xa0]}
    0061df2a                      var_90 = fconvert.s(unimplemented  {fst dword [esp+0xbc]})
    0061df31                      unimplemented  {fld dword [esp+0xa4]}
    0061df38                      unimplemented  {fst dword [esp+0xc0]}
    0061df3f                      unimplemented  {fld dword [esp+0xa8]}
    0061df46                      unimplemented  {fst dword [esp+0xc4]}
    0061df4d                      unimplemented  {fld dword [esp+0xac]}
    0061df54                      unimplemented  {fst dword [esp+0xc8]}
    0061df5b                      unimplemented  {fld dword [esp+0x60]}
    0061df5f                      unimplemented  {fmulp st4}
    0061df5f                      unimplemented  {fmulp st4}
    0061df61                      unimplemented  {fld dword [esp+0x64]}
    0061df65                      unimplemented  {fmulp st3}
    0061df65                      unimplemented  {fmulp st3}
    0061df67                      unimplemented  {fxch st3}
    0061df67                      unimplemented  {fxch st3}
    0061df69                      unimplemented  {faddp st2}
    0061df69                      unimplemented  {faddp st2}
    0061df6b                      unimplemented  {fmul dword [esp+0x68]}
    0061df6f                      unimplemented  {faddp st1}
    0061df6f                      unimplemented  {faddp st1}
    0061df71                      unimplemented  {fld dword [esp+0x6c]}
    0061df75                      unimplemented  {fmulp st2}
    0061df75                      unimplemented  {fmulp st2}
    0061df77                      unimplemented  {faddp st1}
    0061df77                      unimplemented  {faddp st1}
    0061df79                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x30]})
    0061df79                      unimplemented  {fstp dword [esp+0x30]}
    0061df7d                      unimplemented  {fld dword [esp+0x30]}
    0061df81                      sub_765a10(ecx_87, edx_22, arg2, arg3, arg4)
    0061df86                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x30]})
    0061df86                      unimplemented  {fstp dword [esp+0x30]}
    0061df8a                      unimplemented  {fld dword [esp+0x30]}
    0061df8e                      unimplemented  {fadd st0}
    0061df90                      unimplemented  {fmul qword [data_7ea280]}
    0061df96                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x30]})
    0061df96                      unimplemented  {fstp dword [esp+0x30]}
    0061df9a                      unimplemented  {fld dword [esp+0x30]}
    0061df9e                      unimplemented  {fld dword [ebx+0x110]}
    0061dfa4                      unimplemented  {fcomp st1} f- unimplemented  {fcomp st1}
    0061dfa4                      bool c0_11 = unimplemented  {fcomp st1} f< unimplemented  {fcomp st1}
    0061dfa4                      bool c2_11 = is_unordered.t(unimplemented  {fcomp st1}, unimplemented  {fcomp st1})
    0061dfa4                      bool c3_11 = unimplemented  {fcomp st1} f== unimplemented  {fcomp st1}
    0061dfa4                      unimplemented  {fcomp st1}
    0061dfa8                      int16_t top_92
    0061dfa8                      bool p_4
    0061dfa8                      if (((c0_11 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((c2_11 ? 1 : 0 << 0xa) | ((c3_11 ? 1 : 0 << 0xe) | ((top_9 & 7) << 0xb)))):1.b & 0x41) == 0)
    0061dfc9                          unimplemented  {fstp st0}
    0061dfc9                          unimplemented  {fstp st0}
    0061dfc9                          top_92 = top_9 + 1
    0061dfad                      else
    0061dfad                          unimplemented  {fld dword [ebx+0x110]}
    0061dfb3                          unimplemented  {fsubr qword [data_7f85f0]}
    0061dfb9                          unimplemented  {fcompp } f- unimplemented  {fcompp }
    0061dfb9                          bool c0_12 = unimplemented  {fcompp } f< unimplemented  {fcompp }
    0061dfb9                          bool c2_12 = is_unordered.t(unimplemented  {fcompp }, unimplemented  {fcompp })
    0061dfb9                          bool c3_12 = unimplemented  {fcompp } f== unimplemented  {fcompp }
    0061dfb9                          unimplemented  {fcompp }
    0061dfb9                          unimplemented  {fcompp }
    0061dfb9                          top_92 = top_9 + 1
    0061dfbb                          (c0_12 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((c2_12 ? 1 : 0 << 0xa) | ((c3_12 ? 1 : 0 << 0xe) | ((top_92 & 7) << 0xb)))):1.b & 5
    0061dfbd                          p_4 = unimplemented  {test ah, 0x5}
    0061dfa8                      if (((c0_11 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((c2_11 ? 1 : 0 << 0xa) | ((c3_11 ? 1 : 0 << 0xe) | ((top_9 & 7) << 0xb)))):1.b & 0x41) == 0 || (((c0_11 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((c2_11 ? 1 : 0 << 0xa) | ((c3_11 ? 1 : 0 << 0xe) | ((top_9 & 7) << 0xb)))):1.b & 0x41) != 0 && not(p_4)))
    0061dfcb                          var_f1_1 = 1
    0061dfa8                      if (((c0_11 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((c2_11 ? 1 : 0 << 0xa) | ((c3_11 ? 1 : 0 << 0xe) | ((top_9 & 7) << 0xb)))):1.b & 0x41) != 0 && p_4)
    0061dfc2                          var_f1_1 = 0
    0061dfd0                      if (*(arg1 + 0xfc) != 0)
    0061dfdf                          unimplemented  {fld dword [esp+0x5c]}
    0061dfe3                          *(*(arg1 + 0xc8) + 0x18) = fconvert.s(unimplemented  {fstp dword [eax+0x18]})
    0061dfe3                          unimplemented  {fstp dword [eax+0x18]}
    0061dfe3                          top_92 = top_92
    0061dfee                      sub_562650(*(arg1 + 0x58), &var_11c)
    0061dff5                      unimplemented  {fld dword [eax+0xac]}
    0061e001                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x30]})
    0061e001                      unimplemented  {fstp dword [esp+0x30]}
    0061e005                      unimplemented  {fld dword [esp+0x5c]}
    0061e009                      unimplemented  {fld dword [esp+0x30]}
    0061e00d                      unimplemented  {fld st0}
    0061e00f                      unimplemented  {fsubp st2}
    0061e00f                      unimplemented  {fsubp st2}
    0061e011                      unimplemented  {fld dword [esp+0x54]}
    0061e015                      unimplemented  {fmulp st2}
    0061e015                      unimplemented  {fmulp st2}
    0061e017                      unimplemented  {fxch st1}
    0061e017                      unimplemented  {fxch st1}
    0061e019                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x30]})
    0061e019                      unimplemented  {fstp dword [esp+0x30]}
    0061e01d                      unimplemented  {fadd dword [esp+0x30]}
    0061e021                      unimplemented  {fstp dword [esp+0x5c]}
    0061e021                      unimplemented  {fstp dword [esp+0x5c]}
    0061e025                      unimplemented  {fld dword [esp+0x5c]}
    0061e029                      *(*(arg1 + 0xc8) + 0x18) = fconvert.s(unimplemented  {fstp dword [eax+0x18]})
    0061e029                      unimplemented  {fstp dword [eax+0x18]}
    0061e029                      top_1 = top_92
    0061e02c                  void* eax_101 = *(arg1 + 0xc4)
    0061e032                  unimplemented  {fld dword [esp+0xbc]}
    0061e039                  *(eax_101 + 0x18) = fconvert.s(unimplemented  {fstp dword [eax+0x18]})
    0061e039                  unimplemented  {fstp dword [eax+0x18]}
    0061e03c                  ecx_41.b = 1
    0061e03e                  unimplemented  {fld dword [esp+0xc0]}
    0061e045                  *(eax_101 + 0x1c) = fconvert.s(unimplemented  {fstp dword [eax+0x1c]})
    0061e045                  unimplemented  {fstp dword [eax+0x1c]}
    0061e048                  unimplemented  {fld dword [esp+0xc4]}
    0061e04f                  *(eax_101 + 0x20) = fconvert.s(unimplemented  {fstp dword [eax+0x20]})
    0061e04f                  unimplemented  {fstp dword [eax+0x20]}
    0061e052                  unimplemented  {fld dword [esp+0xc8]}
    0061e059                  *(eax_101 + 0x24) = fconvert.s(unimplemented  {fstp dword [eax+0x24]})
    0061e059                  unimplemented  {fstp dword [eax+0x24]}
    0061e069                  if (*(arg1 + 0xfc) != 0 && var_105_1 != 0)
    0061e078                      sub_562650(*(arg1 + 0x58), &var_11c)
    0061e07f                      unimplemented  {fld dword [eax+0xac]}
    0061e08b                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x30]})
    0061e08b                      unimplemented  {fstp dword [esp+0x30]}
    0061e093                      unimplemented  {fld dword [esp+0x5c]}
    0061e098                      unimplemented  {fld dword [esp+0x34]}
    0061e09c                      unimplemented  {fld st0}
    0061e09e                      unimplemented  {fsubp st2}
    0061e09e                      unimplemented  {fsubp st2}
    0061e0a0                      unimplemented  {fxch st1}
    0061e0a0                      unimplemented  {fxch st1}
    0061e0a2                      unimplemented  {fmul qword [data_7ea498]}
    0061e0a8                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x34]})
    0061e0a8                      unimplemented  {fstp dword [esp+0x34]}
    0061e0ac                      unimplemented  {fld dword [esp+0x34]}
    0061e0b0                      unimplemented  {fadd st1}
    0061e0b2                      unimplemented  {fstp dword [esp+0x60]}
    0061e0b2                      unimplemented  {fstp dword [esp+0x60]}
    0061e0b6                      unimplemented  {fld dword [esp+0x60]}
    0061e0ba                      *(*(arg1 + 0xc8) + 0x18) = fconvert.s(unimplemented  {fst dword [eax+0x18]})
    0061e0bd                      unimplemented  {fsubp st1}
    0061e0bd                      unimplemented  {fsubp st1}
    0061e0bf                      var_11c = fconvert.s(unimplemented  {fstp dword [esp+0x34]})
    0061e0bf                      unimplemented  {fstp dword [esp+0x34]}
    0061e0c3                      int16_t eax_103
    0061e0c3                      eax_103, ecx_41 = sub_4b5400(&var_11c)
    0061e0c3                      unimplemented  {call sub_4b5400}
    0061e0c8                      long double temp4_1 = fconvert.t(0.600000024f)
    0061e0c8                      unimplemented  {fcomp dword [data_7e5b84]} f- temp4_1
    0061e0c8                      bool c0_13 = unimplemented  {fcomp dword [data_7e5b84]} f< temp4_1
    0061e0c8                      bool c2_13 = is_unordered.t(unimplemented  {fcomp dword [data_7e5b84]}, temp4_1)
    0061e0c8                      bool c3_13 = unimplemented  {fcomp dword [data_7e5b84]} f== temp4_1
    0061e0c8                      unimplemented  {fcomp dword [data_7e5b84]}
    0061e0c8                      int16_t top_112 = top_112
    0061e0d1                      (c0_13 ? 1 : 0 << 8) | ((0 ? 1 : 0 << 9) | ((c2_13 ? 1 : 0 << 0xa) | ((c3_13 ? 1 : 0 << 0xe) | ((top_112 & 7) << 0xb)))):1.b & 5
    0061e0d3                      bool p_5 = unimplemented  {test ah, 0x5}
    0061e0d6                      if (p_5)
    0061e0dc                          ecx_41.b = 0
    0061e0d8                      else
    0061e0d8                          ecx_41.b = 1
    0061e0e3                  unimplemented  {fld dword [esp+0x5c]}
    0061e0ed                  *(*(arg1 + 0xc8) + 0x18) = fconvert.s(unimplemented  {fstp dword [eax+0x18]})
    0061e0ed                  unimplemented  {fstp dword [eax+0x18]}
    0061e0de                  if ((var_f1_1 == 0 || (var_f1_1 != 0 && var_10d_2 == 0)) || ((var_f1_1 != 0 && var_10d_2 != 0) && ecx_41.b == 0))
    0061e101                      eax_1 = 1
    0061e0de                  if ((var_f1_1 != 0 && var_10d_2 != 0) && ecx_41.b != 0)
    0061e0fd                      eax_1 = nullptr
    0061e106                  ebp_1 = var_80
    0061e10d                  *(arg1 + 0xdf) = eax_1.b
    0061bb2a      if (((((((eax_1 == nullptr || eax_1 == 1) || eax_1 == 2) || eax_1 == 6) || eax_1 == 7) || eax_1 == 3) || eax_1 == 5) || eax_1 u> 7)
    0061bbeb          if (var_10d_1 != 0)
    0061bbeb              goto label_61bc0e
    0061bbf4          if (*(arg1 + 0xdf) != 0)
    0061bbf4              goto label_61bc0e
    0061bb2a      if (((((((((eax_1 == nullptr || eax_1 == 1) || eax_1 == 2) || eax_1 == 6) || eax_1 == 7) || eax_1 == 3) || eax_1 == 5) || eax_1 u> 7) && var_10d_1 == 0) || eax_1 == 4)
    0061e117          var_4.b = 1
    0061e115          if (ebp_1 != 0)
    0061e124              eax_1 = sub_4d3a40(ebp_1, 0xffffffff)
    0061e139          var_48 = nullptr
    0061e12c          if (esi_1 != 0)
    0061e145              eax_1 = sub_4d3a40(esi_1, 0xffffffff)
    0061e158  *fsbase = var_c
    0061e165  return eax_1


----------------------------------------------------
int32_t* __stdcall sub_593110(void* arg1 @ ecx, int32_t arg2)

    00593116  int32_t ecx = *(arg1 + 0x38)
    00593119  int32_t* eax = nullptr
    0059311b  if (ecx s> 0)
    00593120      int32_t* edx_1 = *(arg1 + 0x40)
    005931e1      do
    005931e1          if (*edx_1 == arg2)
    005931e1              return eax
    0059312f          eax = eax + 1
    00593132          edx_1 = edx_1 + 4
    00593132      while (eax s< ecx)
    00593139  int32_t ecx_1 = *(arg1 + 0x3c)
    0059313c  if (*(arg1 + 0x38) == ecx_1)
    00593145      int32_t eax_1 = ecx_1
    00593147      if (eax_1 s< 0xa)
    0059314c          eax_1 = 0xa
    00593151      int32_t edi_2 = ecx_1 + eax_1
    00593154      if (edi_2 != ecx_1)
    00593159          int32_t ebx_1 = *(arg1 + 0x40)
    0059315c          void* eax_2 = nullptr
    0059315e          if (edi_2 s> 0)
    00593174              eax_2 = sub_42dc60(edi_2 << 2)
    00593179          int32_t ebp_1 = *(arg1 + 0x38)
    0059317c          int32_t var_8_1
    0059317c          if (ebp_1 s>= edi_2)
    00593186              ebp_1 = edi_2
    00593188              var_8_1 = edi_2
    00593180          else
    00593180              var_8_1 = ebp_1
    0059318c          if (ebp_1 s> 0)
    00593190              void* ecx_3 = eax_2
    00593192              void* ebx_2 = ebx_1 - eax_2
    00593194              int32_t edx_2 = ebp_1
    00593196              int32_t temp1_1
    00593196              do
    00593196                  if (ecx_3 != 0)
    0059319d                      *ecx_3 = *(ebx_2 + ecx_3)
    0059319f                      ebp_1 = var_8_1
    005931a3                  ecx_3 = ecx_3 + 4
    005931a6                  temp1_1 = edx_2
    005931a6                  edx_2 = edx_2 - 1
    005931a6              while (temp1_1 != 1)
    005931ab              ebx_1 = ebx_1
    005931b5          *(arg1 + 0x38) = ebp_1
    005931b8          *(arg1 + 0x3c) = edi_2
    005931bb          *(arg1 + 0x40) = eax_2
    005931be          sub_42dca0(arg1, edi_2, ebx_1)
    005931cb  eax = *(arg1 + 0x40) + (*(arg1 + 0x38) << 2)
    005931ce  if (eax != 0)
    005931d6      *eax = arg2
    005931d8  *(arg1 + 0x38) = *(arg1 + 0x38) + 1
    005931e1  return eax


------------------------------------------------------------------

int32_t __fastcall sub_70ca50(int32_t* arg1)

    0070ca5d  int32_t* fsbase
    0070ca5d  int32_t var_c = *fsbase
    0070ca5e  *fsbase = &var_c
    0070ca71  *arg1 = 0x801864
    0070ca7f  int32_t edx = sub_70cc90(arg1)
    0070ca86  sub_70b500(arg1)
    0070ca8b  int32_t* eax_1 = *(arg1 + 0x68)
    0070ca90  if (eax_1 != 0)
    0070ca98      *(arg1 + 0x68) = 0
    0070ca96      if (eax_1 != 0)
    0070caa3          edx = **eax_1(1)
    0070caa5      *(arg1 + 0x68) = 0
    0070cab1  void* esi = arg1 + 0x7c
    0070cab4  int32_t var_4
    0070cab4  var_4.b = 3
    0070caae  if (*(arg1 + 0x94) u>= 0x10)
    0070cac5      edx = sub_4a99b0(edx, arg1, *(esi + 4))
    0070caca  *(esi + 0x18) = 0xf
    0070cad1  *(esi + 0x14) = 0
    0070cad4  *(esi + 4) = 0
    0070cad7  void* esi_1 = arg1 + 0x6c
    0070cadf  *esi_1 = 0x7ee72c
    0070cae5  int32_t ebp_1 = 0
    0070caea  var_4.b = 5
    0070cae7  if (*(esi_1 + 4) s> 0)
    0070caf1      do
    0070caf1          int32_t eax_5 = *(esi_1 + 0xc)
    0070caf4          *(eax_5 + (ebp_1 << 2))
    0070cafc          *(eax_5 + (ebp_1 << 2)) = 0
    0070cb0b          ebp_1 = ebp_1 + 1
    0070cb0b      while (ebp_1 s< *(esi_1 + 4))
    0070cb13  int32_t eax_7 = *(esi_1 + 0xc)
    0070cb18  *(esi_1 + 4) = 0
    0070cb16  if (eax_7 != 0)
    0070cb24      edx = sub_42dca0(esi_1, arg1, eax_7)
    0070cb2b  var_4.b = 2
    0070cb30  sub_496a40(esi_1)
    0070cb35  void* esi_2 = arg1 + 0x48
    0070cb38  *(arg1 + 0x68) = 0
    0070cb41  var_4.b = 0
    0070cb3e  if (*(esi_2 + 0x18) u>= 0x10)
    0070cb51      sub_4a99b0(edx, arg1, *(esi_2 + 4))
    0070cb56  *(esi_2 + 0x18) = 0xf
    0070cb5d  *(esi_2 + 0x14) = 0
    0070cb62  *(esi_2 + 4) = 0
    0070cb6d  int32_t eax_10 = sub_70d6b0(arg1)
    0070cb79  *fsbase = var_c
    0070cb83  return eax_10
