import numpy as np
import em
import common
import naive_em as nem

X = np.loadtxt("test_incomplete.txt")
X_gold = np.loadtxt("test_complete.txt")

K = 4
n, d = X.shape
seed = 0

# naive_em
#X = np.loadtxt("toy_data.txt")
#mixture, post = common.init(X, 3, 0)
#nem.run(X, mixture, post)
# X = np.array([
#     [0.85794562, 0.84725174],
#     [0.6235637 , 0.38438171],
#     [0.29753461, 0.05671298],
#     [0.27265629, 0.47766512],
#     [0.81216873, 0.47997717],
#     [0.3927848 , 0.83607876],
#     [0.33739616, 0.64817187],
#     [0.36824154, 0.95715516],
#     [0.14035078, 0.87008726],
#     [0.47360805, 0.80091075],
#     [0.52047748, 0.67887953],
#     [0.72063265, 0.58201979],
#     [0.53737323, 0.75861562],
#     [0.10590761, 0.47360042],
#     [0.18633234, 0.73691818]])

# mixture = common.GaussianMixture(
#     np.array([
#         [0.6235637 , 0.38438171],
#         [0.3927848 , 0.83607876],
#         [0.81216873, 0.47997717],
#         [0.14035078, 0.87008726],
#         [0.36824154, 0.95715516],
#         [0.10590761, 0.47360042]
#     ]),
#     np.array([0.10038354, 0.07227467, 0.13240693, 0.12411825, 0.10497521, 0.12220856]),
#     np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# )
# #nem.estep(X, mixture)

# post = np.array([
#  [0.15765074, 0.20544344, 0.17314824, 0.15652173, 0.12169798, 0.18553787],
#  [0.1094766 , 0.22310587, 0.24109142, 0.0959303 , 0.19807563, 0.13232018],
#  [0.22679645, 0.36955206, 0.02836173, 0.03478709, 0.00807236, 0.33243031],
#  [0.16670188, 0.18637975, 0.20964608, 0.17120102, 0.09886116, 0.16721011],
#  [0.04250305, 0.22996176, 0.05151538, 0.33947585, 0.18753121, 0.14901275],
#  [0.09799086, 0.28677458, 0.16895715, 0.21054678, 0.0069597 , 0.22877093],
#  [0.16764519, 0.16897033, 0.25848053, 0.18674186, 0.09846462, 0.11969746],
#  [0.28655211, 0.02473762, 0.27387452, 0.27546459, 0.08641467, 0.05295649],
#  [0.11353057, 0.13090863, 0.20522811, 0.15786368, 0.35574052, 0.03672849],
#  [0.10510461, 0.08116927, 0.3286373 , 0.12745369, 0.23464272, 0.12299241],
#  [0.09757735, 0.06774952, 0.40286261, 0.08481828, 0.1206645 , 0.22632773],
#  [0.24899344, 0.02944918, 0.25413459, 0.02914503, 0.29614373, 0.14213403],
#  [0.35350682, 0.21890411, 0.26755234, 0.01418274, 0.10235276, 0.04350123],
#  [0.15555757, 0.06236572, 0.16703133, 0.21760554, 0.03369562, 0.36374421],
#  [0.1917808,  0.08982788, 0.17710673, 0.03179658, 0.19494387, 0.31454414]
# ])

# g = nem.mstep(X, post)
# r = (g.mu - np.array([
#     [0.43216722, 0.64675402],
#     [0.46139681, 0.57129172],
#     [0.44658753, 0.68978041],
#     [0.44913747, 0.66937822],
#     [0.47080526, 0.68008664],
#     [0.40532311, 0.57364425]
# ]) < 0.000001).all()
# print("mu", r)

# #print(g.var)
# #print(np.array([0.05218451, 0.06230449, 0.03538519, 0.05174859, 0.04524244, 0.05831186]))
# r = (g.var - 
# np.array([0.05218451, 0.06230449, 0.03538519, 0.05174859, 0.04524244, 0.05831186])
# < 0.000001).all()
# print("var", r)

# #print(g.p)
# #print(np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722]))
# r = (g.p - 
# np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# < 0.000001).all()
# print("p", r)

# X = np.array([
#     [0.47450216, 0.80615985, 0.95184929],
#     [0.28725426, 0.3801742 , 0.02768071],
#     [0.38350391, 0.67765966, 0.32209521],
#     [0.1809507 , 0.08062218, 0.51634058],
#     [0.78892962, 0.92135691, 0.57329741],
#     [0.61445627, 0.07610622, 0.24104604],
#     [0.49846132, 0.91945281, 0.39192892],
#     [0.55480281, 0.63998325, 0.77042052],
#     [0.10727314, 0.41872593, 0.783684  ],
#     [0.94176531, 0.49248698, 0.67735413],
#     [0.14880512, 0.4763987 , 0.79112124],
#     [0.77177774, 0.79782875, 0.65844778],
#     [0.46222447, 0.88179829, 0.48194016],
#     [0.16453907, 0.01194157, 0.71215553],
#     [0.16414014, 0.66550896, 0.77902733]
# ])
# post = np.array([
#     [0.41724525, 0.44696556, 0.09710817, 0.03868102],
#     [0.39789932, 0.44820407, 0.02274652, 0.13115009],
#     [0.07219022, 0.28737688, 0.38164942, 0.25878348],
#     [0.3398663 , 0.35984486, 0.24317213, 0.05711671],
#     [0.19924895, 0.44081508, 0.25633597, 0.1036    ],
#     [0.20332185, 0.20184191, 0.3249027,  0.26993355],
#     [0.19673785, 0.45078755, 0.25146267, 0.10101193],
#     [0.07111268, 0.32388425, 0.16654943, 0.43845365],
#     [0.23225899, 0.23802,    0.43034565, 0.09937535],
#     [0.33314001, 0.08065374, 0.35146638, 0.23473988],
#     [0.06489572, 0.33339143, 0.40932192, 0.19239094],
#     [0.30588423, 0.23657889, 0.20309585, 0.25444103],
#     [0.69677027, 0.23731354, 0.00814618, 0.05777   ],
#     [0.38982027, 0.07117481, 0.39242623, 0.14657869],
#     [0.20971307, 0.27450262, 0.0728351,  0.4429492 ]
# ])
# g = nem.mstep(X, post)
# r = (g.mu - np.array([
#     [0.44214988, 0.55309137, 0.56638934],
#     [0.42706866, 0.60421779, 0.56041226],
#     [0.42577166, 0.4802723 , 0.59993378],
#     [0.45528021, 0.54823288, 0.59747821]
# ]) < 0.000001).all()
# print("mu", r)

# r = (g.var - 
# np.array([0.07653705, 0.06713747, 0.07108582, 0.06274528])
# < 0.000001).all()
# print("var", r)

# r = (g.p - 
# np.array([0.27534033, 0.29542368, 0.24077095, 0.18846504])
# < 0.000001).all()
# print("p", r)

# X = np.array([
#  [0.85794562, 0.84725174],
#  [0.6235637 , 0.38438171],
#  [0.29753461, 0.05671298],
#  [0.27265629, 0.47766512],
#  [0.81216873, 0.47997717],
#  [0.3927848 , 0.83607876],
#  [0.33739616, 0.64817187],
#  [0.36824154, 0.95715516],
#  [0.14035078, 0.87008726],
#  [0.47360805, 0.80091075],
#  [0.52047748, 0.67887953],
#  [0.72063265, 0.58201979],
#  [0.53737323, 0.75861562],
#  [0.10590761, 0.47360042],
#  [0.18633234, 0.73691818]
# ])

# bicValue = common.bic(X, common.GaussianMixture(
#     np.array([
#         [0.6235637 , 0.38438171],
#         [0.3927848 , 0.83607876],
#         [0.81216873, 0.47997717],
#         [0.14035078, 0.87008726],
#         [0.36824154, 0.95715516],
#         [0.10590761, 0.47360042]
#     ]),
#     np.array([0.10038354, 0.07227467, 0.13240693, 0.12411825, 0.10497521, 0.12220856]),
#     np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# ), -1951.047106)
# print(bicValue)

# X = np.array([
#  [2., 5., 3., 0., 0.],
#  [3., 5., 0., 4., 3.],
#  [2., 0., 3., 3., 1.],
#  [4., 0., 4., 5., 2.],
#  [3., 4., 0., 0., 4.],
#  [1., 0., 4., 5., 5.],
#  [2., 5., 0., 0., 1.],
#  [3., 0., 5., 4., 3.],
#  [0., 5., 3., 3., 3.],
#  [2., 0., 0., 3., 3.],
#  [3., 4., 3., 3., 3.],
#  [1., 5., 3., 0., 1.],
#  [4., 5., 3., 4., 3.],
#  [1., 4., 0., 5., 2.],
#  [1., 5., 3., 3., 5.],
#  [3., 5., 3., 4., 3.],
#  [3., 0., 0., 4., 2.],
#  [3., 5., 3., 5., 1.],
#  [2., 4., 5., 5., 0.],
#  [2., 5., 4., 4., 2.]
# ])
# mu = np.array([
#     [2., 4., 5., 5., 0.],
#     [3., 5., 0., 4., 3.],
#     [2., 5., 4., 4., 2.],
#     [0., 5., 3., 3., 3.]
# ])
# var = np.array([5.93, 4.87, 3.99, 4.51])
# p = np.array([0.25, 0.25, 0.25, 0.25])
# mixture, post, ll = em.run(X, common.GaussianMixture(mu,var,p), None)
# print(mixture.mu, 
#     (mixture.mu - np.array([
#         [2.00570178, 4.99062403, 3.13772745, 4.00124767, 1.16193276],
#         [2.99396416, 4.68350343, 3.00527213, 3.52422521, 3.08969957],
#         [2.54539306, 4.20213487, 4.56501823, 4.55520636, 2.31130827],
#         [1.01534912, 4.99975322, 3.49251807, 3.99998124, 4.99986013]
#     ]) < 0.0001).all()
# )
# print(mixture.var, 
#     (mixture.var - np.array([
#         [0.25, 0.25, 0.44961685, 0.27930039]
#     ]) < 0.0001).all()
# )
# print(mixture.p, 
#     (mixture.p - np.array([
#         [0.27660973, 0.35431424, 0.26752518, 0.10155086]
#     ]) < 0.0001).all()
# )
# print(post, 
#     (post - np.array([
#         [8.35114583e-01, 1.26066023e-01, 8.03346942e-03, 3.07859243e-02],
#         [2.29595284e-04, 9.30406661e-01, 6.93634633e-02, 2.80840424e-07],
#         [9.98723643e-01, 1.34234094e-04, 1.14212255e-03, 1.65905887e-14],
#         [1.85331147e-04, 1.94115053e-03, 9.97873518e-01, 2.57285049e-14],
#         [1.82091725e-08, 8.82200084e-01, 1.17730763e-01, 6.91351811e-05],
#         [2.13395201e-14, 1.74763538e-08, 1.23289877e-04, 9.99876693e-01],
#         [9.78452231e-01, 2.41596929e-05, 2.15236097e-02, 2.05795060e-14],
#         [1.95291523e-06, 3.46537075e-03, 9.96532634e-01, 4.18625878e-08],
#         [2.53995753e-04, 9.99058306e-01, 6.46220953e-04, 4.14767958e-05],
#         [1.39755279e-03, 8.96199140e-01, 1.02340131e-01, 6.31761952e-05],
#         [1.02964283e-05, 9.98438589e-01, 1.55110233e-03, 1.18280899e-08],
#         [9.99175360e-01, 4.92298629e-07, 8.24147990e-04, 5.73816393e-13],
#         [4.54696111e-06, 9.96705586e-01, 3.28986689e-03, 1.91139775e-10],
#         [4.13182467e-02, 1.40457914e-05, 9.58667653e-01, 5.48560980e-08],
#         [9.22358785e-14, 4.78927600e-06, 3.67220413e-07, 9.99994844e-01],
#         [2.36604822e-04, 9.96136619e-01, 3.62659186e-03, 1.84275504e-07],
#         [1.09042309e-01, 2.42442342e-01, 6.48515348e-01, 8.68166867e-11],
#         [9.62134995e-01, 1.21159085e-04, 3.77438456e-02, 5.30337126e-16],
#         [1.39885506e-04, 2.34579872e-06, 9.99672523e-01, 1.85246074e-04],
#         [6.05773445e-01, 1.29236657e-02, 3.81302856e-01, 3.38895349e-08]
#     ]) < 0.0001).all()
# )
# print(ll, 
#     (ll - (-84.98451993042474)) < 0.0001
# )

# xstar = em.fill_matrix(X, mixture)

# print("predicted",
#     (xstar - np.array([
#         [2.         ,5.         ,3.         ,3.94554203 ,1.53247395],
#         [3.         ,5.         ,3.11376    ,4.         ,3.        ],
#         [2.         ,4.98967752 ,3.         ,3.         ,1.        ],
#         [4.         ,4.20321354 ,4.         ,5.         ,2.        ],
#         [3.         ,4.         ,3.18859109 ,3.64540838 ,4.        ],
#         [1.         ,4.99965498 ,4.         ,5.         ,5.        ],
#         [2.         ,5.         ,3.16858887 ,4.01321529 ,1.        ],
#         [3.         ,4.20380457 ,5.         ,4.         ,3.        ],
#         [2.99334056 ,5.         ,3.         ,3.         ,3.        ],
#         [2.         ,4.63458935 ,3.16542905 ,3.         ,3.        ],
#         [3.         ,4.         ,3.         ,3.         ,3.        ],
#         [1.         ,5.         ,3.         ,4.00170707 ,1.        ],
#         [4.         ,5.         ,3.         ,4.         ,3.        ],
#         [1.         ,4.         ,4.50628741 ,5.         ,2.        ],
#         [1.         ,5.         ,3.         ,3.         ,5.        ],
#         [3.         ,5.         ,3.         ,4.         ,3.        ],
#         [3.         ,4.40437447 ,4.03220151 ,4.         ,2.        ],
#         [3.         ,5.         ,3.         ,5.         ,1.        ],
#         [2.         ,4.         ,5.         ,5.         ,2.3116484 ],
#         [2.         ,5.         ,4.         ,4.         ,2.        ]
#     ]) < 0.0001).all()
# )

# mixture, post = common.init(X, 4, 0)
# post, ll = em.estep(X, mixture)
# mixture = em.mstep(X, post, mixture)

# print("mean", (np.abs(
#     mixture.mu - np.array([
#     [2.38279095, 4.64102716, 3.73583539, 4.28989488, 2.17237898],
#     [2.56629755, 4.6686168,  3.24084599, 3.88882023, 2.72874336],
#     [2.45674721, 4.72686227, 3.55798344, 4.05614484, 2.5030405 ],
#     [2.00305536, 4.7674522,  3.37388115, 3.7905181,  2.97986269]
# ])) < 0.0001).all())
# print("variance", (np.abs(
#     mixture.var - np.array([0.71489705, 0.64830186, 0.73650336, 0.85722393])
# ) < 0.0001).all())
# print("p", (np.abs(
#     mixture.p - np.array([0.13810266, 0.17175435, 0.46575794, 0.22438505])
# ) < 0.0001).all())
#P: 

# print((
#     np.abs(post -np.array([
#         [0.17713577, 0.12995693, 0.43161668, 0.26129062],
#         [0.08790299, 0.35848927, 0.41566414, 0.13794359],
#         [0.15529703, 0.10542632, 0.5030648,  0.23621184],
#         [0.23290326, 0.10485918, 0.58720619, 0.07503136],
#         [0.09060401, 0.41569201, 0.32452345, 0.16918054],
#         [0.07639077, 0.08473656, 0.41423836, 0.42463432],
#         [0.21838413, 0.20787523, 0.41319756, 0.16054307],
#         [0.16534478, 0.04759109, 0.63399833, 0.1530658 ],
#         [0.05486073, 0.13290982, 0.37956674, 0.43266271],
#         [0.08779356, 0.28748372, 0.37049225, 0.25423047],
#         [0.07715067, 0.18612696, 0.50647898, 0.23024339],
#         [0.16678427, 0.07789806, 0.45643509, 0.29888258],
#         [0.08544132, 0.24851049, 0.53837544, 0.12767275],
#         [0.17773171, 0.19578852, 0.41091504, 0.21556473],
#         [0.02553529, 0.1258932,  0.29235844, 0.55621307],
#         [0.07604748, 0.19032469, 0.54189543, 0.1917324 ],
#         [0.15623582, 0.31418901, 0.41418177, 0.1153934 ],
#         [0.19275595, 0.13517877, 0.56734832, 0.10471696],
#         [0.33228594, 0.02780214, 0.50397264, 0.13593928],
#         [0.12546781, 0.05835499, 0.60962919, 0.20654801]
#     ])) < 0.001).all()
# )
# print(ll, -152.16319226209848)


# X = np.array([
#  [0.85794562, 0.84725174],
#  [0.6235637 , 0.38438171],
#  [0.29753461, 0.05671298],
#  [0.        , 0.47766512],
#  [0.        , 0.        ],
#  [0.3927848 , 0.        ],
#  [0.        , 0.64817187],
#  [0.36824154, 0.        ],
#  [0.        , 0.87008726],
#  [0.47360805, 0.        ],
#  [0.        , 0.        ],
#  [0.        , 0.        ],
#  [0.53737323, 0.75861562],
#  [0.10590761, 0.        ],
#  [0.18633234, 0.        ],
# ])
# mu = np.array([
#     [0.6235637 , 0.38438171],
#     [0.3927848 , 0.        ],
#     [0.        , 0.        ],
#     [0.        , 0.87008726],
#     [0.36824154, 0.        ],
#     [0.10590761, 0.        ]
# ])
# var = np.array([0.16865269, 0.14023295, 0.1637321,  0.3077471,  0.13718238, 0.14220473])
# p = np.array([0.1680912,  0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])

# mixture, post = common.init(X, 6, 0)
# post, ll = em.estep(X, common.GaussianMixture(mu, var, p))

# print((post - np.array([
#         [0.65087662, 0.05857439, 0.02234959, 0.20258382, 0.0460844 , 0.01953118],
#         [0.36462427, 0.20175055, 0.09281546, 0.06127579, 0.17543624, 0.1040977 ],
#         [0.10995174, 0.22464491, 0.20513252, 0.02839796, 0.21019956, 0.22167331],
#         [0.27996042, 0.13156734, 0.18479023, 0.14012134, 0.11793063, 0.14563005],
#         [0.1680912 , 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722],
#         [0.17188253, 0.2079498 , 0.16224482, 0.0981313 , 0.18938262, 0.17040893],
#         [0.33305679, 0.09456056, 0.14652199, 0.23671559, 0.08347925, 0.10566582],
#         [0.1634873 , 0.20447446, 0.16926051, 0.09967819, 0.18702813, 0.1760714 ],
#         [0.34047752, 0.04761128, 0.08765585, 0.42923507, 0.04092387, 0.0540964 ],
#         [0.20164864, 0.21756366, 0.14029582, 0.09378665, 0.19519249, 0.15151274],
#         [0.1680912 , 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722],
#         [0.1680912 , 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722],
#         [0.47521046, 0.09942182, 0.06885849, 0.20917529, 0.08508798, 0.06224596],
#         [0.09128906, 0.15565204, 0.25208102, 0.12427594, 0.14824935, 0.22845259],
#         [0.11018277, 0.17234878, 0.22552021, 0.1149792 , 0.16231678, 0.21465225]
# ]) < 0.0001).all())
# print(ll, -8.829390)

# X = np.array([
#     [0.29631297, 0.3419575 ],
#     [0.64511574, 0.65308514],
#     [0.59046188, 0.08021023],
#     [0.27459271, 0.59379119],
#     [0.27745058, 0.14426059],
#     [0.22551674, 0.99901496],
#     [0.03931493, 0.29330728],
#     [0.97363941, 0.98660001],
#     [0.16353288, 0.16634118],
#     [0.71306986, 0.2183024 ],
#     [0.44967727, 0.3667784 ],
#     [0.57010006, 0.23279725],
#     [0.33517687, 0.27514596],
#     [0.7068513 , 0.113907  ],
#     [0.76573758, 0.10566369]
# ])
# post = np.array([
#     [0.0262518 , 0.21011764, 0.14280712, 0.08709787, 0.16937806, 0.06289188, 0.151815,   0.14964062],
#     [0.00788333, 0.16588789, 0.20275063, 0.06988998, 0.05424554, 0.25126598, 0.20619225, 0.04188441],
#     [0.16552503, 0.05522726, 0.16140794, 0.16662466, 0.00158334, 0.08394053, 0.12889056, 0.23680068],
#     [0.05383745, 0.05518489, 0.13537665, 0.17254323, 0.06093869, 0.14825353, 0.14572721, 0.22813835],
#     [0.00762491, 0.14026115, 0.0545788,  0.1739761,  0.26628577, 0.2575128, 0.02319385, 0.07656663],
#     [0.22431632, 0.02486454, 0.02159303, 0.1050787,  0.21846035, 0.05481001, 0.05854227, 0.2923348 ],
#     [0.10079721, 0.00077189, 0.0488652,  0.20047116, 0.22222392, 0.18915847, 0.13581978, 0.10189237],
#     [0.02837905, 0.16421876, 0.22332241, 0.08005447, 0.12394211, 0.23035704, 0.12758974, 0.02213641],
#     [0.08567892, 0.12396924, 0.05241699, 0.13587938, 0.2800511,  0.22455351, 0.06303389, 0.03441698],
#     [0.00887223, 0.07659321, 0.14789842, 0.07418628, 0.15591484, 0.22972251, 0.22750707, 0.07930544],
#     [0.05057667, 0.27044523, 0.06134865, 0.00615694, 0.00732017, 0.43260783, 0.16650271, 0.00504181],
#     [0.07850025, 0.06724201, 0.14139442, 0.11789898, 0.10743164, 0.21835024, 0.22742807, 0.04175439],
#     [0.05928105, 0.04378272, 0.0950758,  0.15370568, 0.11393945, 0.01656007, 0.27347615, 0.24417908],
#     [0.05180545, 0.04776983, 0.0904065,  0.11889812, 0.21639122, 0.07684526, 0.21645327, 0.18143035],
#     [0.02468246, 0.24962526, 0.22441499, 0.03763962, 0.12225649, 0.08580603, 0.20661284, 0.04896231]
# ])
# mixture = common.GaussianMixture(
# np.array([
#     [0.27459271, 0.59379119],
#     [0.52826034, 0.36602265],
#     [0.57372591, 0.38548371],
#     [0.4022937 , 0.34551835],
#     [0.40638705, 0.35419016],
#     [0.48061944, 0.38023586],
#     [0.51860051, 0.34207885],
#     [0.40481492, 0.40091957]
# ]), None, None)
# mixture = em.mstep(X, post, mixture)
# print(mixture.mu, 
#     (mixture.mu - np.array([
#         [0.27459271, 0.59379119],
#         [0.52826034, 0.36602265],
#         [0.57372591, 0.38548371],
#         [0.4022937 , 0.34551835],
#         [0.40638705, 0.35419016],
#         [0.48061944, 0.38023586],
#         [0.51860051, 0.34207885],
#         [0.40481492, 0.40091957]
#     ]) < 0.0001).all()
# )
# print(mixture.var,(mixture.var - np.array([
#         [0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25]
#     ]) < 0.0001).all()
# )
# print(mixture.p, 
#     (mixture.p - np.array([
#         [0.06493414, 0.1130641, 0.12024384, 0.11334008, 0.14135751, 0.17084238, 0.15725231, 0.11896564]
#     ]) < 0.0001).all()
# )

######################################### FILL MATRIX
# X = np.array([
#     [0.85794562 ,0.84725174],
#     [0.6235637  ,0.38438171],
#     [0.29753461 ,0.05671298],
#     [0.         ,0.47766512],
#     [0.         ,0.        ],
#     [0.3927848  ,0.        ],
#     [0.         ,0.64817187],
#     [0.36824154 ,0.        ],
#     [0.         ,0.87008726],
#     [0.47360805 ,0.        ],
#     [0.         ,0.        ],
#     [0.         ,0.        ],
#     [0.53737323 ,0.75861562],
#     [0.10590761 ,0.        ],
#     [0.18633234 ,0.        ]
# ])
# mu = np.array([
#     [0.6235637  ,0.38438171],
#     [0.3927848  ,0.        ],
#     [0.         ,0.        ],
#     [0.         ,0.87008726],
#     [0.36824154 ,0.        ],
#     [0.10590761 ,0.        ]
# ])
# var = np.array([0.16865269, 0.14023295, 0.1637321, 0.3077471, 0.13718238, 0.14220473])
# p = np.array([0.1680912, 0.15835331, 0.21384187, 0.14223565, 0.14295074, 0.17452722])
# xstar = em.fill_matrix(X, common.GaussianMixture(mu,var,p))

# print(xstar,
#     (xstar - np.array([
#         [0.85794562 ,0.84725174],
#         [0.6235637  ,0.38438171],
#         [0.29753461 ,0.05671298],
#         [0.28510109 ,0.47766512],
#         [0.23813851 ,0.18836861],
#         [0.3927848  ,0.15145129],
#         [0.28675542 ,0.64817187],
#         [0.36824154 ,0.14957025],
#         [0.2518095  ,0.87008726],
#         [0.47360805 ,0.15911262],
#         [0.23813851 ,0.18836861],
#         [0.23813851 ,0.18836861],
#         [0.53737323 ,0.75861562],
#         [0.10590761 ,0.14322076],
#         [0.18633234 ,0.14239418]
#     ]) < 0.0001).all()
# )

Xgold = np.loadtxt("netflix_complete.txt")
X = np.loadtxt("netflix_incomplete.txt")

for seed in [0,1,2,3,4]:
    mu = np.loadtxt("Mixture.12.%d.mu.txt" % seed)
    var = np.loadtxt("Mixture.12.%d.var.txt" % seed)
    p = np.loadtxt("Mixture.12.%d.p.txt" % seed)
    m = common.GaussianMixture(mu, var, p)
    Y = em.fill_matrix(X, m)
    rmse = common.rmse(Xgold, Y)
    print(seed, rmse)
